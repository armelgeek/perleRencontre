[
    {
        "label": "gyp.common",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.common",
        "description": "gyp.common",
        "detail": "gyp.common",
        "documentation": {
            "value": "\n```python\nimport gyp.common\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetEnvironFallback",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {
            "value": "\n```python\nimport gyp.common\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GypError",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {
            "value": "\n```python\nimport gyp.common\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GypError",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {
            "value": "\n```python\nimport gyp.common\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OrderedSet",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {
            "value": "\n```python\nimport gyp.common\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OrderedSet",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {
            "value": "\n```python\nimport gyp.common\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetEnvironFallback",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {
            "value": "\n```python\nimport gyp.common\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GypError",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {
            "value": "\n```python\nimport gyp.common\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GypError",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {
            "value": "\n```python\nimport gyp.common\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OrderedSet",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {
            "value": "\n```python\nimport gyp.common\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OrderedSet",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {
            "value": "\n```python\nimport gyp.common\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GypError",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {
            "value": "\n```python\nimport gyp.common\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.ninja_syntax",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.ninja_syntax",
        "description": "gyp.ninja_syntax",
        "detail": "gyp.ninja_syntax",
        "documentation": {
            "value": "\n```python\nimport gyp.ninja_syntax\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {
            "value": "\n```python\nimport json\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "posixpath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "posixpath",
        "description": "posixpath",
        "detail": "posixpath",
        "documentation": {
            "value": "\n```python\nimport posixpath\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {
            "value": "\n```python\nimport sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp",
        "description": "gyp",
        "detail": "gyp",
        "documentation": {
            "value": "\n```python\nimport gyp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.generator.make",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.generator.make",
        "description": "gyp.generator.make",
        "detail": "gyp.generator.make",
        "documentation": {
            "value": "\n```python\nimport gyp.generator.make\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {
            "value": "\n```python\nimport re\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {
            "value": "\n```python\nimport subprocess\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {
            "value": "\n```python\nimport multiprocessing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {
            "value": "\n```python\nimport signal\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {
            "value": "\n```python\nimport string\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "upper",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {
            "value": "\n```python\nimport string\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {
            "value": "\n```python\nimport collections\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.msvs_emulation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.msvs_emulation",
        "description": "gyp.msvs_emulation",
        "detail": "gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nimport gyp.msvs_emulation\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "xml.sax.saxutils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.sax.saxutils",
        "description": "xml.sax.saxutils",
        "detail": "xml.sax.saxutils",
        "documentation": {
            "value": "\n```python\nimport xml.sax.saxutils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "escape",
        "importPath": "xml.sax.saxutils",
        "description": "xml.sax.saxutils",
        "isExtraImport": true,
        "detail": "xml.sax.saxutils",
        "documentation": {
            "value": "\n```python\nimport xml.sax.saxutils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {
            "value": "\n```python\nimport os.path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "shlex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shlex",
        "description": "shlex",
        "detail": "shlex",
        "documentation": {
            "value": "\n```python\nimport shlex\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "xml.etree.cElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.cElementTree",
        "description": "xml.etree.cElementTree",
        "detail": "xml.etree.cElementTree",
        "documentation": {
            "value": "\n```python\nimport xml.etree.cElementTree\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {
            "value": "\n```python\nimport errno\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {
            "value": "\n```python\nimport pprint\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "code",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "code",
        "description": "code",
        "detail": "code",
        "documentation": {
            "value": "\n```python\nimport code\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.xcode_emulation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.xcode_emulation",
        "description": "gyp.xcode_emulation",
        "detail": "gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nimport gyp.xcode_emulation\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {
            "value": "\n```python\nimport hashlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {
            "value": "\n```python\nimport copy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ntpath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ntpath",
        "description": "ntpath",
        "detail": "ntpath",
        "documentation": {
            "value": "\n```python\nimport ntpath\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.easy_xml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.easy_xml",
        "description": "gyp.easy_xml",
        "detail": "gyp.easy_xml",
        "documentation": {
            "value": "\n```python\nimport gyp.easy_xml\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.generator.ninja",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.generator.ninja",
        "description": "gyp.generator.ninja",
        "detail": "gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nimport gyp.generator.ninja\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.MSVSNew",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSNew",
        "description": "gyp.MSVSNew",
        "detail": "gyp.MSVSNew",
        "documentation": {
            "value": "\n```python\nimport gyp.MSVSNew\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.MSVSProject",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSProject",
        "description": "gyp.MSVSProject",
        "detail": "gyp.MSVSProject",
        "documentation": {
            "value": "\n```python\nimport gyp.MSVSProject\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.MSVSSettings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSSettings",
        "description": "gyp.MSVSSettings",
        "detail": "gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nimport gyp.MSVSSettings\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.MSVSToolFile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSToolFile",
        "description": "gyp.MSVSToolFile",
        "detail": "gyp.MSVSToolFile",
        "documentation": {
            "value": "\n```python\nimport gyp.MSVSToolFile\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.MSVSUserFile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSUserFile",
        "description": "gyp.MSVSUserFile",
        "detail": "gyp.MSVSUserFile",
        "documentation": {
            "value": "\n```python\nimport gyp.MSVSUserFile\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.MSVSUtil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSUtil",
        "description": "gyp.MSVSUtil",
        "detail": "gyp.MSVSUtil",
        "documentation": {
            "value": "\n```python\nimport gyp.MSVSUtil\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.MSVSVersion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSVersion",
        "description": "gyp.MSVSVersion",
        "detail": "gyp.MSVSVersion",
        "documentation": {
            "value": "\n```python\nimport gyp.MSVSVersion\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.generator.msvs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.generator.msvs",
        "description": "gyp.generator.msvs",
        "detail": "gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nimport gyp.generator.msvs\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {
            "value": "\n```python\nimport unittest\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StringIO",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "StringIO",
        "description": "StringIO",
        "detail": "StringIO",
        "documentation": {
            "value": "\n```python\nimport StringIO\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StringIO",
        "importPath": "cStringIO",
        "description": "cStringIO",
        "isExtraImport": true,
        "detail": "cStringIO",
        "documentation": {
            "value": "\n```python\nimport cStringIO\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestCommon",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "TestCommon",
        "description": "TestCommon",
        "detail": "TestCommon",
        "documentation": {
            "value": "\n```python\nimport TestCommon\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "filecmp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "filecmp",
        "description": "filecmp",
        "detail": "filecmp",
        "documentation": {
            "value": "\n```python\nimport filecmp\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.xcodeproj_file",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.xcodeproj_file",
        "description": "gyp.xcodeproj_file",
        "detail": "gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nimport gyp.xcodeproj_file\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.xcode_ninja",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.xcode_ninja",
        "description": "gyp.xcode_ninja",
        "detail": "gyp.xcode_ninja",
        "documentation": {
            "value": "\n```python\nimport gyp.xcode_ninja\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {
            "value": "\n```python\nimport shutil\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {
            "value": "\n```python\nimport tempfile\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.generator.xcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.generator.xcode",
        "description": "gyp.generator.xcode",
        "detail": "gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nimport gyp.generator.xcode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {
            "value": "\n```python\nimport random\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {
            "value": "\n```python\nimport socket\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {
            "value": "\n```python\nimport glob\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.input",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.input",
        "description": "gyp.input",
        "detail": "gyp.input",
        "documentation": {
            "value": "\n```python\nimport gyp.input\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "optparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optparse",
        "description": "optparse",
        "detail": "optparse",
        "documentation": {
            "value": "\n```python\nimport optparse\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {
            "value": "\n```python\nimport traceback\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {
            "value": "\n```python\nimport __future__\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {
            "value": "\n```python\nimport locale\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fcntl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fcntl",
        "description": "fcntl",
        "detail": "fcntl",
        "documentation": {
            "value": "\n```python\nimport fcntl\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {
            "value": "\n```python\nimport struct\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Const",
        "importPath": "compiler.ast",
        "description": "compiler.ast",
        "isExtraImport": true,
        "detail": "compiler.ast",
        "documentation": {
            "value": "\n```python\nimport compiler.ast\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Dict",
        "importPath": "compiler.ast",
        "description": "compiler.ast",
        "isExtraImport": true,
        "detail": "compiler.ast",
        "documentation": {
            "value": "\n```python\nimport compiler.ast\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Discard",
        "importPath": "compiler.ast",
        "description": "compiler.ast",
        "isExtraImport": true,
        "detail": "compiler.ast",
        "documentation": {
            "value": "\n```python\nimport compiler.ast\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "List",
        "importPath": "compiler.ast",
        "description": "compiler.ast",
        "isExtraImport": true,
        "detail": "compiler.ast",
        "documentation": {
            "value": "\n```python\nimport compiler.ast\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Module",
        "importPath": "compiler.ast",
        "description": "compiler.ast",
        "isExtraImport": true,
        "detail": "compiler.ast",
        "documentation": {
            "value": "\n```python\nimport compiler.ast\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Node",
        "importPath": "compiler.ast",
        "description": "compiler.ast",
        "isExtraImport": true,
        "detail": "compiler.ast",
        "documentation": {
            "value": "\n```python\nimport compiler.ast\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Stmt",
        "importPath": "compiler.ast",
        "description": "compiler.ast",
        "isExtraImport": true,
        "detail": "compiler.ast",
        "documentation": {
            "value": "\n```python\nimport compiler.ast\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "compiler",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "compiler",
        "description": "compiler",
        "detail": "compiler",
        "documentation": {
            "value": "\n```python\nimport compiler\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp.simple_copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.simple_copy",
        "description": "gyp.simple_copy",
        "detail": "gyp.simple_copy",
        "documentation": {
            "value": "\n```python\nimport gyp.simple_copy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {
            "value": "\n```python\nimport threading\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {
            "value": "\n```python\nimport time\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fnmatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch",
        "description": "fnmatch",
        "detail": "fnmatch",
        "documentation": {
            "value": "\n```python\nimport fnmatch\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "plistlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plistlib",
        "description": "plistlib",
        "detail": "plistlib",
        "documentation": {
            "value": "\n```python\nimport plistlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {
            "value": "\n```python\nimport textwrap\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "stat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stat",
        "description": "stat",
        "detail": "stat",
        "documentation": {
            "value": "\n```python\nimport stat\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "xml.dom.minidom",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.dom.minidom",
        "description": "xml.dom.minidom",
        "detail": "xml.dom.minidom",
        "documentation": {
            "value": "\n```python\nimport xml.dom.minidom\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "parse",
        "importPath": "xml.dom.minidom",
        "description": "xml.dom.minidom",
        "isExtraImport": true,
        "detail": "xml.dom.minidom",
        "documentation": {
            "value": "\n```python\nimport xml.dom.minidom\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Node",
        "importPath": "xml.dom.minidom",
        "description": "xml.dom.minidom",
        "isExtraImport": true,
        "detail": "xml.dom.minidom",
        "documentation": {
            "value": "\n```python\nimport xml.dom.minidom\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pretty_vcproj",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pretty_vcproj",
        "description": "pretty_vcproj",
        "detail": "pretty_vcproj",
        "documentation": {
            "value": "\n```python\nimport pretty_vcproj\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {
            "value": "\n```python\nimport setuptools\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Directive",
        "importPath": "docutils.parsers.rst",
        "description": "docutils.parsers.rst",
        "isExtraImport": true,
        "detail": "docutils.parsers.rst",
        "documentation": {
            "value": "\n```python\nimport docutils.parsers.rst\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "directives",
        "importPath": "docutils.parsers.rst",
        "description": "docutils.parsers.rst",
        "isExtraImport": true,
        "detail": "docutils.parsers.rst",
        "documentation": {
            "value": "\n```python\nimport docutils.parsers.rst\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "nodes",
        "importPath": "docutils",
        "description": "docutils",
        "isExtraImport": true,
        "detail": "docutils",
        "documentation": {
            "value": "\n```python\nimport docutils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {
            "value": "\n```python\nimport sys.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Target",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "class Target(object):\n  \"\"\"Holds information about a particular target:\n  deps: set of Targets this Target depends upon. This is not recursive, only the\n    direct dependent Targets.\n  match_status: one of the MatchStatus values.\n  back_deps: set of Targets that have a dependency on this Target.\n  visited: used during iteration to indicate whether we've visited this target.\n    This is used for two iterations, once in building the set of Targets and\n    again in _GetBuildTargets().\n  name: fully qualified name of the target.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import Target\n```\n\n```python\n\n\n```\n\n```python\nclass Target(object):\n  \"\"\"Holds information about a particular target:\n  deps: set of Targets this Target depends upon. This is not recursive, only the\n    direct dependent Targets.\n  match_status: one of the MatchStatus values.\n  back_deps: set of Targets that have a dependency on this Target.\n  visited: used during iteration to indicate whether we've visited this target.\n    This is used for two iterations, once in building the set of Targets and\n    again in _GetBuildTargets().\n  name: fully qualified name of the target.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "class Config(object):\n  \"\"\"Details what we're looking for\n  files: set of files to search for\n  targets: see file description for details.\"\"\"\n  def __init__(self):\n    self.files = []\n    self.targets = set()\n    self.additional_compile_target_names = set()\n    self.test_target_names = set()\n  def Init(self, params):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import Config\n```\n\n```python\n\n\n```\n\n```python\nclass Config(object):\n  \"\"\"Details what we're looking for\n  files: set of files to search for\n  targets: see file description for details.\"\"\"\n  def __init__(self):\n    self.files = []\n    self.targets = set()\n    self.additional_compile_target_names = set()\n    self.test_target_names = set()\n  def Init(self, params):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TargetCalculator",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "class TargetCalculator(object):\n  \"\"\"Calculates the matching test_targets and matching compile_targets.\"\"\"\n  def __init__(self, files, additional_compile_target_names, test_target_names,\n               data, target_list, target_dicts, toplevel_dir, build_files):\n    self._additional_compile_target_names = set(additional_compile_target_names)\n    self._test_target_names = set(test_target_names)\n    self._name_to_target, self._changed_targets, self._root_targets = (\n      _GenerateTargets(data, target_list, target_dicts, toplevel_dir,\n                       frozenset(files), build_files))\n    self._unqualified_mapping, self.invalid_targets = (",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import TargetCalculator\n```\n\n```python\n\n\n```\n\n```python\nclass TargetCalculator(object):\n  \"\"\"Calculates the matching test_targets and matching compile_targets.\"\"\"\n  def __init__(self, files, additional_compile_target_names, test_target_names,\n               data, target_list, target_dicts, toplevel_dir, build_files):\n    self._additional_compile_target_names = set(additional_compile_target_names)\n    self._test_target_names = set(test_target_names)\n    self._name_to_target, self._changed_targets, self._root_targets = (\n      _GenerateTargets(data, target_list, target_dicts, toplevel_dir,\n                       frozenset(files), build_files))\n    self._unqualified_mapping, self.invalid_targets = (\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n  elif flavor == 'win':\n    default_variables.setdefault('OS', 'win')\n    # Copy additional generator configuration data from VS, which is shared\n    # by the Windows Ninja generator.\n    import gyp.generator.msvs as msvs_generator",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import CalculateVariables\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n  elif flavor == 'win':\n    default_variables.setdefault('OS', 'win')\n    # Copy additional generator configuration data from VS, which is shared\n    # by the Windows Ninja generator.\n    import gyp.generator.msvs as msvs_generator\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n  \"\"\"Called by gyp as the final stage. Outputs results.\"\"\"\n  config = Config()\n  try:\n    config.Init(params)\n    if not config.files:\n      raise Exception('Must specify files to analyze via config_path generator '\n                      'flag')\n    toplevel_dir = _ToGypPath(os.path.abspath(params['options'].toplevel_dir))\n    if debug:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import GenerateOutput\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutput(target_list, target_dicts, data, params):\n  \"\"\"Called by gyp as the final stage. Outputs results.\"\"\"\n  config = Config()\n  try:\n    config.Init(params)\n    if not config.files:\n      raise Exception('Must specify files to analyze via config_path generator '\n                      'flag')\n    toplevel_dir = _ToGypPath(os.path.abspath(params['options'].toplevel_dir))\n    if debug:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "files = [\"b.cc\", \"d.cc\"] (B depends upon b.cc and D depends upon d.cc), then\nthe following is output:\n|compile_targets| = [\"B\"] B must built as it depends upon the changed file b.cc\nand the supplied target A depends upon it. A is not output as a build_target\nas it is of type none with no rules and actions.\n|test_targets| = [\"B\"] B directly depends upon the change file b.cc.\nEven though the file d.cc, which D depends upon, has changed D is not output\nas it was not supplied by way of |additional_compile_targets| or |test_targets|.\nIf the generator flag analyzer_output_path is specified, output is written\nthere. Otherwise output is written to stdout.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import files\n```\n\n```python\n\n\n```\n\n```python\nfiles = [\"b.cc\", \"d.cc\"] (B depends upon b.cc and D depends upon d.cc), then\nthe following is output:\n|compile_targets| = [\"B\"] B must built as it depends upon the changed file b.cc\nand the supplied target A depends upon it. A is not output as a build_target\nas it is of type none with no rules and actions.\n|test_targets| = [\"B\"] B directly depends upon the change file b.cc.\nEven though the file d.cc, which D depends upon, has changed D is not output\nas it was not supplied by way of |additional_compile_targets| or |test_targets|.\nIf the generator flag analyzer_output_path is specified, output is written\nthere. Otherwise output is written to stdout.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "|compile_targets|",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "|compile_targets| = [\"B\"] B must built as it depends upon the changed file b.cc\nand the supplied target A depends upon it. A is not output as a build_target\nas it is of type none with no rules and actions.\n|test_targets| = [\"B\"] B directly depends upon the change file b.cc.\nEven though the file d.cc, which D depends upon, has changed D is not output\nas it was not supplied by way of |additional_compile_targets| or |test_targets|.\nIf the generator flag analyzer_output_path is specified, output is written\nthere. Otherwise output is written to stdout.\nIn Gyp the \"all\" target is shorthand for the root targets in the files passed\nto gyp. For example, if file \"a.gyp\" contains targets \"a1\" and",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import |compile_targets|\n```\n\n```python\n\n\n```\n\n```python\n|compile_targets| = [\"B\"] B must built as it depends upon the changed file b.cc\nand the supplied target A depends upon it. A is not output as a build_target\nas it is of type none with no rules and actions.\n|test_targets| = [\"B\"] B directly depends upon the change file b.cc.\nEven though the file d.cc, which D depends upon, has changed D is not output\nas it was not supplied by way of |additional_compile_targets| or |test_targets|.\nIf the generator flag analyzer_output_path is specified, output is written\nthere. Otherwise output is written to stdout.\nIn Gyp the \"all\" target is shorthand for the root targets in the files passed\nto gyp. For example, if file \"a.gyp\" contains targets \"a1\" and\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "|test_targets|",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "|test_targets| = [\"B\"] B directly depends upon the change file b.cc.\nEven though the file d.cc, which D depends upon, has changed D is not output\nas it was not supplied by way of |additional_compile_targets| or |test_targets|.\nIf the generator flag analyzer_output_path is specified, output is written\nthere. Otherwise output is written to stdout.\nIn Gyp the \"all\" target is shorthand for the root targets in the files passed\nto gyp. For example, if file \"a.gyp\" contains targets \"a1\" and\n\"a2\", and file \"b.gyp\" contains targets \"b1\" and \"b2\" and \"a2\" has a dependency\non \"b2\" and gyp is supplied \"a.gyp\" then \"all\" consists of \"a1\" and \"a2\".\nNotice that \"b1\" and \"b2\" are not in the \"all\" target as \"b.gyp\" was not",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import |test_targets|\n```\n\n```python\n\n\n```\n\n```python\n|test_targets| = [\"B\"] B directly depends upon the change file b.cc.\nEven though the file d.cc, which D depends upon, has changed D is not output\nas it was not supplied by way of |additional_compile_targets| or |test_targets|.\nIf the generator flag analyzer_output_path is specified, output is written\nthere. Otherwise output is written to stdout.\nIn Gyp the \"all\" target is shorthand for the root targets in the files passed\nto gyp. For example, if file \"a.gyp\" contains targets \"a1\" and\n\"a2\", and file \"b.gyp\" contains targets \"b1\" and \"b2\" and \"a2\" has a dependency\non \"b2\" and gyp is supplied \"a.gyp\" then \"all\" consists of \"a1\" and \"a2\".\nNotice that \"b1\" and \"b2\" are not in the \"all\" target as \"b.gyp\" was not\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "debug",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "debug = False\nfound_dependency_string = 'Found dependency'\nno_dependency_string = 'No dependencies'\n# Status when it should be assumed that everything has changed.\nall_changed_string = 'Found dependency (all)'\n# MatchStatus is used indicate if and how a target depends upon the supplied\n# sources.\n# The target's sources contain one of the supplied paths.\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import debug\n```\n\n```python\n\n\n```\n\n```python\ndebug = False\nfound_dependency_string = 'Found dependency'\nno_dependency_string = 'No dependencies'\n# Status when it should be assumed that everything has changed.\nall_changed_string = 'Found dependency (all)'\n# MatchStatus is used indicate if and how a target depends upon the supplied\n# sources.\n# The target's sources contain one of the supplied paths.\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "found_dependency_string",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "found_dependency_string = 'Found dependency'\nno_dependency_string = 'No dependencies'\n# Status when it should be assumed that everything has changed.\nall_changed_string = 'Found dependency (all)'\n# MatchStatus is used indicate if and how a target depends upon the supplied\n# sources.\n# The target's sources contain one of the supplied paths.\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n# supplied paths.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import found_dependency_string\n```\n\n```python\n\n\n```\n\n```python\nfound_dependency_string = 'Found dependency'\nno_dependency_string = 'No dependencies'\n# Status when it should be assumed that everything has changed.\nall_changed_string = 'Found dependency (all)'\n# MatchStatus is used indicate if and how a target depends upon the supplied\n# sources.\n# The target's sources contain one of the supplied paths.\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n# supplied paths.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "no_dependency_string",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "no_dependency_string = 'No dependencies'\n# Status when it should be assumed that everything has changed.\nall_changed_string = 'Found dependency (all)'\n# MatchStatus is used indicate if and how a target depends upon the supplied\n# sources.\n# The target's sources contain one of the supplied paths.\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n# supplied paths.\nMATCH_STATUS_MATCHES_BY_DEPENDENCY = 2",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import no_dependency_string\n```\n\n```python\n\n\n```\n\n```python\nno_dependency_string = 'No dependencies'\n# Status when it should be assumed that everything has changed.\nall_changed_string = 'Found dependency (all)'\n# MatchStatus is used indicate if and how a target depends upon the supplied\n# sources.\n# The target's sources contain one of the supplied paths.\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n# supplied paths.\nMATCH_STATUS_MATCHES_BY_DEPENDENCY = 2\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "all_changed_string",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "all_changed_string = 'Found dependency (all)'\n# MatchStatus is used indicate if and how a target depends upon the supplied\n# sources.\n# The target's sources contain one of the supplied paths.\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n# supplied paths.\nMATCH_STATUS_MATCHES_BY_DEPENDENCY = 2\n# The target's sources weren't in the supplied paths and none of the target's\n# dependencies depend upon a target that matched.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import all_changed_string\n```\n\n```python\n\n\n```\n\n```python\nall_changed_string = 'Found dependency (all)'\n# MatchStatus is used indicate if and how a target depends upon the supplied\n# sources.\n# The target's sources contain one of the supplied paths.\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n# supplied paths.\nMATCH_STATUS_MATCHES_BY_DEPENDENCY = 2\n# The target's sources weren't in the supplied paths and none of the target's\n# dependencies depend upon a target that matched.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MATCH_STATUS_MATCHES",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "MATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n# supplied paths.\nMATCH_STATUS_MATCHES_BY_DEPENDENCY = 2\n# The target's sources weren't in the supplied paths and none of the target's\n# dependencies depend upon a target that matched.\nMATCH_STATUS_DOESNT_MATCH = 3\n# The target doesn't contain the source, but the dependent targets have not yet\n# been visited to determine a more specific status yet.\nMATCH_STATUS_TBD = 4",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import MATCH_STATUS_MATCHES\n```\n\n```python\n\n\n```\n\n```python\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n# supplied paths.\nMATCH_STATUS_MATCHES_BY_DEPENDENCY = 2\n# The target's sources weren't in the supplied paths and none of the target's\n# dependencies depend upon a target that matched.\nMATCH_STATUS_DOESNT_MATCH = 3\n# The target doesn't contain the source, but the dependent targets have not yet\n# been visited to determine a more specific status yet.\nMATCH_STATUS_TBD = 4\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MATCH_STATUS_MATCHES_BY_DEPENDENCY",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "MATCH_STATUS_MATCHES_BY_DEPENDENCY = 2\n# The target's sources weren't in the supplied paths and none of the target's\n# dependencies depend upon a target that matched.\nMATCH_STATUS_DOESNT_MATCH = 3\n# The target doesn't contain the source, but the dependent targets have not yet\n# been visited to determine a more specific status yet.\nMATCH_STATUS_TBD = 4\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import MATCH_STATUS_MATCHES_BY_DEPENDENCY\n```\n\n```python\n\n\n```\n\n```python\nMATCH_STATUS_MATCHES_BY_DEPENDENCY = 2\n# The target's sources weren't in the supplied paths and none of the target's\n# dependencies depend upon a target that matched.\nMATCH_STATUS_DOESNT_MATCH = 3\n# The target doesn't contain the source, but the dependent targets have not yet\n# been visited to determine a more specific status yet.\nMATCH_STATUS_TBD = 4\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MATCH_STATUS_DOESNT_MATCH",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "MATCH_STATUS_DOESNT_MATCH = 3\n# The target doesn't contain the source, but the dependent targets have not yet\n# been visited to determine a more specific status yet.\nMATCH_STATUS_TBD = 4\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import MATCH_STATUS_DOESNT_MATCH\n```\n\n```python\n\n\n```\n\n```python\nMATCH_STATUS_DOESNT_MATCH = 3\n# The target doesn't contain the source, but the dependent targets have not yet\n# been visited to determine a more specific status yet.\nMATCH_STATUS_TBD = 4\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MATCH_STATUS_TBD",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "MATCH_STATUS_TBD = 4\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  generator_default_variables[dirname] = '!!!'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import MATCH_STATUS_TBD\n```\n\n```python\n\n\n```\n\n```python\nMATCH_STATUS_TBD = 4\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  generator_default_variables[dirname] = '!!!'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "generator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  generator_default_variables[dirname] = '!!!'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n               'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import generator_supports_multiple_toolsets\n```\n\n```python\n\n\n```\n\n```python\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  generator_default_variables[dirname] = '!!!'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n               'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_wants_static_library_dependencies_adjusted",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "generator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  generator_default_variables[dirname] = '!!!'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n               'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',\n               'STATIC_LIB_PREFIX', 'STATIC_LIB_SUFFIX',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import generator_wants_static_library_dependencies_adjusted\n```\n\n```python\n\n\n```\n\n```python\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  generator_default_variables[dirname] = '!!!'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n               'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',\n               'STATIC_LIB_PREFIX', 'STATIC_LIB_SUFFIX',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "generator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  generator_default_variables[dirname] = '!!!'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n               'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',\n               'STATIC_LIB_PREFIX', 'STATIC_LIB_SUFFIX',\n               'SHARED_LIB_PREFIX', 'SHARED_LIB_SUFFIX',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer import generator_default_variables\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  generator_default_variables[dirname] = '!!!'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n               'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',\n               'STATIC_LIB_PREFIX', 'STATIC_LIB_SUFFIX',\n               'SHARED_LIB_PREFIX', 'SHARED_LIB_SUFFIX',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AndroidMkWriter",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "class AndroidMkWriter(object):\n  \"\"\"AndroidMkWriter packages up the writing of one target-specific Android.mk.\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"\n  def __init__(self, android_top_dir):\n    self.android_top_dir = android_top_dir\n  def Write(self, qualified_target, relative_target, base_path, output_filename,\n            spec, configs, part_of_all, write_alias_target, sdk_version):\n    \"\"\"The main entry point: writes a .mk file for a single target.\n    Arguments:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import AndroidMkWriter\n```\n\n```python\n\n\n```\n\n```python\nclass AndroidMkWriter(object):\n  \"\"\"AndroidMkWriter packages up the writing of one target-specific Android.mk.\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"\n  def __init__(self, android_top_dir):\n    self.android_top_dir = android_top_dir\n  def Write(self, qualified_target, relative_target, base_path, output_filename,\n            spec, configs, part_of_all, write_alias_target, sdk_version):\n    \"\"\"The main entry point: writes a .mk file for a single target.\n    Arguments:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IsCPPExtension",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "def IsCPPExtension(ext):\n  return make.COMPILABLE_EXTENSIONS.get(ext) == 'cxx'\ndef Sourceify(path):\n  \"\"\"Convert a path to its source directory form. The Android backend does not\n     support options.generator_output, so this function is a noop.\"\"\"\n  return path\n# Map from qualified target to path to output.\n# For Android, the target of these maps is a tuple ('static', 'modulename'),\n# ('dynamic', 'modulename'), or ('path', 'some/path') instead of a string,\n# since we link by module.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import IsCPPExtension\n```\n\n```python\n\n\n```\n\n```python\ndef IsCPPExtension(ext):\n  return make.COMPILABLE_EXTENSIONS.get(ext) == 'cxx'\ndef Sourceify(path):\n  \"\"\"Convert a path to its source directory form. The Android backend does not\n     support options.generator_output, so this function is a noop.\"\"\"\n  return path\n# Map from qualified target to path to output.\n# For Android, the target of these maps is a tuple ('static', 'modulename'),\n# ('dynamic', 'modulename'), or ('path', 'some/path') instead of a string,\n# since we link by module.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Sourceify",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "def Sourceify(path):\n  \"\"\"Convert a path to its source directory form. The Android backend does not\n     support options.generator_output, so this function is a noop.\"\"\"\n  return path\n# Map from qualified target to path to output.\n# For Android, the target of these maps is a tuple ('static', 'modulename'),\n# ('dynamic', 'modulename'), or ('path', 'some/path') instead of a string,\n# since we link by module.\ntarget_outputs = {}\n# Map from qualified target to any linkable output.  A subset",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import Sourceify\n```\n\n```python\n\n\n```\n\n```python\ndef Sourceify(path):\n  \"\"\"Convert a path to its source directory form. The Android backend does not\n     support options.generator_output, so this function is a noop.\"\"\"\n  return path\n# Map from qualified target to path to output.\n# For Android, the target of these maps is a tuple ('static', 'modulename'),\n# ('dynamic', 'modulename'), or ('path', 'some/path') instead of a string,\n# since we link by module.\ntarget_outputs = {}\n# Map from qualified target to any linkable output.  A subset\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n  # The android backend only supports the default configuration.\n  options = params['options']\n  makefile = os.path.abspath(os.path.join(options.toplevel_dir,\n                                          'GypAndroid.mk'))\n  env = dict(os.environ)\n  env['ONE_SHOT_MAKEFILE'] = makefile\n  arguments = ['make', '-C', os.environ['ANDROID_BUILD_TOP'], 'gyp_all_modules']\n  print 'Building: %s' % arguments\n  subprocess.check_call(arguments, env=env)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import PerformBuild\n```\n\n```python\n\n\n```\n\n```python\ndef PerformBuild(data, configurations, params):\n  # The android backend only supports the default configuration.\n  options = params['options']\n  makefile = os.path.abspath(os.path.join(options.toplevel_dir,\n                                          'GypAndroid.mk'))\n  env = dict(os.environ)\n  env['ONE_SHOT_MAKEFILE'] = makefile\n  arguments = ['make', '-C', os.environ['ANDROID_BUILD_TOP'], 'gyp_all_modules']\n  print 'Building: %s' % arguments\n  subprocess.check_call(arguments, env=env)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n  options = params['options']\n  generator_flags = params.get('generator_flags', {})\n  builddir_name = generator_flags.get('output_dir', 'out')\n  limit_to_target_all = generator_flags.get('limit_to_target_all', False)\n  write_alias_targets = generator_flags.get('write_alias_targets', True)\n  sdk_version = generator_flags.get('aosp_sdk_version', 0)\n  android_top_dir = os.environ.get('ANDROID_BUILD_TOP')\n  assert android_top_dir, '$ANDROID_BUILD_TOP not set; you need to run lunch.'\n  def CalculateMakefilePath(build_file, base_name):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import GenerateOutput\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutput(target_list, target_dicts, data, params):\n  options = params['options']\n  generator_flags = params.get('generator_flags', {})\n  builddir_name = generator_flags.get('output_dir', 'out')\n  limit_to_target_all = generator_flags.get('limit_to_target_all', False)\n  write_alias_targets = generator_flags.get('write_alias_targets', True)\n  sdk_version = generator_flags.get('aosp_sdk_version', 0)\n  android_top_dir = os.environ.get('ANDROID_BUILD_TOP')\n  assert android_top_dir, '$ANDROID_BUILD_TOP not set; you need to run lunch.'\n  def CalculateMakefilePath(build_file, base_name):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "generator_default_variables = {\n  'OS': 'android',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'SHARED_LIB_SUFFIX': '.so',\n  'INTERMEDIATE_DIR': '$(gyp_intermediate_dir)',\n  'SHARED_INTERMEDIATE_DIR': '$(gyp_shared_intermediate_dir)',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import generator_default_variables\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables = {\n  'OS': 'android',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'SHARED_LIB_SUFFIX': '.so',\n  'INTERMEDIATE_DIR': '$(gyp_intermediate_dir)',\n  'SHARED_INTERMEDIATE_DIR': '$(gyp_shared_intermediate_dir)',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "generator_supports_multiple_toolsets = True\n# Generator-specific gyp specs.\ngenerator_additional_non_configuration_keys = [\n    # Boolean to declare that this target does not want its name mangled.\n    'android_unmangled_name',\n    # Map of android build system variables to set.\n    'aosp_build_settings',\n]\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import generator_supports_multiple_toolsets\n```\n\n```python\n\n\n```\n\n```python\ngenerator_supports_multiple_toolsets = True\n# Generator-specific gyp specs.\ngenerator_additional_non_configuration_keys = [\n    # Boolean to declare that this target does not want its name mangled.\n    'android_unmangled_name',\n    # Map of android build system variables to set.\n    'aosp_build_settings',\n]\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_additional_non_configuration_keys",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "generator_additional_non_configuration_keys = [\n    # Boolean to declare that this target does not want its name mangled.\n    'android_unmangled_name',\n    # Map of android build system variables to set.\n    'aosp_build_settings',\n]\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\nALL_MODULES_FOOTER = \"\"\"\\\n# \"gyp_all_modules\" is a concatenation of the \"gyp_all_modules\" targets from",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import generator_additional_non_configuration_keys\n```\n\n```python\n\n\n```\n\n```python\ngenerator_additional_non_configuration_keys = [\n    # Boolean to declare that this target does not want its name mangled.\n    'android_unmangled_name',\n    # Map of android build system variables to set.\n    'aosp_build_settings',\n]\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\nALL_MODULES_FOOTER = \"\"\"\\\n# \"gyp_all_modules\" is a concatenation of the \"gyp_all_modules\" targets from\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_additional_path_sections",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "generator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\nALL_MODULES_FOOTER = \"\"\"\\\n# \"gyp_all_modules\" is a concatenation of the \"gyp_all_modules\" targets from\n# all the included sub-makefiles. This is just here to clarify.\ngyp_all_modules:\n\"\"\"\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import generator_additional_path_sections\n```\n\n```python\n\n\n```\n\n```python\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\nALL_MODULES_FOOTER = \"\"\"\\\n# \"gyp_all_modules\" is a concatenation of the \"gyp_all_modules\" targets from\n# all the included sub-makefiles. This is just here to clarify.\ngyp_all_modules:\n\"\"\"\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_extra_sources_for_rules",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "generator_extra_sources_for_rules = []\nALL_MODULES_FOOTER = \"\"\"\\\n# \"gyp_all_modules\" is a concatenation of the \"gyp_all_modules\" targets from\n# all the included sub-makefiles. This is just here to clarify.\ngyp_all_modules:\n\"\"\"\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n# Map gyp target types to Android module classes.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import generator_extra_sources_for_rules\n```\n\n```python\n\n\n```\n\n```python\ngenerator_extra_sources_for_rules = []\nALL_MODULES_FOOTER = \"\"\"\\\n# \"gyp_all_modules\" is a concatenation of the \"gyp_all_modules\" targets from\n# all the included sub-makefiles. This is just here to clarify.\ngyp_all_modules:\n\"\"\"\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n# Map gyp target types to Android module classes.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ALL_MODULES_FOOTER",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "ALL_MODULES_FOOTER = \"\"\"\\\n# \"gyp_all_modules\" is a concatenation of the \"gyp_all_modules\" targets from\n# all the included sub-makefiles. This is just here to clarify.\ngyp_all_modules:\n\"\"\"\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n# Map gyp target types to Android module classes.\nMODULE_CLASSES = {",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import ALL_MODULES_FOOTER\n```\n\n```python\n\n\n```\n\n```python\nALL_MODULES_FOOTER = \"\"\"\\\n# \"gyp_all_modules\" is a concatenation of the \"gyp_all_modules\" targets from\n# all the included sub-makefiles. This is just here to clarify.\ngyp_all_modules:\n\"\"\"\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n# Map gyp target types to Android module classes.\nMODULE_CLASSES = {\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "header = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n# Map gyp target types to Android module classes.\nMODULE_CLASSES = {\n    'static_library': 'STATIC_LIBRARIES',\n    'shared_library': 'SHARED_LIBRARIES',\n    'executable': 'EXECUTABLES',\n}\ndef IsCPPExtension(ext):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import header\n```\n\n```python\n\n\n```\n\n```python\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n# Map gyp target types to Android module classes.\nMODULE_CLASSES = {\n    'static_library': 'STATIC_LIBRARIES',\n    'shared_library': 'SHARED_LIBRARIES',\n    'executable': 'EXECUTABLES',\n}\ndef IsCPPExtension(ext):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MODULE_CLASSES",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "MODULE_CLASSES = {\n    'static_library': 'STATIC_LIBRARIES',\n    'shared_library': 'SHARED_LIBRARIES',\n    'executable': 'EXECUTABLES',\n}\ndef IsCPPExtension(ext):\n  return make.COMPILABLE_EXTENSIONS.get(ext) == 'cxx'\ndef Sourceify(path):\n  \"\"\"Convert a path to its source directory form. The Android backend does not\n     support options.generator_output, so this function is a noop.\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import MODULE_CLASSES\n```\n\n```python\n\n\n```\n\n```python\nMODULE_CLASSES = {\n    'static_library': 'STATIC_LIBRARIES',\n    'shared_library': 'SHARED_LIBRARIES',\n    'executable': 'EXECUTABLES',\n}\ndef IsCPPExtension(ext):\n  return make.COMPILABLE_EXTENSIONS.get(ext) == 'cxx'\ndef Sourceify(path):\n  \"\"\"Convert a path to its source directory form. The Android backend does not\n     support options.generator_output, so this function is a noop.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "target_outputs",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "target_outputs = {}\n# Map from qualified target to any linkable output.  A subset\n# of target_outputs.  E.g. when mybinary depends on liba, we want to\n# include liba in the linker line; when otherbinary depends on\n# mybinary, we just want to build mybinary first.\ntarget_link_deps = {}\nclass AndroidMkWriter(object):\n  \"\"\"AndroidMkWriter packages up the writing of one target-specific Android.mk.\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import target_outputs\n```\n\n```python\n\n\n```\n\n```python\ntarget_outputs = {}\n# Map from qualified target to any linkable output.  A subset\n# of target_outputs.  E.g. when mybinary depends on liba, we want to\n# include liba in the linker line; when otherbinary depends on\n# mybinary, we just want to build mybinary first.\ntarget_link_deps = {}\nclass AndroidMkWriter(object):\n  \"\"\"AndroidMkWriter packages up the writing of one target-specific Android.mk.\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "target_link_deps",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "target_link_deps = {}\nclass AndroidMkWriter(object):\n  \"\"\"AndroidMkWriter packages up the writing of one target-specific Android.mk.\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"\n  def __init__(self, android_top_dir):\n    self.android_top_dir = android_top_dir\n  def Write(self, qualified_target, relative_target, base_path, output_filename,\n            spec, configs, part_of_all, write_alias_target, sdk_version):\n    \"\"\"The main entry point: writes a .mk file for a single target.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.android import target_link_deps\n```\n\n```python\n\n\n```\n\n```python\ntarget_link_deps = {}\nclass AndroidMkWriter(object):\n  \"\"\"AndroidMkWriter packages up the writing of one target-specific Android.mk.\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"\n  def __init__(self, android_top_dir):\n    self.android_top_dir = android_top_dir\n  def Write(self, qualified_target, relative_target, base_path, output_filename,\n            spec, configs, part_of_all, write_alias_target, sdk_version):\n    \"\"\"The main entry point: writes a .mk file for a single target.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CMakeTargetType",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "class CMakeTargetType(object):\n  def __init__(self, command, modifier, property_modifier):\n    self.command = command\n    self.modifier = modifier\n    self.property_modifier = property_modifier\ncmake_target_type_from_gyp_target_type = {\n  'executable': CMakeTargetType('add_executable', None, 'RUNTIME'),\n  'static_library': CMakeTargetType('add_library', 'STATIC', 'ARCHIVE'),\n  'shared_library': CMakeTargetType('add_library', 'SHARED', 'LIBRARY'),\n  'loadable_module': CMakeTargetType('add_library', 'MODULE', 'LIBRARY'),",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import CMakeTargetType\n```\n\n```python\n\n\n```\n\n```python\nclass CMakeTargetType(object):\n  def __init__(self, command, modifier, property_modifier):\n    self.command = command\n    self.modifier = modifier\n    self.property_modifier = property_modifier\ncmake_target_type_from_gyp_target_type = {\n  'executable': CMakeTargetType('add_executable', None, 'RUNTIME'),\n  'static_library': CMakeTargetType('add_library', 'STATIC', 'ARCHIVE'),\n  'shared_library': CMakeTargetType('add_library', 'SHARED', 'LIBRARY'),\n  'loadable_module': CMakeTargetType('add_library', 'MODULE', 'LIBRARY'),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CMakeNamer",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "class CMakeNamer(object):\n  \"\"\"Converts Gyp target names into CMake target names.\n  CMake requires that target names be globally unique. One way to ensure\n  this is to fully qualify the names of the targets. Unfortunatly, this\n  ends up with all targets looking like \"chrome_chrome_gyp_chrome\" instead\n  of just \"chrome\". If this generator were only interested in building, it\n  would be possible to fully qualify all target names, then create\n  unqualified target names which depend on all qualified targets which\n  should have had that name. This is more or less what the 'make' generator\n  does with aliases. However, one goal of this generator is to create CMake",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import CMakeNamer\n```\n\n```python\n\n\n```\n\n```python\nclass CMakeNamer(object):\n  \"\"\"Converts Gyp target names into CMake target names.\n  CMake requires that target names be globally unique. One way to ensure\n  this is to fully qualify the names of the targets. Unfortunatly, this\n  ends up with all targets looking like \"chrome_chrome_gyp_chrome\" instead\n  of just \"chrome\". If this generator were only interested in building, it\n  would be possible to fully qualify all target names, then create\n  unqualified target names which depend on all qualified targets which\n  should have had that name. This is more or less what the 'make' generator\n  does with aliases. However, one goal of this generator is to create CMake\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RemovePrefix",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def RemovePrefix(a, prefix):\n  \"\"\"Returns 'a' without 'prefix' if it starts with 'prefix'.\"\"\"\n  return a[len(prefix):] if a.startswith(prefix) else a\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  default_variables.setdefault('OS', gyp.common.GetFlavor(params))\ndef Compilable(filename):\n  \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n  return any(filename.endswith(e) for e in COMPILABLE_EXTENSIONS)\ndef Linkable(filename):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import RemovePrefix\n```\n\n```python\n\n\n```\n\n```python\ndef RemovePrefix(a, prefix):\n  \"\"\"Returns 'a' without 'prefix' if it starts with 'prefix'.\"\"\"\n  return a[len(prefix):] if a.startswith(prefix) else a\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  default_variables.setdefault('OS', gyp.common.GetFlavor(params))\ndef Compilable(filename):\n  \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n  return any(filename.endswith(e) for e in COMPILABLE_EXTENSIONS)\ndef Linkable(filename):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  default_variables.setdefault('OS', gyp.common.GetFlavor(params))\ndef Compilable(filename):\n  \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n  return any(filename.endswith(e) for e in COMPILABLE_EXTENSIONS)\ndef Linkable(filename):\n  \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n  return filename.endswith('.o')\ndef NormjoinPathForceCMakeSource(base_path, rel_path):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import CalculateVariables\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  default_variables.setdefault('OS', gyp.common.GetFlavor(params))\ndef Compilable(filename):\n  \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n  return any(filename.endswith(e) for e in COMPILABLE_EXTENSIONS)\ndef Linkable(filename):\n  \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n  return filename.endswith('.o')\ndef NormjoinPathForceCMakeSource(base_path, rel_path):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Compilable",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def Compilable(filename):\n  \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n  return any(filename.endswith(e) for e in COMPILABLE_EXTENSIONS)\ndef Linkable(filename):\n  \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n  return filename.endswith('.o')\ndef NormjoinPathForceCMakeSource(base_path, rel_path):\n  \"\"\"Resolves rel_path against base_path and returns the result.\n  If rel_path is an absolute path it is returned unchanged.\n  Otherwise it is resolved against base_path and normalized.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import Compilable\n```\n\n```python\n\n\n```\n\n```python\ndef Compilable(filename):\n  \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n  return any(filename.endswith(e) for e in COMPILABLE_EXTENSIONS)\ndef Linkable(filename):\n  \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n  return filename.endswith('.o')\ndef NormjoinPathForceCMakeSource(base_path, rel_path):\n  \"\"\"Resolves rel_path against base_path and returns the result.\n  If rel_path is an absolute path it is returned unchanged.\n  Otherwise it is resolved against base_path and normalized.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Linkable",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def Linkable(filename):\n  \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n  return filename.endswith('.o')\ndef NormjoinPathForceCMakeSource(base_path, rel_path):\n  \"\"\"Resolves rel_path against base_path and returns the result.\n  If rel_path is an absolute path it is returned unchanged.\n  Otherwise it is resolved against base_path and normalized.\n  If the result is a relative path, it is forced to be relative to the\n  CMakeLists.txt.\n  \"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import Linkable\n```\n\n```python\n\n\n```\n\n```python\ndef Linkable(filename):\n  \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n  return filename.endswith('.o')\ndef NormjoinPathForceCMakeSource(base_path, rel_path):\n  \"\"\"Resolves rel_path against base_path and returns the result.\n  If rel_path is an absolute path it is returned unchanged.\n  Otherwise it is resolved against base_path and normalized.\n  If the result is a relative path, it is forced to be relative to the\n  CMakeLists.txt.\n  \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NormjoinPathForceCMakeSource",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def NormjoinPathForceCMakeSource(base_path, rel_path):\n  \"\"\"Resolves rel_path against base_path and returns the result.\n  If rel_path is an absolute path it is returned unchanged.\n  Otherwise it is resolved against base_path and normalized.\n  If the result is a relative path, it is forced to be relative to the\n  CMakeLists.txt.\n  \"\"\"\n  if os.path.isabs(rel_path):\n    return rel_path\n  if any([rel_path.startswith(var) for var in FULL_PATH_VARS]):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import NormjoinPathForceCMakeSource\n```\n\n```python\n\n\n```\n\n```python\ndef NormjoinPathForceCMakeSource(base_path, rel_path):\n  \"\"\"Resolves rel_path against base_path and returns the result.\n  If rel_path is an absolute path it is returned unchanged.\n  Otherwise it is resolved against base_path and normalized.\n  If the result is a relative path, it is forced to be relative to the\n  CMakeLists.txt.\n  \"\"\"\n  if os.path.isabs(rel_path):\n    return rel_path\n  if any([rel_path.startswith(var) for var in FULL_PATH_VARS]):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NormjoinPath",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def NormjoinPath(base_path, rel_path):\n  \"\"\"Resolves rel_path against base_path and returns the result.\n  TODO: what is this really used for?\n  If rel_path begins with '$' it is returned unchanged.\n  Otherwise it is resolved against base_path if relative, then normalized.\n  \"\"\"\n  if rel_path.startswith('$') and not rel_path.startswith('${configuration}'):\n    return rel_path\n  return os.path.normpath(os.path.join(base_path, rel_path))\ndef CMakeStringEscape(a):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import NormjoinPath\n```\n\n```python\n\n\n```\n\n```python\ndef NormjoinPath(base_path, rel_path):\n  \"\"\"Resolves rel_path against base_path and returns the result.\n  TODO: what is this really used for?\n  If rel_path begins with '$' it is returned unchanged.\n  Otherwise it is resolved against base_path if relative, then normalized.\n  \"\"\"\n  if rel_path.startswith('$') and not rel_path.startswith('${configuration}'):\n    return rel_path\n  return os.path.normpath(os.path.join(base_path, rel_path))\ndef CMakeStringEscape(a):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CMakeStringEscape",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def CMakeStringEscape(a):\n  \"\"\"Escapes the string 'a' for use inside a CMake string.\n  This means escaping\n  '\\' otherwise it may be seen as modifying the next character\n  '\"' otherwise it will end the string\n  ';' otherwise the string becomes a list\n  The following do not need to be escaped\n  '#' when the lexer is in string state, this does not start a comment\n  The following are yet unknown\n  '$' generator variables (like ${obj}) must not be escaped,",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import CMakeStringEscape\n```\n\n```python\n\n\n```\n\n```python\ndef CMakeStringEscape(a):\n  \"\"\"Escapes the string 'a' for use inside a CMake string.\n  This means escaping\n  '\\' otherwise it may be seen as modifying the next character\n  '\"' otherwise it will end the string\n  ';' otherwise the string becomes a list\n  The following do not need to be escaped\n  '#' when the lexer is in string state, this does not start a comment\n  The following are yet unknown\n  '$' generator variables (like ${obj}) must not be escaped,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SetFileProperty",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def SetFileProperty(output, source_name, property_name, values, sep):\n  \"\"\"Given a set of source file, sets the given property on them.\"\"\"\n  output.write('set_source_files_properties(')\n  output.write(source_name)\n  output.write(' PROPERTIES ')\n  output.write(property_name)\n  output.write(' \"')\n  for value in values:\n    output.write(CMakeStringEscape(value))\n    output.write(sep)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import SetFileProperty\n```\n\n```python\n\n\n```\n\n```python\ndef SetFileProperty(output, source_name, property_name, values, sep):\n  \"\"\"Given a set of source file, sets the given property on them.\"\"\"\n  output.write('set_source_files_properties(')\n  output.write(source_name)\n  output.write(' PROPERTIES ')\n  output.write(property_name)\n  output.write(' \"')\n  for value in values:\n    output.write(CMakeStringEscape(value))\n    output.write(sep)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SetFilesProperty",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def SetFilesProperty(output, variable, property_name, values, sep):\n  \"\"\"Given a set of source files, sets the given property on them.\"\"\"\n  output.write('set_source_files_properties(')\n  WriteVariable(output, variable)\n  output.write(' PROPERTIES ')\n  output.write(property_name)\n  output.write(' \"')\n  for value in values:\n    output.write(CMakeStringEscape(value))\n    output.write(sep)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import SetFilesProperty\n```\n\n```python\n\n\n```\n\n```python\ndef SetFilesProperty(output, variable, property_name, values, sep):\n  \"\"\"Given a set of source files, sets the given property on them.\"\"\"\n  output.write('set_source_files_properties(')\n  WriteVariable(output, variable)\n  output.write(' PROPERTIES ')\n  output.write(property_name)\n  output.write(' \"')\n  for value in values:\n    output.write(CMakeStringEscape(value))\n    output.write(sep)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SetTargetProperty",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def SetTargetProperty(output, target_name, property_name, values, sep=''):\n  \"\"\"Given a target, sets the given property.\"\"\"\n  output.write('set_target_properties(')\n  output.write(target_name)\n  output.write(' PROPERTIES ')\n  output.write(property_name)\n  output.write(' \"')\n  for value in values:\n    output.write(CMakeStringEscape(value))\n    output.write(sep)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import SetTargetProperty\n```\n\n```python\n\n\n```\n\n```python\ndef SetTargetProperty(output, target_name, property_name, values, sep=''):\n  \"\"\"Given a target, sets the given property.\"\"\"\n  output.write('set_target_properties(')\n  output.write(target_name)\n  output.write(' PROPERTIES ')\n  output.write(property_name)\n  output.write(' \"')\n  for value in values:\n    output.write(CMakeStringEscape(value))\n    output.write(sep)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SetVariable",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def SetVariable(output, variable_name, value):\n  \"\"\"Sets a CMake variable.\"\"\"\n  output.write('set(')\n  output.write(variable_name)\n  output.write(' \"')\n  output.write(CMakeStringEscape(value))\n  output.write('\")\\n')\ndef SetVariableList(output, variable_name, values):\n  \"\"\"Sets a CMake variable to a list.\"\"\"\n  if not values:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import SetVariable\n```\n\n```python\n\n\n```\n\n```python\ndef SetVariable(output, variable_name, value):\n  \"\"\"Sets a CMake variable.\"\"\"\n  output.write('set(')\n  output.write(variable_name)\n  output.write(' \"')\n  output.write(CMakeStringEscape(value))\n  output.write('\")\\n')\ndef SetVariableList(output, variable_name, values):\n  \"\"\"Sets a CMake variable to a list.\"\"\"\n  if not values:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SetVariableList",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def SetVariableList(output, variable_name, values):\n  \"\"\"Sets a CMake variable to a list.\"\"\"\n  if not values:\n    return SetVariable(output, variable_name, \"\")\n  if len(values) == 1:\n    return SetVariable(output, variable_name, values[0])\n  output.write('list(APPEND ')\n  output.write(variable_name)\n  output.write('\\n  \"')\n  output.write('\"\\n  \"'.join([CMakeStringEscape(value) for value in values]))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import SetVariableList\n```\n\n```python\n\n\n```\n\n```python\ndef SetVariableList(output, variable_name, values):\n  \"\"\"Sets a CMake variable to a list.\"\"\"\n  if not values:\n    return SetVariable(output, variable_name, \"\")\n  if len(values) == 1:\n    return SetVariable(output, variable_name, values[0])\n  output.write('list(APPEND ')\n  output.write(variable_name)\n  output.write('\\n  \"')\n  output.write('\"\\n  \"'.join([CMakeStringEscape(value) for value in values]))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UnsetVariable",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def UnsetVariable(output, variable_name):\n  \"\"\"Unsets a CMake variable.\"\"\"\n  output.write('unset(')\n  output.write(variable_name)\n  output.write(')\\n')\ndef WriteVariable(output, variable_name, prepend=None):\n  if prepend:\n    output.write(prepend)\n  output.write('${')\n  output.write(variable_name)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import UnsetVariable\n```\n\n```python\n\n\n```\n\n```python\ndef UnsetVariable(output, variable_name):\n  \"\"\"Unsets a CMake variable.\"\"\"\n  output.write('unset(')\n  output.write(variable_name)\n  output.write(')\\n')\ndef WriteVariable(output, variable_name, prepend=None):\n  if prepend:\n    output.write(prepend)\n  output.write('${')\n  output.write(variable_name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WriteVariable",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def WriteVariable(output, variable_name, prepend=None):\n  if prepend:\n    output.write(prepend)\n  output.write('${')\n  output.write(variable_name)\n  output.write('}')\nclass CMakeTargetType(object):\n  def __init__(self, command, modifier, property_modifier):\n    self.command = command\n    self.modifier = modifier",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import WriteVariable\n```\n\n```python\n\n\n```\n\n```python\ndef WriteVariable(output, variable_name, prepend=None):\n  if prepend:\n    output.write(prepend)\n  output.write('${')\n  output.write(variable_name)\n  output.write('}')\nclass CMakeTargetType(object):\n  def __init__(self, command, modifier, property_modifier):\n    self.command = command\n    self.modifier = modifier\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StringToCMakeTargetName",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def StringToCMakeTargetName(a):\n  \"\"\"Converts the given string 'a' to a valid CMake target name.\n  All invalid characters are replaced by '_'.\n  Invalid for cmake: ' ', '/', '(', ')', '\"'\n  Invalid for make: ':'\n  Invalid for unknown reasons but cause failures: '.'\n  \"\"\"\n  return a.translate(string.maketrans(' /():.\"', '_______'))\ndef WriteActions(target_name, actions, extra_sources, extra_deps,\n                 path_to_gyp, output):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import StringToCMakeTargetName\n```\n\n```python\n\n\n```\n\n```python\ndef StringToCMakeTargetName(a):\n  \"\"\"Converts the given string 'a' to a valid CMake target name.\n  All invalid characters are replaced by '_'.\n  Invalid for cmake: ' ', '/', '(', ')', '\"'\n  Invalid for make: ':'\n  Invalid for unknown reasons but cause failures: '.'\n  \"\"\"\n  return a.translate(string.maketrans(' /():.\"', '_______'))\ndef WriteActions(target_name, actions, extra_sources, extra_deps,\n                 path_to_gyp, output):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WriteActions",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def WriteActions(target_name, actions, extra_sources, extra_deps,\n                 path_to_gyp, output):\n  \"\"\"Write CMake for the 'actions' in the target.\n  Args:\n    target_name: the name of the CMake target being generated.\n    actions: the Gyp 'actions' dict for this target.\n    extra_sources: [(<cmake_src>, <src>)] to append with generated source files.\n    extra_deps: [<cmake_taget>] to append with generated targets.\n    path_to_gyp: relative path from CMakeLists.txt being generated to\n        the Gyp file in which the target being generated is defined.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import WriteActions\n```\n\n```python\n\n\n```\n\n```python\ndef WriteActions(target_name, actions, extra_sources, extra_deps,\n                 path_to_gyp, output):\n  \"\"\"Write CMake for the 'actions' in the target.\n  Args:\n    target_name: the name of the CMake target being generated.\n    actions: the Gyp 'actions' dict for this target.\n    extra_sources: [(<cmake_src>, <src>)] to append with generated source files.\n    extra_deps: [<cmake_taget>] to append with generated targets.\n    path_to_gyp: relative path from CMakeLists.txt being generated to\n        the Gyp file in which the target being generated is defined.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NormjoinRulePathForceCMakeSource",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def NormjoinRulePathForceCMakeSource(base_path, rel_path, rule_source):\n  if rel_path.startswith((\"${RULE_INPUT_PATH}\",\"${RULE_INPUT_DIRNAME}\")):\n    if any([rule_source.startswith(var) for var in FULL_PATH_VARS]):\n      return rel_path\n  return NormjoinPathForceCMakeSource(base_path, rel_path)\ndef WriteRules(target_name, rules, extra_sources, extra_deps,\n               path_to_gyp, output):\n  \"\"\"Write CMake for the 'rules' in the target.\n  Args:\n    target_name: the name of the CMake target being generated.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import NormjoinRulePathForceCMakeSource\n```\n\n```python\n\n\n```\n\n```python\ndef NormjoinRulePathForceCMakeSource(base_path, rel_path, rule_source):\n  if rel_path.startswith((\"${RULE_INPUT_PATH}\",\"${RULE_INPUT_DIRNAME}\")):\n    if any([rule_source.startswith(var) for var in FULL_PATH_VARS]):\n      return rel_path\n  return NormjoinPathForceCMakeSource(base_path, rel_path)\ndef WriteRules(target_name, rules, extra_sources, extra_deps,\n               path_to_gyp, output):\n  \"\"\"Write CMake for the 'rules' in the target.\n  Args:\n    target_name: the name of the CMake target being generated.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WriteRules",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def WriteRules(target_name, rules, extra_sources, extra_deps,\n               path_to_gyp, output):\n  \"\"\"Write CMake for the 'rules' in the target.\n  Args:\n    target_name: the name of the CMake target being generated.\n    actions: the Gyp 'actions' dict for this target.\n    extra_sources: [(<cmake_src>, <src>)] to append with generated source files.\n    extra_deps: [<cmake_taget>] to append with generated targets.\n    path_to_gyp: relative path from CMakeLists.txt being generated to\n        the Gyp file in which the target being generated is defined.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import WriteRules\n```\n\n```python\n\n\n```\n\n```python\ndef WriteRules(target_name, rules, extra_sources, extra_deps,\n               path_to_gyp, output):\n  \"\"\"Write CMake for the 'rules' in the target.\n  Args:\n    target_name: the name of the CMake target being generated.\n    actions: the Gyp 'actions' dict for this target.\n    extra_sources: [(<cmake_src>, <src>)] to append with generated source files.\n    extra_deps: [<cmake_taget>] to append with generated targets.\n    path_to_gyp: relative path from CMakeLists.txt being generated to\n        the Gyp file in which the target being generated is defined.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WriteCopies",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def WriteCopies(target_name, copies, extra_deps, path_to_gyp, output):\n  \"\"\"Write CMake for the 'copies' in the target.\n  Args:\n    target_name: the name of the CMake target being generated.\n    actions: the Gyp 'actions' dict for this target.\n    extra_deps: [<cmake_taget>] to append with generated targets.\n    path_to_gyp: relative path from CMakeLists.txt being generated to\n        the Gyp file in which the target being generated is defined.\n  \"\"\"\n  copy_name = target_name + '__copies'",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import WriteCopies\n```\n\n```python\n\n\n```\n\n```python\ndef WriteCopies(target_name, copies, extra_deps, path_to_gyp, output):\n  \"\"\"Write CMake for the 'copies' in the target.\n  Args:\n    target_name: the name of the CMake target being generated.\n    actions: the Gyp 'actions' dict for this target.\n    extra_deps: [<cmake_taget>] to append with generated targets.\n    path_to_gyp: relative path from CMakeLists.txt being generated to\n        the Gyp file in which the target being generated is defined.\n  \"\"\"\n  copy_name = target_name + '__copies'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CreateCMakeTargetBaseName",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def CreateCMakeTargetBaseName(qualified_target):\n  \"\"\"This is the name we would like the target to have.\"\"\"\n  _, gyp_target_name, gyp_target_toolset = (\n      gyp.common.ParseQualifiedTarget(qualified_target))\n  cmake_target_base_name = gyp_target_name\n  if gyp_target_toolset and gyp_target_toolset != 'target':\n    cmake_target_base_name += '_' + gyp_target_toolset\n  return StringToCMakeTargetName(cmake_target_base_name)\ndef CreateCMakeTargetFullName(qualified_target):\n  \"\"\"An unambiguous name for the target.\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import CreateCMakeTargetBaseName\n```\n\n```python\n\n\n```\n\n```python\ndef CreateCMakeTargetBaseName(qualified_target):\n  \"\"\"This is the name we would like the target to have.\"\"\"\n  _, gyp_target_name, gyp_target_toolset = (\n      gyp.common.ParseQualifiedTarget(qualified_target))\n  cmake_target_base_name = gyp_target_name\n  if gyp_target_toolset and gyp_target_toolset != 'target':\n    cmake_target_base_name += '_' + gyp_target_toolset\n  return StringToCMakeTargetName(cmake_target_base_name)\ndef CreateCMakeTargetFullName(qualified_target):\n  \"\"\"An unambiguous name for the target.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CreateCMakeTargetFullName",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def CreateCMakeTargetFullName(qualified_target):\n  \"\"\"An unambiguous name for the target.\"\"\"\n  gyp_file, gyp_target_name, gyp_target_toolset = (\n      gyp.common.ParseQualifiedTarget(qualified_target))\n  cmake_target_full_name = gyp_file + ':' + gyp_target_name\n  if gyp_target_toolset and gyp_target_toolset != 'target':\n    cmake_target_full_name += '_' + gyp_target_toolset\n  return StringToCMakeTargetName(cmake_target_full_name)\nclass CMakeNamer(object):\n  \"\"\"Converts Gyp target names into CMake target names.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import CreateCMakeTargetFullName\n```\n\n```python\n\n\n```\n\n```python\ndef CreateCMakeTargetFullName(qualified_target):\n  \"\"\"An unambiguous name for the target.\"\"\"\n  gyp_file, gyp_target_name, gyp_target_toolset = (\n      gyp.common.ParseQualifiedTarget(qualified_target))\n  cmake_target_full_name = gyp_file + ':' + gyp_target_name\n  if gyp_target_toolset and gyp_target_toolset != 'target':\n    cmake_target_full_name += '_' + gyp_target_toolset\n  return StringToCMakeTargetName(cmake_target_full_name)\nclass CMakeNamer(object):\n  \"\"\"Converts Gyp target names into CMake target names.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WriteTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def WriteTarget(namer, qualified_target, target_dicts, build_dir, config_to_use,\n                options, generator_flags, all_qualified_targets, output):\n  # The make generator does this always.\n  # TODO: It would be nice to be able to tell CMake all dependencies.\n  circular_libs = generator_flags.get('circular', True)\n  if not generator_flags.get('standalone', False):\n    output.write('\\n#')\n    output.write(qualified_target)\n    output.write('\\n')\n  gyp_file, _, _ = gyp.common.ParseQualifiedTarget(qualified_target)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import WriteTarget\n```\n\n```python\n\n\n```\n\n```python\ndef WriteTarget(namer, qualified_target, target_dicts, build_dir, config_to_use,\n                options, generator_flags, all_qualified_targets, output):\n  # The make generator does this always.\n  # TODO: It would be nice to be able to tell CMake all dependencies.\n  circular_libs = generator_flags.get('circular', True)\n  if not generator_flags.get('standalone', False):\n    output.write('\\n#')\n    output.write(qualified_target)\n    output.write('\\n')\n  gyp_file, _, _ = gyp.common.ParseQualifiedTarget(qualified_target)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutputForConfig",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def GenerateOutputForConfig(target_list, target_dicts, data,\n                            params, config_to_use):\n  options = params['options']\n  generator_flags = params['generator_flags']\n  # generator_dir: relative path from pwd to where make puts build files.\n  # Makes migrating from make to cmake easier, cmake doesn't put anything here.\n  # Each Gyp configuration creates a different CMakeLists.txt file\n  # to avoid incompatibilities between Gyp and CMake configurations.\n  generator_dir = os.path.relpath(options.generator_output or '.')\n  # output_dir: relative path from generator_dir to the build directory.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import GenerateOutputForConfig\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutputForConfig(target_list, target_dicts, data,\n                            params, config_to_use):\n  options = params['options']\n  generator_flags = params['generator_flags']\n  # generator_dir: relative path from pwd to where make puts build files.\n  # Makes migrating from make to cmake easier, cmake doesn't put anything here.\n  # Each Gyp configuration creates a different CMakeLists.txt file\n  # to avoid incompatibilities between Gyp and CMake configurations.\n  generator_dir = os.path.relpath(options.generator_output or '.')\n  # output_dir: relative path from generator_dir to the build directory.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n  options = params['options']\n  generator_flags = params['generator_flags']\n  # generator_dir: relative path from pwd to where make puts build files.\n  # Makes migrating from make to cmake easier, cmake doesn't put anything here.\n  generator_dir = os.path.relpath(options.generator_output or '.')\n  # output_dir: relative path from generator_dir to the build directory.\n  output_dir = generator_flags.get('output_dir', 'out')\n  for config_name in configurations:\n    # build_dir: relative path from source root to our output files.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import PerformBuild\n```\n\n```python\n\n\n```\n\n```python\ndef PerformBuild(data, configurations, params):\n  options = params['options']\n  generator_flags = params['generator_flags']\n  # generator_dir: relative path from pwd to where make puts build files.\n  # Makes migrating from make to cmake easier, cmake doesn't put anything here.\n  generator_dir = os.path.relpath(options.generator_output or '.')\n  # output_dir: relative path from generator_dir to the build directory.\n  output_dir = generator_flags.get('output_dir', 'out')\n  for config_name in configurations:\n    # build_dir: relative path from source root to our output files.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CallGenerateOutputForConfig",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def CallGenerateOutputForConfig(arglist):\n  # Ignore the interrupt signal so that the parent process catches it and\n  # kills all multiprocessing children.\n  signal.signal(signal.SIGINT, signal.SIG_IGN)\n  target_list, target_dicts, data, params, config_name = arglist\n  GenerateOutputForConfig(target_list, target_dicts, data, params, config_name)\ndef GenerateOutput(target_list, target_dicts, data, params):\n  user_config = params.get('generator_flags', {}).get('config', None)\n  if user_config:\n    GenerateOutputForConfig(target_list, target_dicts, data,",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import CallGenerateOutputForConfig\n```\n\n```python\n\n\n```\n\n```python\ndef CallGenerateOutputForConfig(arglist):\n  # Ignore the interrupt signal so that the parent process catches it and\n  # kills all multiprocessing children.\n  signal.signal(signal.SIGINT, signal.SIG_IGN)\n  target_list, target_dicts, data, params, config_name = arglist\n  GenerateOutputForConfig(target_list, target_dicts, data, params, config_name)\ndef GenerateOutput(target_list, target_dicts, data, params):\n  user_config = params.get('generator_flags', {}).get('config', None)\n  if user_config:\n    GenerateOutputForConfig(target_list, target_dicts, data,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n  user_config = params.get('generator_flags', {}).get('config', None)\n  if user_config:\n    GenerateOutputForConfig(target_list, target_dicts, data,\n                            params, user_config)\n  else:\n    config_names = target_dicts[target_list[0]]['configurations'].keys()\n    if params['parallel']:\n      try:\n        pool = multiprocessing.Pool(len(config_names))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import GenerateOutput\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutput(target_list, target_dicts, data, params):\n  user_config = params.get('generator_flags', {}).get('config', None)\n  if user_config:\n    GenerateOutputForConfig(target_list, target_dicts, data,\n                            params, user_config)\n  else:\n    config_names = target_dicts[target_list[0]]['configurations'].keys()\n    if params['parallel']:\n      try:\n        pool = multiprocessing.Pool(len(config_names))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "generator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'SHARED_LIB_PREFIX': 'lib',\n  'SHARED_LIB_SUFFIX': '.so',\n  'SHARED_LIB_DIR': '${builddir}/lib.${TOOLSET}',\n  'LIB_DIR': '${obj}.${TOOLSET}',\n  'INTERMEDIATE_DIR': '${obj}.${TOOLSET}/${TARGET}/geni',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import generator_default_variables\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'SHARED_LIB_PREFIX': 'lib',\n  'SHARED_LIB_SUFFIX': '.so',\n  'SHARED_LIB_DIR': '${builddir}/lib.${TOOLSET}',\n  'LIB_DIR': '${obj}.${TOOLSET}',\n  'INTERMEDIATE_DIR': '${obj}.${TOOLSET}/${TARGET}/geni',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FULL_PATH_VARS",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "FULL_PATH_VARS = ('${CMAKE_CURRENT_LIST_DIR}', '${builddir}', '${obj}')\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_static_library_dependencies_adjusted = True\nCOMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 's', # cc\n  '.S': 's', # cc",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import FULL_PATH_VARS\n```\n\n```python\n\n\n```\n\n```python\nFULL_PATH_VARS = ('${CMAKE_CURRENT_LIST_DIR}', '${builddir}', '${obj}')\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_static_library_dependencies_adjusted = True\nCOMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 's', # cc\n  '.S': 's', # cc\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "generator_supports_multiple_toolsets = True\ngenerator_wants_static_library_dependencies_adjusted = True\nCOMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 's', # cc\n  '.S': 's', # cc\n}",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import generator_supports_multiple_toolsets\n```\n\n```python\n\n\n```\n\n```python\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_static_library_dependencies_adjusted = True\nCOMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 's', # cc\n  '.S': 's', # cc\n}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_wants_static_library_dependencies_adjusted",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "generator_wants_static_library_dependencies_adjusted = True\nCOMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 's', # cc\n  '.S': 's', # cc\n}\ndef RemovePrefix(a, prefix):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import generator_wants_static_library_dependencies_adjusted\n```\n\n```python\n\n\n```\n\n```python\ngenerator_wants_static_library_dependencies_adjusted = True\nCOMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 's', # cc\n  '.S': 's', # cc\n}\ndef RemovePrefix(a, prefix):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "COMPILABLE_EXTENSIONS",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "COMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 's', # cc\n  '.S': 's', # cc\n}\ndef RemovePrefix(a, prefix):\n  \"\"\"Returns 'a' without 'prefix' if it starts with 'prefix'.\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import COMPILABLE_EXTENSIONS\n```\n\n```python\n\n\n```\n\n```python\nCOMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 's', # cc\n  '.S': 's', # cc\n}\ndef RemovePrefix(a, prefix):\n  \"\"\"Returns 'a' without 'prefix' if it starts with 'prefix'.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmake_target_type_from_gyp_target_type",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "cmake_target_type_from_gyp_target_type = {\n  'executable': CMakeTargetType('add_executable', None, 'RUNTIME'),\n  'static_library': CMakeTargetType('add_library', 'STATIC', 'ARCHIVE'),\n  'shared_library': CMakeTargetType('add_library', 'SHARED', 'LIBRARY'),\n  'loadable_module': CMakeTargetType('add_library', 'MODULE', 'LIBRARY'),\n  'none': CMakeTargetType('add_custom_target', 'SOURCES', None),\n}\ndef StringToCMakeTargetName(a):\n  \"\"\"Converts the given string 'a' to a valid CMake target name.\n  All invalid characters are replaced by '_'.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.cmake import cmake_target_type_from_gyp_target_type\n```\n\n```python\n\n\n```\n\n```python\ncmake_target_type_from_gyp_target_type = {\n  'executable': CMakeTargetType('add_executable', None, 'RUNTIME'),\n  'static_library': CMakeTargetType('add_library', 'STATIC', 'ARCHIVE'),\n  'shared_library': CMakeTargetType('add_library', 'SHARED', 'LIBRARY'),\n  'loadable_module': CMakeTargetType('add_library', 'MODULE', 'LIBRARY'),\n  'none': CMakeTargetType('add_custom_target', 'SOURCES', None),\n}\ndef StringToCMakeTargetName(a):\n  \"\"\"Converts the given string 'a' to a valid CMake target name.\n  All invalid characters are replaced by '_'.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n  generator_flags = params.get('generator_flags', {})\n  for key, val in generator_flags.items():\n    default_variables.setdefault(key, val)\n  default_variables.setdefault('OS', gyp.common.GetFlavor(params))\n  flavor = gyp.common.GetFlavor(params)\n  if flavor =='win':\n    # Copy additional generator configuration data from VS, which is shared\n    # by the Windows Ninja generator.\n    import gyp.generator.msvs as msvs_generator",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json import CalculateVariables\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateVariables(default_variables, params):\n  generator_flags = params.get('generator_flags', {})\n  for key, val in generator_flags.items():\n    default_variables.setdefault(key, val)\n  default_variables.setdefault('OS', gyp.common.GetFlavor(params))\n  flavor = gyp.common.GetFlavor(params)\n  if flavor =='win':\n    # Copy additional generator configuration data from VS, which is shared\n    # by the Windows Ninja generator.\n    import gyp.generator.msvs as msvs_generator\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateGeneratorInputInfo",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "def CalculateGeneratorInputInfo(params):\n  \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n  generator_flags = params.get('generator_flags', {})\n  if generator_flags.get('adjust_static_libraries', False):\n    global generator_wants_static_library_dependencies_adjusted\n    generator_wants_static_library_dependencies_adjusted = True\n  toplevel = params['options'].toplevel_dir\n  generator_dir = os.path.relpath(params['options'].generator_output or '.')\n  # output_dir: relative path from generator_dir to the build directory.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json import CalculateGeneratorInputInfo\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateGeneratorInputInfo(params):\n  \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n  generator_flags = params.get('generator_flags', {})\n  if generator_flags.get('adjust_static_libraries', False):\n    global generator_wants_static_library_dependencies_adjusted\n    generator_wants_static_library_dependencies_adjusted = True\n  toplevel = params['options'].toplevel_dir\n  generator_dir = os.path.relpath(params['options'].generator_output or '.')\n  # output_dir: relative path from generator_dir to the build directory.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n  # Map of target -> list of targets it depends on.\n  edges = {}\n  # Queue of targets to visit.\n  targets_to_visit = target_list[:]\n  while len(targets_to_visit) > 0:\n    target = targets_to_visit.pop()\n    if target in edges:\n      continue\n    edges[target] = []",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json import GenerateOutput\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutput(target_list, target_dicts, data, params):\n  # Map of target -> list of targets it depends on.\n  edges = {}\n  # Queue of targets to visit.\n  targets_to_visit = target_list[:]\n  while len(targets_to_visit) > 0:\n    target = targets_to_visit.pop()\n    if target in edges:\n      continue\n    edges[target] = []\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "generator_supports_multiple_toolsets = True\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_filelist_paths = {\n}\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  # Some gyp steps fail if these are empty(!).\n  generator_default_variables[dirname] = 'dir'",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json import generator_supports_multiple_toolsets\n```\n\n```python\n\n\n```\n\n```python\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_filelist_paths = {\n}\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  # Some gyp steps fail if these are empty(!).\n  generator_default_variables[dirname] = 'dir'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_wants_static_library_dependencies_adjusted",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "generator_wants_static_library_dependencies_adjusted = False\ngenerator_filelist_paths = {\n}\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  # Some gyp steps fail if these are empty(!).\n  generator_default_variables[dirname] = 'dir'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json import generator_wants_static_library_dependencies_adjusted\n```\n\n```python\n\n\n```\n\n```python\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_filelist_paths = {\n}\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  # Some gyp steps fail if these are empty(!).\n  generator_default_variables[dirname] = 'dir'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "generator_filelist_paths = {\n}\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  # Some gyp steps fail if these are empty(!).\n  generator_default_variables[dirname] = 'dir'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json import generator_filelist_paths\n```\n\n```python\n\n\n```\n\n```python\ngenerator_filelist_paths = {\n}\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  # Some gyp steps fail if these are empty(!).\n  generator_default_variables[dirname] = 'dir'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "generator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  # Some gyp steps fail if these are empty(!).\n  generator_default_variables[dirname] = 'dir'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n               'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',\n               'STATIC_LIB_PREFIX', 'STATIC_LIB_SUFFIX',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json import generator_default_variables\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',\n                'LIB_DIR', 'SHARED_LIB_DIR']:\n  # Some gyp steps fail if these are empty(!).\n  generator_default_variables[dirname] = 'dir'\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n               'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',\n               'STATIC_LIB_PREFIX', 'STATIC_LIB_SUFFIX',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n  generator_flags = params.get('generator_flags', {})\n  for key, val in generator_flags.items():\n    default_variables.setdefault(key, val)\n  flavor = gyp.common.GetFlavor(params)\n  default_variables.setdefault('OS', flavor)\n  if flavor == 'win':\n    # Copy additional generator configuration data from VS, which is shared\n    # by the Eclipse generator.\n    import gyp.generator.msvs as msvs_generator",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import CalculateVariables\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateVariables(default_variables, params):\n  generator_flags = params.get('generator_flags', {})\n  for key, val in generator_flags.items():\n    default_variables.setdefault(key, val)\n  flavor = gyp.common.GetFlavor(params)\n  default_variables.setdefault('OS', flavor)\n  if flavor == 'win':\n    # Copy additional generator configuration data from VS, which is shared\n    # by the Eclipse generator.\n    import gyp.generator.msvs as msvs_generator\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateGeneratorInputInfo",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def CalculateGeneratorInputInfo(params):\n  \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n  generator_flags = params.get('generator_flags', {})\n  if generator_flags.get('adjust_static_libraries', False):\n    global generator_wants_static_library_dependencies_adjusted\n    generator_wants_static_library_dependencies_adjusted = True\ndef GetAllIncludeDirectories(target_list, target_dicts,\n                             shared_intermediate_dirs, config_name, params,\n                             compiler_path):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import CalculateGeneratorInputInfo\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateGeneratorInputInfo(params):\n  \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n  generator_flags = params.get('generator_flags', {})\n  if generator_flags.get('adjust_static_libraries', False):\n    global generator_wants_static_library_dependencies_adjusted\n    generator_wants_static_library_dependencies_adjusted = True\ndef GetAllIncludeDirectories(target_list, target_dicts,\n                             shared_intermediate_dirs, config_name, params,\n                             compiler_path):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetAllIncludeDirectories",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GetAllIncludeDirectories(target_list, target_dicts,\n                             shared_intermediate_dirs, config_name, params,\n                             compiler_path):\n  \"\"\"Calculate the set of include directories to be used.\n  Returns:\n    A list including all the include_dir's specified for every target followed\n    by any include directories that were added as cflag compiler options.\n  \"\"\"\n  gyp_includes_set = set()\n  compiler_includes_list = []",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import GetAllIncludeDirectories\n```\n\n```python\n\n\n```\n\n```python\ndef GetAllIncludeDirectories(target_list, target_dicts,\n                             shared_intermediate_dirs, config_name, params,\n                             compiler_path):\n  \"\"\"Calculate the set of include directories to be used.\n  Returns:\n    A list including all the include_dir's specified for every target followed\n    by any include directories that were added as cflag compiler options.\n  \"\"\"\n  gyp_includes_set = set()\n  compiler_includes_list = []\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetCompilerPath",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GetCompilerPath(target_list, data, options):\n  \"\"\"Determine a command that can be used to invoke the compiler.\n  Returns:\n    If this is a gyp project that has explicit make settings, try to determine\n    the compiler from that.  Otherwise, see if a compiler was specified via the\n    CC_target environment variable.\n  \"\"\"\n  # First, see if the compiler is configured in make's settings.\n  build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n  make_global_settings_dict = data[build_file].get('make_global_settings', {})",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import GetCompilerPath\n```\n\n```python\n\n\n```\n\n```python\ndef GetCompilerPath(target_list, data, options):\n  \"\"\"Determine a command that can be used to invoke the compiler.\n  Returns:\n    If this is a gyp project that has explicit make settings, try to determine\n    the compiler from that.  Otherwise, see if a compiler was specified via the\n    CC_target environment variable.\n  \"\"\"\n  # First, see if the compiler is configured in make's settings.\n  build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n  make_global_settings_dict = data[build_file].get('make_global_settings', {})\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetAllDefines",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GetAllDefines(target_list, target_dicts, data, config_name, params,\n                  compiler_path):\n  \"\"\"Calculate the defines for a project.\n  Returns:\n    A dict that includes explict defines declared in gyp files along with all of\n    the default defines that the compiler uses.\n  \"\"\"\n  # Get defines declared in the gyp files.\n  all_defines = {}\n  flavor = gyp.common.GetFlavor(params)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import GetAllDefines\n```\n\n```python\n\n\n```\n\n```python\ndef GetAllDefines(target_list, target_dicts, data, config_name, params,\n                  compiler_path):\n  \"\"\"Calculate the defines for a project.\n  Returns:\n    A dict that includes explict defines declared in gyp files along with all of\n    the default defines that the compiler uses.\n  \"\"\"\n  # Get defines declared in the gyp files.\n  all_defines = {}\n  flavor = gyp.common.GetFlavor(params)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WriteIncludePaths",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def WriteIncludePaths(out, eclipse_langs, include_dirs):\n  \"\"\"Write the includes section of a CDT settings export file.\"\"\"\n  out.write('  <section name=\"org.eclipse.cdt.internal.ui.wizards.' \\\n            'settingswizards.IncludePaths\">\\n')\n  out.write('    <language name=\"holder for library settings\"></language>\\n')\n  for lang in eclipse_langs:\n    out.write('    <language name=\"%s\">\\n' % lang)\n    for include_dir in include_dirs:\n      out.write('      <includepath workspace_path=\"false\">%s</includepath>\\n' %\n                include_dir)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import WriteIncludePaths\n```\n\n```python\n\n\n```\n\n```python\ndef WriteIncludePaths(out, eclipse_langs, include_dirs):\n  \"\"\"Write the includes section of a CDT settings export file.\"\"\"\n  out.write('  <section name=\"org.eclipse.cdt.internal.ui.wizards.' \\\n            'settingswizards.IncludePaths\">\\n')\n  out.write('    <language name=\"holder for library settings\"></language>\\n')\n  for lang in eclipse_langs:\n    out.write('    <language name=\"%s\">\\n' % lang)\n    for include_dir in include_dirs:\n      out.write('      <includepath workspace_path=\"false\">%s</includepath>\\n' %\n                include_dir)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WriteMacros",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def WriteMacros(out, eclipse_langs, defines):\n  \"\"\"Write the macros section of a CDT settings export file.\"\"\"\n  out.write('  <section name=\"org.eclipse.cdt.internal.ui.wizards.' \\\n            'settingswizards.Macros\">\\n')\n  out.write('    <language name=\"holder for library settings\"></language>\\n')\n  for lang in eclipse_langs:\n    out.write('    <language name=\"%s\">\\n' % lang)\n    for key in sorted(defines.iterkeys()):\n      out.write('      <macro><name>%s</name><value>%s</value></macro>\\n' %\n                (escape(key), escape(defines[key])))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import WriteMacros\n```\n\n```python\n\n\n```\n\n```python\ndef WriteMacros(out, eclipse_langs, defines):\n  \"\"\"Write the macros section of a CDT settings export file.\"\"\"\n  out.write('  <section name=\"org.eclipse.cdt.internal.ui.wizards.' \\\n            'settingswizards.Macros\">\\n')\n  out.write('    <language name=\"holder for library settings\"></language>\\n')\n  for lang in eclipse_langs:\n    out.write('    <language name=\"%s\">\\n' % lang)\n    for key in sorted(defines.iterkeys()):\n      out.write('      <macro><name>%s</name><value>%s</value></macro>\\n' %\n                (escape(key), escape(defines[key])))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutputForConfig",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GenerateOutputForConfig(target_list, target_dicts, data, params,\n                            config_name):\n  options = params['options']\n  generator_flags = params.get('generator_flags', {})\n  # build_dir: relative path from source root to our output files.\n  # e.g. \"out/Debug\"\n  build_dir = os.path.join(generator_flags.get('output_dir', 'out'),\n                           config_name)\n  toplevel_build = os.path.join(options.toplevel_dir, build_dir)\n  # Ninja uses out/Debug/gen while make uses out/Debug/obj/gen as the",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import GenerateOutputForConfig\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutputForConfig(target_list, target_dicts, data, params,\n                            config_name):\n  options = params['options']\n  generator_flags = params.get('generator_flags', {})\n  # build_dir: relative path from source root to our output files.\n  # e.g. \"out/Debug\"\n  build_dir = os.path.join(generator_flags.get('output_dir', 'out'),\n                           config_name)\n  toplevel_build = os.path.join(options.toplevel_dir, build_dir)\n  # Ninja uses out/Debug/gen while make uses out/Debug/obj/gen as the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateCdtSettingsFile",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GenerateCdtSettingsFile(target_list, target_dicts, data, params,\n                            config_name, out_name, options,\n                            shared_intermediate_dirs):\n  gyp.common.EnsureDirExists(out_name)\n  with open(out_name, 'w') as out:\n    out.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n')\n    out.write('<cdtprojectproperties>\\n')\n    eclipse_langs = ['C++ Source File', 'C Source File', 'Assembly Source File',\n                     'GNU C++', 'GNU C', 'Assembly']\n    compiler_path = GetCompilerPath(target_list, data, options)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import GenerateCdtSettingsFile\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateCdtSettingsFile(target_list, target_dicts, data, params,\n                            config_name, out_name, options,\n                            shared_intermediate_dirs):\n  gyp.common.EnsureDirExists(out_name)\n  with open(out_name, 'w') as out:\n    out.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n')\n    out.write('<cdtprojectproperties>\\n')\n    eclipse_langs = ['C++ Source File', 'C Source File', 'Assembly Source File',\n                     'GNU C++', 'GNU C', 'Assembly']\n    compiler_path = GetCompilerPath(target_list, data, options)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateClasspathFile",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GenerateClasspathFile(target_list, target_dicts, toplevel_dir,\n                          toplevel_build, out_name):\n  '''Generates a classpath file suitable for symbol navigation and code\n  completion of Java code (such as in Android projects) by finding all\n  .java and .jar files used as action inputs.'''\n  gyp.common.EnsureDirExists(out_name)\n  result = ET.Element('classpath')\n  def AddElements(kind, paths):\n    # First, we need to normalize the paths so they are all relative to the\n    # toplevel dir.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import GenerateClasspathFile\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateClasspathFile(target_list, target_dicts, toplevel_dir,\n                          toplevel_build, out_name):\n  '''Generates a classpath file suitable for symbol navigation and code\n  completion of Java code (such as in Android projects) by finding all\n  .java and .jar files used as action inputs.'''\n  gyp.common.EnsureDirExists(out_name)\n  result = ET.Element('classpath')\n  def AddElements(kind, paths):\n    # First, we need to normalize the paths so they are all relative to the\n    # toplevel dir.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetJavaJars",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GetJavaJars(target_list, target_dicts, toplevel_dir):\n  '''Generates a sequence of all .jars used as inputs.'''\n  for target_name in target_list:\n    target = target_dicts[target_name]\n    for action in target.get('actions', []):\n      for input_ in action['inputs']:\n        if os.path.splitext(input_)[1] == '.jar' and not input_.startswith('$'):\n          if os.path.isabs(input_):\n            yield input_\n          else:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import GetJavaJars\n```\n\n```python\n\n\n```\n\n```python\ndef GetJavaJars(target_list, target_dicts, toplevel_dir):\n  '''Generates a sequence of all .jars used as inputs.'''\n  for target_name in target_list:\n    target = target_dicts[target_name]\n    for action in target.get('actions', []):\n      for input_ in action['inputs']:\n        if os.path.splitext(input_)[1] == '.jar' and not input_.startswith('$'):\n          if os.path.isabs(input_):\n            yield input_\n          else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetJavaSourceDirs",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GetJavaSourceDirs(target_list, target_dicts, toplevel_dir):\n  '''Generates a sequence of all likely java package root directories.'''\n  for target_name in target_list:\n    target = target_dicts[target_name]\n    for action in target.get('actions', []):\n      for input_ in action['inputs']:\n        if (os.path.splitext(input_)[1] == '.java' and\n            not input_.startswith('$')):\n          dir_ = os.path.dirname(os.path.join(os.path.dirname(target_name),\n                                              input_))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import GetJavaSourceDirs\n```\n\n```python\n\n\n```\n\n```python\ndef GetJavaSourceDirs(target_list, target_dicts, toplevel_dir):\n  '''Generates a sequence of all likely java package root directories.'''\n  for target_name in target_list:\n    target = target_dicts[target_name]\n    for action in target.get('actions', []):\n      for input_ in action['inputs']:\n        if (os.path.splitext(input_)[1] == '.java' and\n            not input_.startswith('$')):\n          dir_ = os.path.dirname(os.path.join(os.path.dirname(target_name),\n                                              input_))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n  \"\"\"Generate an XML settings file that can be imported into a CDT project.\"\"\"\n  if params['options'].generator_output:\n    raise NotImplementedError(\"--generator_output not implemented for eclipse\")\n  user_config = params.get('generator_flags', {}).get('config', None)\n  if user_config:\n    GenerateOutputForConfig(target_list, target_dicts, data, params,\n                            user_config)\n  else:\n    config_names = target_dicts[target_list[0]]['configurations'].keys()",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import GenerateOutput\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutput(target_list, target_dicts, data, params):\n  \"\"\"Generate an XML settings file that can be imported into a CDT project.\"\"\"\n  if params['options'].generator_output:\n    raise NotImplementedError(\"--generator_output not implemented for eclipse\")\n  user_config = params.get('generator_flags', {}).get('config', None)\n  if user_config:\n    GenerateOutputForConfig(target_list, target_dicts, data, params,\n                            user_config)\n  else:\n    config_names = target_dicts[target_list[0]]['configurations'].keys()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_wants_static_library_dependencies_adjusted",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "generator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'PRODUCT_DIR', 'LIB_DIR', 'SHARED_LIB_DIR']:\n  # Some gyp steps fail if these are empty(!), so we convert them to variables\n  generator_default_variables[dirname] = '$' + dirname\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n               'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',\n               'STATIC_LIB_PREFIX', 'STATIC_LIB_SUFFIX',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import generator_wants_static_library_dependencies_adjusted\n```\n\n```python\n\n\n```\n\n```python\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'PRODUCT_DIR', 'LIB_DIR', 'SHARED_LIB_DIR']:\n  # Some gyp steps fail if these are empty(!), so we convert them to variables\n  generator_default_variables[dirname] = '$' + dirname\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n               'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',\n               'STATIC_LIB_PREFIX', 'STATIC_LIB_SUFFIX',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "generator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'PRODUCT_DIR', 'LIB_DIR', 'SHARED_LIB_DIR']:\n  # Some gyp steps fail if these are empty(!), so we convert them to variables\n  generator_default_variables[dirname] = '$' + dirname\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n               'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',\n               'STATIC_LIB_PREFIX', 'STATIC_LIB_SUFFIX',\n               'SHARED_LIB_PREFIX', 'SHARED_LIB_SUFFIX',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import generator_default_variables\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables = {\n}\nfor dirname in ['INTERMEDIATE_DIR', 'PRODUCT_DIR', 'LIB_DIR', 'SHARED_LIB_DIR']:\n  # Some gyp steps fail if these are empty(!), so we convert them to variables\n  generator_default_variables[dirname] = '$' + dirname\nfor unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',\n               'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',\n               'EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX',\n               'STATIC_LIB_PREFIX', 'STATIC_LIB_SUFFIX',\n               'SHARED_LIB_PREFIX', 'SHARED_LIB_SUFFIX',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables['SHARED_INTERMEDIATE_DIR']",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "generator_default_variables['SHARED_INTERMEDIATE_DIR'] = \\\n    '$SHARED_INTERMEDIATE_DIR'\ndef CalculateVariables(default_variables, params):\n  generator_flags = params.get('generator_flags', {})\n  for key, val in generator_flags.items():\n    default_variables.setdefault(key, val)\n  flavor = gyp.common.GetFlavor(params)\n  default_variables.setdefault('OS', flavor)\n  if flavor == 'win':\n    # Copy additional generator configuration data from VS, which is shared",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse import generator_default_variables['SHARED_INTERMEDIATE_DIR']\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables['SHARED_INTERMEDIATE_DIR'] = \\\n    '$SHARED_INTERMEDIATE_DIR'\ndef CalculateVariables(default_variables, params):\n  generator_flags = params.get('generator_flags', {})\n  for key, val in generator_flags.items():\n    default_variables.setdefault(key, val)\n  flavor = gyp.common.GetFlavor(params)\n  default_variables.setdefault('OS', flavor)\n  if flavor == 'win':\n    # Copy additional generator configuration data from VS, which is shared\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n  output_files = {}\n  for qualified_target in target_list:\n    [input_file, target] = \\\n        gyp.common.ParseQualifiedTarget(qualified_target)[0:2]\n    if input_file[-4:] != '.gyp':\n      continue\n    input_file_stem = input_file[:-4]\n    output_file = input_file_stem + params['options'].suffix + '.gypd'\n    if not output_file in output_files:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.gypd import GenerateOutput\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutput(target_list, target_dicts, data, params):\n  output_files = {}\n  for qualified_target in target_list:\n    [input_file, target] = \\\n        gyp.common.ParseQualifiedTarget(qualified_target)[0:2]\n    if input_file[-4:] != '.gyp':\n      continue\n    input_file_stem = input_file[:-4]\n    output_file = input_file_stem + params['options'].suffix + '.gypd'\n    if not output_file in output_files:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_generator_identity_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "peekOfCode": "_generator_identity_variables = [\n  'CONFIGURATION_NAME',\n  'EXECUTABLE_PREFIX',\n  'EXECUTABLE_SUFFIX',\n  'INTERMEDIATE_DIR',\n  'LIB_DIR',\n  'PRODUCT_DIR',\n  'RULE_INPUT_ROOT',\n  'RULE_INPUT_DIRNAME',\n  'RULE_INPUT_EXT',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.gypd import _generator_identity_variables\n```\n\n```python\n\n\n```\n\n```python\n_generator_identity_variables = [\n  'CONFIGURATION_NAME',\n  'EXECUTABLE_PREFIX',\n  'EXECUTABLE_SUFFIX',\n  'INTERMEDIATE_DIR',\n  'LIB_DIR',\n  'PRODUCT_DIR',\n  'RULE_INPUT_ROOT',\n  'RULE_INPUT_DIRNAME',\n  'RULE_INPUT_EXT',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "peekOfCode": "generator_default_variables = {\n}\n# gypd supports multiple toolsets\ngenerator_supports_multiple_toolsets = True\n# TODO(mark): This always uses <, which isn't right.  The input module should\n# notify the generator to tell it which phase it is operating in, and this\n# module should use < for the early phase and then switch to > for the late\n# phase.  Bonus points for carrying @ back into the output too.\nfor v in _generator_identity_variables:\n  generator_default_variables[v] = '<(%s)' % v",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.gypd import generator_default_variables\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables = {\n}\n# gypd supports multiple toolsets\ngenerator_supports_multiple_toolsets = True\n# TODO(mark): This always uses <, which isn't right.  The input module should\n# notify the generator to tell it which phase it is operating in, and this\n# module should use < for the early phase and then switch to > for the late\n# phase.  Bonus points for carrying @ back into the output too.\nfor v in _generator_identity_variables:\n  generator_default_variables[v] = '<(%s)' % v\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "peekOfCode": "generator_supports_multiple_toolsets = True\n# TODO(mark): This always uses <, which isn't right.  The input module should\n# notify the generator to tell it which phase it is operating in, and this\n# module should use < for the early phase and then switch to > for the late\n# phase.  Bonus points for carrying @ back into the output too.\nfor v in _generator_identity_variables:\n  generator_default_variables[v] = '<(%s)' % v\ndef GenerateOutput(target_list, target_dicts, data, params):\n  output_files = {}\n  for qualified_target in target_list:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.gypd import generator_supports_multiple_toolsets\n```\n\n```python\n\n\n```\n\n```python\ngenerator_supports_multiple_toolsets = True\n# TODO(mark): This always uses <, which isn't right.  The input module should\n# notify the generator to tell it which phase it is operating in, and this\n# module should use < for the early phase and then switch to > for the late\n# phase.  Bonus points for carrying @ back into the output too.\nfor v in _generator_identity_variables:\n  generator_default_variables[v] = '<(%s)' % v\ndef GenerateOutput(target_list, target_dicts, data, params):\n  output_files = {}\n  for qualified_target in target_list:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n  locals = {\n        'target_list':  target_list,\n        'target_dicts': target_dicts,\n        'data':         data,\n      }\n  # Use a banner that looks like the stock Python one and like what\n  # code.interact uses by default, but tack on something to indicate what\n  # locals are available, and identify gypsh.\n  banner='Python %s on %s\\nlocals.keys() = %s\\ngypsh' % \\",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh import GenerateOutput\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutput(target_list, target_dicts, data, params):\n  locals = {\n        'target_list':  target_list,\n        'target_dicts': target_dicts,\n        'data':         data,\n      }\n  # Use a banner that looks like the stock Python one and like what\n  # code.interact uses by default, but tack on something to indicate what\n  # locals are available, and identify gypsh.\n  banner='Python %s on %s\\nlocals.keys() = %s\\ngypsh' % \\\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_generator_identity_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "peekOfCode": "_generator_identity_variables = [\n  'EXECUTABLE_PREFIX',\n  'EXECUTABLE_SUFFIX',\n  'INTERMEDIATE_DIR',\n  'PRODUCT_DIR',\n  'RULE_INPUT_ROOT',\n  'RULE_INPUT_DIRNAME',\n  'RULE_INPUT_EXT',\n  'RULE_INPUT_NAME',\n  'RULE_INPUT_PATH',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh import _generator_identity_variables\n```\n\n```python\n\n\n```\n\n```python\n_generator_identity_variables = [\n  'EXECUTABLE_PREFIX',\n  'EXECUTABLE_SUFFIX',\n  'INTERMEDIATE_DIR',\n  'PRODUCT_DIR',\n  'RULE_INPUT_ROOT',\n  'RULE_INPUT_DIRNAME',\n  'RULE_INPUT_EXT',\n  'RULE_INPUT_NAME',\n  'RULE_INPUT_PATH',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "peekOfCode": "generator_default_variables = {\n}\nfor v in _generator_identity_variables:\n  generator_default_variables[v] = '<(%s)' % v\ndef GenerateOutput(target_list, target_dicts, data, params):\n  locals = {\n        'target_list':  target_list,\n        'target_dicts': target_dicts,\n        'data':         data,\n      }",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh import generator_default_variables\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables = {\n}\nfor v in _generator_identity_variables:\n  generator_default_variables[v] = '<(%s)' % v\ndef GenerateOutput(target_list, target_dicts, data, params):\n  locals = {\n        'target_list':  target_list,\n        'target_dicts': target_dicts,\n        'data':         data,\n      }\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MakefileWriter",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "class MakefileWriter(object):\n  \"\"\"MakefileWriter packages up the writing of one target-specific foobar.mk.\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"\n  def __init__(self, generator_flags, flavor):\n    self.generator_flags = generator_flags\n    self.flavor = flavor\n    self.suffix_rules_srcdir = {}\n    self.suffix_rules_objdir1 = {}\n    self.suffix_rules_objdir2 = {}",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import MakefileWriter\n```\n\n```python\n\n\n```\n\n```python\nclass MakefileWriter(object):\n  \"\"\"MakefileWriter packages up the writing of one target-specific foobar.mk.\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"\n  def __init__(self, generator_flags, flavor):\n    self.generator_flags = generator_flags\n    self.flavor = flavor\n    self.suffix_rules_srcdir = {}\n    self.suffix_rules_objdir1 = {}\n    self.suffix_rules_objdir2 = {}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n    default_variables.setdefault('SHARED_LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])\n    default_variables.setdefault('LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import CalculateVariables\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n    default_variables.setdefault('SHARED_LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])\n    default_variables.setdefault('LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateGeneratorInputInfo",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def CalculateGeneratorInputInfo(params):\n  \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n  generator_flags = params.get('generator_flags', {})\n  android_ndk_version = generator_flags.get('android_ndk_version', None)\n  # Android NDK requires a strict link order.\n  if android_ndk_version:\n    global generator_wants_sorted_dependencies\n    generator_wants_sorted_dependencies = True\n  output_dir = params['options'].generator_output or \\",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import CalculateGeneratorInputInfo\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateGeneratorInputInfo(params):\n  \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n  generator_flags = params.get('generator_flags', {})\n  android_ndk_version = generator_flags.get('android_ndk_version', None)\n  # Android NDK requires a strict link order.\n  if android_ndk_version:\n    global generator_wants_sorted_dependencies\n    generator_wants_sorted_dependencies = True\n  output_dir = params['options'].generator_output or \\\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WriteRootHeaderSuffixRules",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n  writer.write('\\n# Try building from generated source, too.\\n')\n  for ext in extensions:\n    writer.write(\n        '$(obj).$(TOOLSET)/%%.o: $(obj).$(TOOLSET)/%%%s FORCE_DO_CMD\\n' % ext)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import WriteRootHeaderSuffixRules\n```\n\n```python\n\n\n```\n\n```python\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n  writer.write('\\n# Try building from generated source, too.\\n')\n  for ext in extensions:\n    writer.write(\n        '$(obj).$(TOOLSET)/%%.o: $(obj).$(TOOLSET)/%%%s FORCE_DO_CMD\\n' % ext)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Compilable",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def Compilable(filename):\n  \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n  for res in (filename.endswith(e) for e in COMPILABLE_EXTENSIONS):\n    if res:\n      return True\n  return False\ndef Linkable(filename):\n  \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n  return filename.endswith('.o')\ndef Target(filename):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import Compilable\n```\n\n```python\n\n\n```\n\n```python\ndef Compilable(filename):\n  \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n  for res in (filename.endswith(e) for e in COMPILABLE_EXTENSIONS):\n    if res:\n      return True\n  return False\ndef Linkable(filename):\n  \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n  return filename.endswith('.o')\ndef Target(filename):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Linkable",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def Linkable(filename):\n  \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n  return filename.endswith('.o')\ndef Target(filename):\n  \"\"\"Translate a compilable filename to its .o target.\"\"\"\n  return os.path.splitext(filename)[0] + '.o'\ndef EscapeShellArgument(s):\n  \"\"\"Quotes an argument so that it will be interpreted literally by a POSIX\n     shell. Taken from\n     http://stackoverflow.com/questions/35817/whats-the-best-way-to-escape-ossystem-calls-in-python",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import Linkable\n```\n\n```python\n\n\n```\n\n```python\ndef Linkable(filename):\n  \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n  return filename.endswith('.o')\ndef Target(filename):\n  \"\"\"Translate a compilable filename to its .o target.\"\"\"\n  return os.path.splitext(filename)[0] + '.o'\ndef EscapeShellArgument(s):\n  \"\"\"Quotes an argument so that it will be interpreted literally by a POSIX\n     shell. Taken from\n     http://stackoverflow.com/questions/35817/whats-the-best-way-to-escape-ossystem-calls-in-python\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Target",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def Target(filename):\n  \"\"\"Translate a compilable filename to its .o target.\"\"\"\n  return os.path.splitext(filename)[0] + '.o'\ndef EscapeShellArgument(s):\n  \"\"\"Quotes an argument so that it will be interpreted literally by a POSIX\n     shell. Taken from\n     http://stackoverflow.com/questions/35817/whats-the-best-way-to-escape-ossystem-calls-in-python\n     \"\"\"\n  return \"'\" + s.replace(\"'\", \"'\\\\''\") + \"'\"\ndef EscapeMakeVariableExpansion(s):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import Target\n```\n\n```python\n\n\n```\n\n```python\ndef Target(filename):\n  \"\"\"Translate a compilable filename to its .o target.\"\"\"\n  return os.path.splitext(filename)[0] + '.o'\ndef EscapeShellArgument(s):\n  \"\"\"Quotes an argument so that it will be interpreted literally by a POSIX\n     shell. Taken from\n     http://stackoverflow.com/questions/35817/whats-the-best-way-to-escape-ossystem-calls-in-python\n     \"\"\"\n  return \"'\" + s.replace(\"'\", \"'\\\\''\") + \"'\"\ndef EscapeMakeVariableExpansion(s):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EscapeShellArgument",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def EscapeShellArgument(s):\n  \"\"\"Quotes an argument so that it will be interpreted literally by a POSIX\n     shell. Taken from\n     http://stackoverflow.com/questions/35817/whats-the-best-way-to-escape-ossystem-calls-in-python\n     \"\"\"\n  return \"'\" + s.replace(\"'\", \"'\\\\''\") + \"'\"\ndef EscapeMakeVariableExpansion(s):\n  \"\"\"Make has its own variable expansion syntax using $. We must escape it for\n     string to be interpreted literally.\"\"\"\n  return s.replace('$', '$$')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import EscapeShellArgument\n```\n\n```python\n\n\n```\n\n```python\ndef EscapeShellArgument(s):\n  \"\"\"Quotes an argument so that it will be interpreted literally by a POSIX\n     shell. Taken from\n     http://stackoverflow.com/questions/35817/whats-the-best-way-to-escape-ossystem-calls-in-python\n     \"\"\"\n  return \"'\" + s.replace(\"'\", \"'\\\\''\") + \"'\"\ndef EscapeMakeVariableExpansion(s):\n  \"\"\"Make has its own variable expansion syntax using $. We must escape it for\n     string to be interpreted literally.\"\"\"\n  return s.replace('$', '$$')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EscapeMakeVariableExpansion",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def EscapeMakeVariableExpansion(s):\n  \"\"\"Make has its own variable expansion syntax using $. We must escape it for\n     string to be interpreted literally.\"\"\"\n  return s.replace('$', '$$')\ndef EscapeCppDefine(s):\n  \"\"\"Escapes a CPP define so that it will reach the compiler unaltered.\"\"\"\n  s = EscapeShellArgument(s)\n  s = EscapeMakeVariableExpansion(s)\n  # '#' characters must be escaped even embedded in a string, else Make will\n  # treat it as the start of a comment.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import EscapeMakeVariableExpansion\n```\n\n```python\n\n\n```\n\n```python\ndef EscapeMakeVariableExpansion(s):\n  \"\"\"Make has its own variable expansion syntax using $. We must escape it for\n     string to be interpreted literally.\"\"\"\n  return s.replace('$', '$$')\ndef EscapeCppDefine(s):\n  \"\"\"Escapes a CPP define so that it will reach the compiler unaltered.\"\"\"\n  s = EscapeShellArgument(s)\n  s = EscapeMakeVariableExpansion(s)\n  # '#' characters must be escaped even embedded in a string, else Make will\n  # treat it as the start of a comment.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EscapeCppDefine",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def EscapeCppDefine(s):\n  \"\"\"Escapes a CPP define so that it will reach the compiler unaltered.\"\"\"\n  s = EscapeShellArgument(s)\n  s = EscapeMakeVariableExpansion(s)\n  # '#' characters must be escaped even embedded in a string, else Make will\n  # treat it as the start of a comment.\n  return s.replace('#', r'\\#')\ndef QuoteIfNecessary(string):\n  \"\"\"TODO: Should this ideally be replaced with one or more of the above\n     functions?\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import EscapeCppDefine\n```\n\n```python\n\n\n```\n\n```python\ndef EscapeCppDefine(s):\n  \"\"\"Escapes a CPP define so that it will reach the compiler unaltered.\"\"\"\n  s = EscapeShellArgument(s)\n  s = EscapeMakeVariableExpansion(s)\n  # '#' characters must be escaped even embedded in a string, else Make will\n  # treat it as the start of a comment.\n  return s.replace('#', r'\\#')\ndef QuoteIfNecessary(string):\n  \"\"\"TODO: Should this ideally be replaced with one or more of the above\n     functions?\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "QuoteIfNecessary",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def QuoteIfNecessary(string):\n  \"\"\"TODO: Should this ideally be replaced with one or more of the above\n     functions?\"\"\"\n  if '\"' in string:\n    string = '\"' + string.replace('\"', '\\\\\"') + '\"'\n  return string\ndef StringToMakefileVariable(string):\n  \"\"\"Convert a string to a value that is acceptable as a make variable name.\"\"\"\n  return re.sub('[^a-zA-Z0-9_]', '_', string)\nsrcdir_prefix = ''",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import QuoteIfNecessary\n```\n\n```python\n\n\n```\n\n```python\ndef QuoteIfNecessary(string):\n  \"\"\"TODO: Should this ideally be replaced with one or more of the above\n     functions?\"\"\"\n  if '\"' in string:\n    string = '\"' + string.replace('\"', '\\\\\"') + '\"'\n  return string\ndef StringToMakefileVariable(string):\n  \"\"\"Convert a string to a value that is acceptable as a make variable name.\"\"\"\n  return re.sub('[^a-zA-Z0-9_]', '_', string)\nsrcdir_prefix = ''\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StringToMakefileVariable",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def StringToMakefileVariable(string):\n  \"\"\"Convert a string to a value that is acceptable as a make variable name.\"\"\"\n  return re.sub('[^a-zA-Z0-9_]', '_', string)\nsrcdir_prefix = ''\ndef Sourceify(path):\n  \"\"\"Convert a path to its source directory form.\"\"\"\n  if '$(' in path:\n    return path\n  if os.path.isabs(path):\n    return path",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import StringToMakefileVariable\n```\n\n```python\n\n\n```\n\n```python\ndef StringToMakefileVariable(string):\n  \"\"\"Convert a string to a value that is acceptable as a make variable name.\"\"\"\n  return re.sub('[^a-zA-Z0-9_]', '_', string)\nsrcdir_prefix = ''\ndef Sourceify(path):\n  \"\"\"Convert a path to its source directory form.\"\"\"\n  if '$(' in path:\n    return path\n  if os.path.isabs(path):\n    return path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Sourceify",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def Sourceify(path):\n  \"\"\"Convert a path to its source directory form.\"\"\"\n  if '$(' in path:\n    return path\n  if os.path.isabs(path):\n    return path\n  return srcdir_prefix + path\ndef QuoteSpaces(s, quote=r'\\ '):\n  return s.replace(' ', quote)\ndef SourceifyAndQuoteSpaces(path):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import Sourceify\n```\n\n```python\n\n\n```\n\n```python\ndef Sourceify(path):\n  \"\"\"Convert a path to its source directory form.\"\"\"\n  if '$(' in path:\n    return path\n  if os.path.isabs(path):\n    return path\n  return srcdir_prefix + path\ndef QuoteSpaces(s, quote=r'\\ '):\n  return s.replace(' ', quote)\ndef SourceifyAndQuoteSpaces(path):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "QuoteSpaces",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def QuoteSpaces(s, quote=r'\\ '):\n  return s.replace(' ', quote)\ndef SourceifyAndQuoteSpaces(path):\n  \"\"\"Convert a path to its source directory form and quote spaces.\"\"\"\n  return QuoteSpaces(Sourceify(path))\n# TODO: Avoid code duplication with _ValidateSourcesForMSVSProject in msvs.py.\ndef _ValidateSourcesForOSX(spec, all_sources):\n  \"\"\"Makes sure if duplicate basenames are not specified in the source list.\n  Arguments:\n    spec: The target dictionary containing the properties of the target.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import QuoteSpaces\n```\n\n```python\n\n\n```\n\n```python\ndef QuoteSpaces(s, quote=r'\\ '):\n  return s.replace(' ', quote)\ndef SourceifyAndQuoteSpaces(path):\n  \"\"\"Convert a path to its source directory form and quote spaces.\"\"\"\n  return QuoteSpaces(Sourceify(path))\n# TODO: Avoid code duplication with _ValidateSourcesForMSVSProject in msvs.py.\ndef _ValidateSourcesForOSX(spec, all_sources):\n  \"\"\"Makes sure if duplicate basenames are not specified in the source list.\n  Arguments:\n    spec: The target dictionary containing the properties of the target.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SourceifyAndQuoteSpaces",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def SourceifyAndQuoteSpaces(path):\n  \"\"\"Convert a path to its source directory form and quote spaces.\"\"\"\n  return QuoteSpaces(Sourceify(path))\n# TODO: Avoid code duplication with _ValidateSourcesForMSVSProject in msvs.py.\ndef _ValidateSourcesForOSX(spec, all_sources):\n  \"\"\"Makes sure if duplicate basenames are not specified in the source list.\n  Arguments:\n    spec: The target dictionary containing the properties of the target.\n  \"\"\"\n  if spec.get('type', None) != 'static_library':",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import SourceifyAndQuoteSpaces\n```\n\n```python\n\n\n```\n\n```python\ndef SourceifyAndQuoteSpaces(path):\n  \"\"\"Convert a path to its source directory form and quote spaces.\"\"\"\n  return QuoteSpaces(Sourceify(path))\n# TODO: Avoid code duplication with _ValidateSourcesForMSVSProject in msvs.py.\ndef _ValidateSourcesForOSX(spec, all_sources):\n  \"\"\"Makes sure if duplicate basenames are not specified in the source list.\n  Arguments:\n    spec: The target dictionary containing the properties of the target.\n  \"\"\"\n  if spec.get('type', None) != 'static_library':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WriteAutoRegenerationRule",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def WriteAutoRegenerationRule(params, root_makefile, makefile_name,\n                              build_files):\n  \"\"\"Write the target to regenerate the Makefile.\"\"\"\n  options = params['options']\n  build_files_args = [gyp.common.RelativePath(filename, options.toplevel_dir)\n                      for filename in params['build_files_arg']]\n  gyp_binary = gyp.common.FixIfRelativePath(params['gyp_binary'],\n                                            options.toplevel_dir)\n  if not gyp_binary.startswith(os.sep):\n    gyp_binary = os.path.join('.', gyp_binary)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import WriteAutoRegenerationRule\n```\n\n```python\n\n\n```\n\n```python\ndef WriteAutoRegenerationRule(params, root_makefile, makefile_name,\n                              build_files):\n  \"\"\"Write the target to regenerate the Makefile.\"\"\"\n  options = params['options']\n  build_files_args = [gyp.common.RelativePath(filename, options.toplevel_dir)\n                      for filename in params['build_files_arg']]\n  gyp_binary = gyp.common.FixIfRelativePath(params['gyp_binary'],\n                                            options.toplevel_dir)\n  if not gyp_binary.startswith(os.sep):\n    gyp_binary = os.path.join('.', gyp_binary)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n  options = params['options']\n  for config in configurations:\n    arguments = ['make']\n    if options.toplevel_dir and options.toplevel_dir != '.':\n      arguments += '-C', options.toplevel_dir\n    arguments.append('BUILDTYPE=' + config)\n    print 'Building [%s]: %s' % (config, arguments)\n    subprocess.check_call(arguments)\ndef GenerateOutput(target_list, target_dicts, data, params):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import PerformBuild\n```\n\n```python\n\n\n```\n\n```python\ndef PerformBuild(data, configurations, params):\n  options = params['options']\n  for config in configurations:\n    arguments = ['make']\n    if options.toplevel_dir and options.toplevel_dir != '.':\n      arguments += '-C', options.toplevel_dir\n    arguments.append('BUILDTYPE=' + config)\n    print 'Building [%s]: %s' % (config, arguments)\n    subprocess.check_call(arguments)\ndef GenerateOutput(target_list, target_dicts, data, params):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n  options = params['options']\n  flavor = gyp.common.GetFlavor(params)\n  generator_flags = params.get('generator_flags', {})\n  builddir_name = generator_flags.get('output_dir', 'out')\n  android_ndk_version = generator_flags.get('android_ndk_version', None)\n  default_target = generator_flags.get('default_target', 'all')\n  def CalculateMakefilePath(build_file, base_name):\n    \"\"\"Determine where to write a Makefile for a given gyp file.\"\"\"\n    # Paths in gyp files are relative to the .gyp file, but we want",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import GenerateOutput\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutput(target_list, target_dicts, data, params):\n  options = params['options']\n  flavor = gyp.common.GetFlavor(params)\n  generator_flags = params.get('generator_flags', {})\n  builddir_name = generator_flags.get('output_dir', 'out')\n  android_ndk_version = generator_flags.get('android_ndk_version', None)\n  default_target = generator_flags.get('default_target', 'all')\n  def CalculateMakefilePath(build_file, base_name):\n    \"\"\"Determine where to write a Makefile for a given gyp file.\"\"\"\n    # Paths in gyp files are relative to the .gyp file, but we want\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n  'SHARED_INTERMEDIATE_DIR': '$(obj)/gen',\n  'PRODUCT_DIR': '$(builddir)',\n  'RULE_INPUT_ROOT': '%(INPUT_ROOT)s',  # This gets expanded by Python.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import generator_default_variables\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n  'SHARED_INTERMEDIATE_DIR': '$(obj)/gen',\n  'PRODUCT_DIR': '$(builddir)',\n  'RULE_INPUT_ROOT': '%(INPUT_ROOT)s',  # This gets expanded by Python.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_supports_multiple_toolsets = True\n# Request sorted dependencies in the order from dependents to dependencies.\ngenerator_wants_sorted_dependencies = False\n# Placates pylint.\ngenerator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import generator_supports_multiple_toolsets\n```\n\n```python\n\n\n```\n\n```python\ngenerator_supports_multiple_toolsets = True\n# Request sorted dependencies in the order from dependents to dependencies.\ngenerator_wants_sorted_dependencies = False\n# Placates pylint.\ngenerator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_wants_sorted_dependencies",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_wants_sorted_dependencies = False\n# Placates pylint.\ngenerator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import generator_wants_sorted_dependencies\n```\n\n```python\n\n\n```\n\n```python\ngenerator_wants_sorted_dependencies = False\n# Placates pylint.\ngenerator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_additional_non_configuration_keys",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import generator_additional_non_configuration_keys\n```\n\n```python\n\n\n```\n\n```python\ngenerator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_additional_path_sections",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n    default_variables.setdefault('SHARED_LIB_DIR',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import generator_additional_path_sections\n```\n\n```python\n\n\n```\n\n```python\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n    default_variables.setdefault('SHARED_LIB_DIR',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_extra_sources_for_rules",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n    default_variables.setdefault('SHARED_LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import generator_extra_sources_for_rules\n```\n\n```python\n\n\n```\n\n```python\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n    default_variables.setdefault('SHARED_LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n    default_variables.setdefault('SHARED_LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])\n    default_variables.setdefault('LIB_DIR',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import generator_filelist_paths\n```\n\n```python\n\n\n```\n\n```python\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n    default_variables.setdefault('SHARED_LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])\n    default_variables.setdefault('LIB_DIR',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SPACE_REPLACEMENT",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "SPACE_REPLACEMENT = '?'\nLINK_COMMANDS_LINUX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import SPACE_REPLACEMENT\n```\n\n```python\n\n\n```\n\n```python\nSPACE_REPLACEMENT = '?'\nLINK_COMMANDS_LINUX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LINK_COMMANDS_LINUX",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "LINK_COMMANDS_LINUX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import LINK_COMMANDS_LINUX\n```\n\n```python\n\n\n```\n\n```python\nLINK_COMMANDS_LINUX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_alink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_alink\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_alink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_alink\n```\n\n```python\n\n\n```\n\n```python\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_alink_thin",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_alink_thin\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_alink_thin",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.\n# 2) loadable_module, which is generating a module intended for dlopen().",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_alink_thin\n```\n\n```python\n\n\n```\n\n```python\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.\n# 2) loadable_module, which is generating a module intended for dlopen().\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_link",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.\n# 2) loadable_module, which is generating a module intended for dlopen().\n#\n# They differ only slightly:\n# In the former case, we want to package all dependent code into the .so.\n# In the latter case, we want to package just the API exposed by the",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_link\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.\n# 2) loadable_module, which is generating a module intended for dlopen().\n#\n# They differ only slightly:\n# In the former case, we want to package all dependent code into the .so.\n# In the latter case, we want to package just the API exposed by the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_link",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.\n# 2) loadable_module, which is generating a module intended for dlopen().\n#\n# They differ only slightly:\n# In the former case, we want to package all dependent code into the .so.\n# In the latter case, we want to package just the API exposed by the\n# outermost module.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_link\n```\n\n```python\n\n\n```\n\n```python\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.\n# 2) loadable_module, which is generating a module intended for dlopen().\n#\n# They differ only slightly:\n# In the former case, we want to package all dependent code into the .so.\n# In the latter case, we want to package just the API exposed by the\n# outermost module.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_solink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_solink\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_solink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_solink\n```\n\n```python\n\n\n```\n\n```python\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_solink_module",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_solink_module\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_solink_module",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_solink_module\n```\n\n```python\n\n\n```\n\n```python\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LINK_COMMANDS_MAC",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "LINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import LINK_COMMANDS_MAC\n```\n\n```python\n\n\n```\n\n```python\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_alink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_alink\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_alink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_alink\n```\n\n```python\n\n\n```\n\n```python\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_link",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_link\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_link",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_link\n```\n\n```python\n\n\n```\n\n```python\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_solink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_solink\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_solink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_solink\n```\n\n```python\n\n\n```\n\n```python\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_solink_module",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_solink_module\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_solink_module",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_solink_module\n```\n\n```python\n\n\n```\n\n```python\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LINK_COMMANDS_ANDROID",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "LINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import LINK_COMMANDS_ANDROID\n```\n\n```python\n\n\n```\n\n```python\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_alink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_alink\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_alink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_alink\n```\n\n```python\n\n\n```\n\n```python\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_alink_thin",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n# Other shared-object link notes:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_alink_thin\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n# Other shared-object link notes:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_alink_thin",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_alink_thin\n```\n\n```python\n\n\n```\n\n```python\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_link",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_link\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_link_host",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_link_host\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_link",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_link\n```\n\n```python\n\n\n```\n\n```python\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_link_host",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_link_host\n```\n\n```python\n\n\n```\n\n```python\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_solink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_solink\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_solink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_solink\n```\n\n```python\n\n\n```\n\n```python\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_solink_module",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_solink_module\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_solink_module",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_solink_module\n```\n\n```python\n\n\n```\n\n```python\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_solink_module_host",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_solink_module_host\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_solink_module_host",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_solink_module_host\n```\n\n```python\n\n\n```\n\n```python\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LINK_COMMANDS_AIX",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "LINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import LINK_COMMANDS_AIX\n```\n\n```python\n\n\n```\n\n```python\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_alink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_alink\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_alink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_alink\n```\n\n```python\n\n\n```\n\n```python\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_alink_thin",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_alink_thin\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_alink_thin",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_alink_thin\n```\n\n```python\n\n\n```\n\n```python\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_link",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_link\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_link",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_link\n```\n\n```python\n\n\n```\n\n```python\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_solink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_solink\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_solink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_solink\n```\n\n```python\n\n\n```\n\n```python\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_solink_module",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_solink_module\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_solink_module",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_solink_module\n```\n\n```python\n\n\n```\n\n```python\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LINK_COMMANDS_OS390",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "LINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import LINK_COMMANDS_OS390\n```\n\n```python\n\n\n```\n\n```python\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_alink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_alink\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_alink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_alink\n```\n\n```python\n\n\n```\n\n```python\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_alink_thin",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_alink_thin\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_alink_thin",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_alink_thin\n```\n\n```python\n\n\n```\n\n```python\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_link",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_link\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_link",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_link\n```\n\n```python\n\n\n```\n\n```python\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_solink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_solink\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_solink",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n# The implicit make rules have it looking for RCS files, among other things.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_solink\n```\n\n```python\n\n\n```\n\n```python\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n# The implicit make rules have it looking for RCS files, among other things.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_solink_module",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n# The implicit make rules have it looking for RCS files, among other things.\n# We instead explicitly write all the rules we care about.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_solink_module\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n# The implicit make rules have it looking for RCS files, among other things.\n# We instead explicitly write all the rules we care about.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_solink_module",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n# The implicit make rules have it looking for RCS files, among other things.\n# We instead explicitly write all the rules we care about.\n# It's even quicker (saves ~200ms) to pass -r on the command line.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_solink_module\n```\n\n```python\n\n\n```\n\n```python\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n# The implicit make rules have it looking for RCS files, among other things.\n# We instead explicitly write all the rules we care about.\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SHARED_HEADER",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "SHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n# The implicit make rules have it looking for RCS files, among other things.\n# We instead explicitly write all the rules we care about.\n# It's even quicker (saves ~200ms) to pass -r on the command line.\nMAKEFLAGS=-r\n# The source directory tree.\nsrcdir := %(srcdir)s\nabs_srcdir := $(abspath $(srcdir))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import SHARED_HEADER\n```\n\n```python\n\n\n```\n\n```python\nSHARED_HEADER = (\"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n# The implicit make rules have it looking for RCS files, among other things.\n# We instead explicitly write all the rules we care about.\n# It's even quicker (saves ~200ms) to pass -r on the command line.\nMAKEFLAGS=-r\n# The source directory tree.\nsrcdir := %(srcdir)s\nabs_srcdir := $(abspath $(srcdir))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "replace_spaces",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "replace_spaces = $(subst $(space),\"\"\" + SPACE_REPLACEMENT + \"\"\",$1)\nunreplace_spaces = $(subst \"\"\" + SPACE_REPLACEMENT + \"\"\",$(space),$1)\ndirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import replace_spaces\n```\n\n```python\n\n\n```\n\n```python\nreplace_spaces = $(subst $(space),\"\"\" + SPACE_REPLACEMENT + \"\"\",$1)\nunreplace_spaces = $(subst \"\"\" + SPACE_REPLACEMENT + \"\"\",$(space),$1)\ndirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "unreplace_spaces",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "unreplace_spaces = $(subst \"\"\" + SPACE_REPLACEMENT + \"\"\",$(space),$1)\ndirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import unreplace_spaces\n```\n\n```python\n\n\n```\n\n```python\nunreplace_spaces = $(subst \"\"\" + SPACE_REPLACEMENT + \"\"\",$(space),$1)\ndirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dirx",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.\n# ccache or distcc lose the path to the target, so we convert a rule of",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import dirx\n```\n\n```python\n\n\n```\n\n```python\ndirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.\n# ccache or distcc lose the path to the target, so we convert a rule of\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "depfile",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "depfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.\n# ccache or distcc lose the path to the target, so we convert a rule of\n# the form:\n#   foobar.o: DEP1 DEP2\n# into\n#   path/to/foobar.o: DEP1 DEP2\n# (2) we want missing files not to cause us to fail to build.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import depfile\n```\n\n```python\n\n\n```\n\n```python\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.\n# ccache or distcc lose the path to the target, so we convert a rule of\n# the form:\n#   foobar.o: DEP1 DEP2\n# into\n#   path/to/foobar.o: DEP1 DEP2\n# (2) we want missing files not to cause us to fail to build.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DEPFLAGS",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "DEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.\n# ccache or distcc lose the path to the target, so we convert a rule of\n# the form:\n#   foobar.o: DEP1 DEP2\n# into\n#   path/to/foobar.o: DEP1 DEP2\n# (2) we want missing files not to cause us to fail to build.\n# We want to rewrite",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import DEPFLAGS\n```\n\n```python\n\n\n```\n\n```python\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.\n# ccache or distcc lose the path to the target, so we convert a rule of\n# the form:\n#   foobar.o: DEP1 DEP2\n# into\n#   path/to/foobar.o: DEP1 DEP2\n# (2) we want missing files not to cause us to fail to build.\n# We want to rewrite\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_cc",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_cc = CC($(TOOLSET)) $@\ncmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_cxx = CXX($(TOOLSET)) $@\ncmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_cc\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_cc = CC($(TOOLSET)) $@\ncmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_cxx = CXX($(TOOLSET)) $@\ncmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_cc",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_cxx = CXX($(TOOLSET)) $@\ncmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_cc\n```\n\n```python\n\n\n```\n\n```python\ncmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_cxx = CXX($(TOOLSET)) $@\ncmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_cxx",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_cxx = CXX($(TOOLSET)) $@\ncmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_cxx\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_cxx = CXX($(TOOLSET)) $@\ncmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_cxx",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n\"\"\"\nr\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_cxx\n```\n\n```python\n\n\n```\n\n```python\ncmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n\"\"\"\nr\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_touch",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n\"\"\"\nr\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_touch\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n\"\"\"\nr\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_touch",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n\"\"\"\nr\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use\n# use single quotes and escape_quotes.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_touch\n```\n\n```python\n\n\n```\n\n```python\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n\"\"\"\nr\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use\n# use single quotes and escape_quotes.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_copy",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n\"\"\"\nr\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use\n# use single quotes and escape_quotes.\nescape_quotes = $(subst ','\\'',$(1))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_copy\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n\"\"\"\nr\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use\n# use single quotes and escape_quotes.\nescape_quotes = $(subst ','\\'',$(1))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_copy",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n\"\"\"\nr\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use\n# use single quotes and escape_quotes.\nescape_quotes = $(subst ','\\'',$(1))\n# This comment is here just to include a ' to unconfuse syntax highlighting.\n# Define an escape_vars function to escape '$' variable syntax.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_copy\n```\n\n```python\n\n\n```\n\n```python\ncmd_copy = rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\"\n%(link_commands)s\n\"\"\"\nr\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use\n# use single quotes and escape_quotes.\nescape_quotes = $(subst ','\\'',$(1))\n# This comment is here just to include a ' to unconfuse syntax highlighting.\n# Define an escape_vars function to escape '$' variable syntax.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "escape_quotes",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "escape_quotes = $(subst ','\\'',$(1))\n# This comment is here just to include a ' to unconfuse syntax highlighting.\n# Define an escape_vars function to escape '$' variable syntax.\n# This allows us to read/write command lines with shell variables (e.g.\n# $LD_LIBRARY_PATH), without triggering make substitution.\nescape_vars = $(subst $$,$$$$,$(1))\n# Helper that expands to a shell command to echo a string exactly as it is in\n# make. This uses printf instead of echo because printf's behaviour with respect\n# to escape sequences is more portable than echo's across different shells\n# (e.g., dash, bash).",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import escape_quotes\n```\n\n```python\n\n\n```\n\n```python\nescape_quotes = $(subst ','\\'',$(1))\n# This comment is here just to include a ' to unconfuse syntax highlighting.\n# Define an escape_vars function to escape '$' variable syntax.\n# This allows us to read/write command lines with shell variables (e.g.\n# $LD_LIBRARY_PATH), without triggering make substitution.\nescape_vars = $(subst $$,$$$$,$(1))\n# Helper that expands to a shell command to echo a string exactly as it is in\n# make. This uses printf instead of echo because printf's behaviour with respect\n# to escape sequences is more portable than echo's across different shells\n# (e.g., dash, bash).\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "escape_vars",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "escape_vars = $(subst $$,$$$$,$(1))\n# Helper that expands to a shell command to echo a string exactly as it is in\n# make. This uses printf instead of echo because printf's behaviour with respect\n# to escape sequences is more portable than echo's across different shells\n# (e.g., dash, bash).\nexact_echo = printf '%%s\\n' '$(call escape_quotes,$(1))'\n\"\"\"\n\"\"\"\n# Helper to compare the command we're about to run against the command\n# we logged the last time we ran the command.  Produces an empty",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import escape_vars\n```\n\n```python\n\n\n```\n\n```python\nescape_vars = $(subst $$,$$$$,$(1))\n# Helper that expands to a shell command to echo a string exactly as it is in\n# make. This uses printf instead of echo because printf's behaviour with respect\n# to escape sequences is more portable than echo's across different shells\n# (e.g., dash, bash).\nexact_echo = printf '%%s\\n' '$(call escape_quotes,$(1))'\n\"\"\"\n\"\"\"\n# Helper to compare the command we're about to run against the command\n# we logged the last time we ran the command.  Produces an empty\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "exact_echo",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "exact_echo = printf '%%s\\n' '$(call escape_quotes,$(1))'\n\"\"\"\n\"\"\"\n# Helper to compare the command we're about to run against the command\n# we logged the last time we ran the command.  Produces an empty\n# string (false) when the commands match.\n# Tricky point: Make has no string-equality test function.\n# The kernel uses the following, but it seems like it would have false\n# positives, where one string reordered its arguments.\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\\",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import exact_echo\n```\n\n```python\n\n\n```\n\n```python\nexact_echo = printf '%%s\\n' '$(call escape_quotes,$(1))'\n\"\"\"\n\"\"\"\n# Helper to compare the command we're about to run against the command\n# we logged the last time we ran the command.  Produces an empty\n# string (false) when the commands match.\n# Tricky point: Make has no string-equality test function.\n# The kernel uses the following, but it seems like it would have false\n# positives, where one string reordered its arguments.\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\\\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "command_changed",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\\\n                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n# Helper that is non-empty when a prerequisite changes.\n# Normally make does this implicitly, but we force rules to always run\n# so we can check their command lines.\n#   $? -- new prerequisites\n#   $| -- order-only dependencies\nprereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n# Helper that executes all postbuilds until one fails.\ndefine do_postbuilds",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import command_changed\n```\n\n```python\n\n\n```\n\n```python\ncommand_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\\\n                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n# Helper that is non-empty when a prerequisite changes.\n# Normally make does this implicitly, but we force rules to always run\n# so we can check their command lines.\n#   $? -- new prerequisites\n#   $| -- order-only dependencies\nprereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n# Helper that executes all postbuilds until one fails.\ndefine do_postbuilds\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "prereq_changed",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n# Helper that executes all postbuilds until one fails.\ndefine do_postbuilds\n  @E=0;\\\\\n  for p in $(POSTBUILDS); do\\\\\n    eval $$p;\\\\\n    E=$$?;\\\\\n    if [ $$E -ne 0 ]; then\\\\\n      break;\\\\\n    fi;\\\\",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import prereq_changed\n```\n\n```python\n\n\n```\n\n```python\nprereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n# Helper that executes all postbuilds until one fails.\ndefine do_postbuilds\n  @E=0;\\\\\n  for p in $(POSTBUILDS); do\\\\\n    eval $$p;\\\\\n    E=$$?;\\\\\n    if [ $$E -ne 0 ]; then\\\\\n      break;\\\\\n    fi;\\\\\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SHARED_HEADER_MAC_COMMANDS",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "SHARED_HEADER_MAC_COMMANDS = \"\"\"\nquiet_cmd_objc = CXX($(TOOLSET)) $@\ncmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import SHARED_HEADER_MAC_COMMANDS\n```\n\n```python\n\n\n```\n\n```python\nSHARED_HEADER_MAC_COMMANDS = \"\"\"\nquiet_cmd_objc = CXX($(TOOLSET)) $@\ncmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_objc",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_objc = CXX($(TOOLSET)) $@\ncmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_objc\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_objc = CXX($(TOOLSET)) $@\ncmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_objc",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_objc\n```\n\n```python\n\n\n```\n\n```python\ncmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_objcxx",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_objcxx\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_objcxx",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_objcxx\n```\n\n```python\n\n\n```\n\n```python\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_pch_c",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_pch_c\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_pch_c",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_pch_c\n```\n\n```python\n\n\n```\n\n```python\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_pch_cc",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_pch_cc\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_pch_cc",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_pch_cc\n```\n\n```python\n\n\n```\n\n```python\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_pch_m",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_pch_m\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_pch_m",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_pch_m\n```\n\n```python\n\n\n```\n\n```python\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_pch_mm",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_pch_mm\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_pch_mm",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_pch_mm\n```\n\n```python\n\n\n```\n\n```python\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_mac_tool",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_mac_tool\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_mac_tool",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_mac_tool\n```\n\n```python\n\n\n```\n\n```python\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_mac_package_framework",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n' % ext)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_mac_package_framework\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n' % ext)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_mac_package_framework",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_mac_package_framework\n```\n\n```python\n\n\n```\n\n```python\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quiet_cmd_infoplist",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n  writer.write('\\n# Try building from generated source, too.\\n')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import quiet_cmd_infoplist\n```\n\n```python\n\n\n```\n\n```python\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n  writer.write('\\n# Try building from generated source, too.\\n')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cmd_infoplist",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n  writer.write('\\n# Try building from generated source, too.\\n')\n  for ext in extensions:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import cmd_infoplist\n```\n\n```python\n\n\n```\n\n```python\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"\ndef WriteRootHeaderSuffixRules(writer):\n  extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n  writer.write('# Suffix rules, putting all outputs into $(obj).\\n')\n  for ext in extensions:\n    writer.write('$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n' % ext)\n    writer.write('\\t@$(call do_cmd,%s,1)\\n' % COMPILABLE_EXTENSIONS[ext])\n  writer.write('\\n# Try building from generated source, too.\\n')\n  for ext in extensions:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SHARED_HEADER_SUFFIX_RULES_COMMENT1",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "SHARED_HEADER_SUFFIX_RULES_COMMENT1 = (\"\"\"\\\n# Suffix rules, putting all outputs into $(obj).\n\"\"\")\nSHARED_HEADER_SUFFIX_RULES_COMMENT2 = (\"\"\"\\\n# Try building from generated source, too.\n\"\"\")\nSHARED_FOOTER = \"\"\"\\\n# \"all\" is a concatenation of the \"all\" targets from all the included\n# sub-makefiles. This is just here to clarify.\nall:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import SHARED_HEADER_SUFFIX_RULES_COMMENT1\n```\n\n```python\n\n\n```\n\n```python\nSHARED_HEADER_SUFFIX_RULES_COMMENT1 = (\"\"\"\\\n# Suffix rules, putting all outputs into $(obj).\n\"\"\")\nSHARED_HEADER_SUFFIX_RULES_COMMENT2 = (\"\"\"\\\n# Try building from generated source, too.\n\"\"\")\nSHARED_FOOTER = \"\"\"\\\n# \"all\" is a concatenation of the \"all\" targets from all the included\n# sub-makefiles. This is just here to clarify.\nall:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SHARED_HEADER_SUFFIX_RULES_COMMENT2",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "SHARED_HEADER_SUFFIX_RULES_COMMENT2 = (\"\"\"\\\n# Try building from generated source, too.\n\"\"\")\nSHARED_FOOTER = \"\"\"\\\n# \"all\" is a concatenation of the \"all\" targets from all the included\n# sub-makefiles. This is just here to clarify.\nall:\n# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n# target in our tree. Only consider the ones with .d (dependency) info:\nd_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import SHARED_HEADER_SUFFIX_RULES_COMMENT2\n```\n\n```python\n\n\n```\n\n```python\nSHARED_HEADER_SUFFIX_RULES_COMMENT2 = (\"\"\"\\\n# Try building from generated source, too.\n\"\"\")\nSHARED_FOOTER = \"\"\"\\\n# \"all\" is a concatenation of the \"all\" targets from all the included\n# sub-makefiles. This is just here to clarify.\nall:\n# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n# target in our tree. Only consider the ones with .d (dependency) info:\nd_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SHARED_FOOTER",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "SHARED_FOOTER = \"\"\"\\\n# \"all\" is a concatenation of the \"all\" targets from all the included\n# sub-makefiles. This is just here to clarify.\nall:\n# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n# target in our tree. Only consider the ones with .d (dependency) info:\nd_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\nifneq ($(d_files),)\n  include $(d_files)\nendif",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import SHARED_FOOTER\n```\n\n```python\n\n\n```\n\n```python\nSHARED_FOOTER = \"\"\"\\\n# \"all\" is a concatenation of the \"all\" targets from all the included\n# sub-makefiles. This is just here to clarify.\nall:\n# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n# target in our tree. Only consider the ones with .d (dependency) info:\nd_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\nifneq ($(d_files),)\n  include $(d_files)\nendif\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "header = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n# Maps every compilable file extension to the do_cmd that compiles it.\nCOMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 'cc',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import header\n```\n\n```python\n\n\n```\n\n```python\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n# Maps every compilable file extension to the do_cmd that compiles it.\nCOMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 'cc',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "COMPILABLE_EXTENSIONS",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "COMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 'cc',\n  '.S': 'cc',\n}\ndef Compilable(filename):\n  \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import COMPILABLE_EXTENSIONS\n```\n\n```python\n\n\n```\n\n```python\nCOMPILABLE_EXTENSIONS = {\n  '.c': 'cc',\n  '.cc': 'cxx',\n  '.cpp': 'cxx',\n  '.cxx': 'cxx',\n  '.s': 'cc',\n  '.S': 'cc',\n}\ndef Compilable(filename):\n  \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "srcdir_prefix",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "srcdir_prefix = ''\ndef Sourceify(path):\n  \"\"\"Convert a path to its source directory form.\"\"\"\n  if '$(' in path:\n    return path\n  if os.path.isabs(path):\n    return path\n  return srcdir_prefix + path\ndef QuoteSpaces(s, quote=r'\\ '):\n  return s.replace(' ', quote)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import srcdir_prefix\n```\n\n```python\n\n\n```\n\n```python\nsrcdir_prefix = ''\ndef Sourceify(path):\n  \"\"\"Convert a path to its source directory form.\"\"\"\n  if '$(' in path:\n    return path\n  if os.path.isabs(path):\n    return path\n  return srcdir_prefix + path\ndef QuoteSpaces(s, quote=r'\\ '):\n  return s.replace(' ', quote)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "target_outputs",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "target_outputs = {}\n# Map from qualified target to any linkable output.  A subset\n# of target_outputs.  E.g. when mybinary depends on liba, we want to\n# include liba in the linker line; when otherbinary depends on\n# mybinary, we just want to build mybinary first.\ntarget_link_deps = {}\nclass MakefileWriter(object):\n  \"\"\"MakefileWriter packages up the writing of one target-specific foobar.mk.\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import target_outputs\n```\n\n```python\n\n\n```\n\n```python\ntarget_outputs = {}\n# Map from qualified target to any linkable output.  A subset\n# of target_outputs.  E.g. when mybinary depends on liba, we want to\n# include liba in the linker line; when otherbinary depends on\n# mybinary, we just want to build mybinary first.\ntarget_link_deps = {}\nclass MakefileWriter(object):\n  \"\"\"MakefileWriter packages up the writing of one target-specific foobar.mk.\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "target_link_deps",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "target_link_deps = {}\nclass MakefileWriter(object):\n  \"\"\"MakefileWriter packages up the writing of one target-specific foobar.mk.\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"\n  def __init__(self, generator_flags, flavor):\n    self.generator_flags = generator_flags\n    self.flavor = flavor\n    self.suffix_rules_srcdir = {}\n    self.suffix_rules_objdir1 = {}",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.make import target_link_deps\n```\n\n```python\n\n\n```\n\n```python\ntarget_link_deps = {}\nclass MakefileWriter(object):\n  \"\"\"MakefileWriter packages up the writing of one target-specific foobar.mk.\n  Its only real entry point is Write(), and is mostly used for namespacing.\n  \"\"\"\n  def __init__(self, generator_flags, flavor):\n    self.generator_flags = generator_flags\n    self.flavor = flavor\n    self.suffix_rules_srcdir = {}\n    self.suffix_rules_objdir1 = {}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MSBuildRule",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "class MSBuildRule(object):\n  \"\"\"Used to store information used to generate an MSBuild rule.\n  Attributes:\n    rule_name: The rule name, sanitized to use in XML.\n    target_name: The name of the target.\n    after_targets: The name of the AfterTargets element.\n    before_targets: The name of the BeforeTargets element.\n    depends_on: The name of the DependsOn element.\n    compute_output: The name of the ComputeOutput element.\n    dirs_to_make: The name of the DirsToMake element.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import MSBuildRule\n```\n\n```python\n\n\n```\n\n```python\nclass MSBuildRule(object):\n  \"\"\"Used to store information used to generate an MSBuild rule.\n  Attributes:\n    rule_name: The rule name, sanitized to use in XML.\n    target_name: The name of the target.\n    after_targets: The name of the AfterTargets element.\n    before_targets: The name of the BeforeTargets element.\n    depends_on: The name of the DependsOn element.\n    compute_output: The name of the ComputeOutput element.\n    dirs_to_make: The name of the DirsToMake element.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n  \"\"\"Generated variables that require params to be known.\"\"\"\n  generator_flags = params.get('generator_flags', {})\n  # Select project file format version (if unset, default to auto detecting).\n  msvs_version = MSVSVersion.SelectVisualStudioVersion(\n      generator_flags.get('msvs_version', 'auto'))\n  # Stash msvs_version for later (so we don't have to probe the system twice).\n  params['msvs_version'] = msvs_version\n  # Set a variable so conditions can be based on msvs_version.\n  default_variables['MSVS_VERSION'] = msvs_version.ShortName()",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import CalculateVariables\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateVariables(default_variables, params):\n  \"\"\"Generated variables that require params to be known.\"\"\"\n  generator_flags = params.get('generator_flags', {})\n  # Select project file format version (if unset, default to auto detecting).\n  msvs_version = MSVSVersion.SelectVisualStudioVersion(\n      generator_flags.get('msvs_version', 'auto'))\n  # Stash msvs_version for later (so we don't have to probe the system twice).\n  params['msvs_version'] = msvs_version\n  # Set a variable so conditions can be based on msvs_version.\n  default_variables['MSVS_VERSION'] = msvs_version.ShortName()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n  options = params['options']\n  msvs_version = params['msvs_version']\n  devenv = os.path.join(msvs_version.path, 'Common7', 'IDE', 'devenv.com')\n  for build_file, build_file_dict in data.iteritems():\n    (build_file_root, build_file_ext) = os.path.splitext(build_file)\n    if build_file_ext != '.gyp':\n      continue\n    sln_path = build_file_root + options.suffix + '.sln'\n    if options.generator_output:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import PerformBuild\n```\n\n```python\n\n\n```\n\n```python\ndef PerformBuild(data, configurations, params):\n  options = params['options']\n  msvs_version = params['msvs_version']\n  devenv = os.path.join(msvs_version.path, 'Common7', 'IDE', 'devenv.com')\n  for build_file, build_file_dict in data.iteritems():\n    (build_file_root, build_file_ext) = os.path.splitext(build_file)\n    if build_file_ext != '.gyp':\n      continue\n    sln_path = build_file_root + options.suffix + '.sln'\n    if options.generator_output:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n  \"\"\"Generate .sln and .vcproj files.\n  This is the entry point for this generator.\n  Arguments:\n    target_list: List of target pairs: 'base/base.gyp:base'.\n    target_dicts: Dict of target properties keyed on target pair.\n    data: Dictionary containing per .gyp data.\n  \"\"\"\n  global fixpath_prefix\n  options = params['options']",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import GenerateOutput\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutput(target_list, target_dicts, data, params):\n  \"\"\"Generate .sln and .vcproj files.\n  This is the entry point for this generator.\n  Arguments:\n    target_list: List of target pairs: 'base/base.gyp:base'.\n    target_dicts: Dict of target properties keyed on target pair.\n    data: Dictionary containing per .gyp data.\n  \"\"\"\n  global fixpath_prefix\n  options = params['options']\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OrderedDict",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "OrderedDict = _import_OrderedDict()\n# Regular expression for validating Visual Studio GUIDs.  If the GUID\n# contains lowercase hex letters, MSVS will be fine. However,\n# IncrediBuild BuildConsole will parse the solution file, but then\n# silently skip building the target causing hard to track down errors.\n# Note that this only happens with the BuildConsole, and does not occur\n# if IncrediBuild is executed from inside Visual Studio.  This regex\n# validates that the string looks like a GUID with all uppercase hex\n# letters.\nVALID_MSVS_GUID_CHARS = re.compile(r'^[A-F0-9\\-]+$')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import OrderedDict\n```\n\n```python\n\n\n```\n\n```python\nOrderedDict = _import_OrderedDict()\n# Regular expression for validating Visual Studio GUIDs.  If the GUID\n# contains lowercase hex letters, MSVS will be fine. However,\n# IncrediBuild BuildConsole will parse the solution file, but then\n# silently skip building the target causing hard to track down errors.\n# Note that this only happens with the BuildConsole, and does not occur\n# if IncrediBuild is executed from inside Visual Studio.  This regex\n# validates that the string looks like a GUID with all uppercase hex\n# letters.\nVALID_MSVS_GUID_CHARS = re.compile(r'^[A-F0-9\\-]+$')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "VALID_MSVS_GUID_CHARS",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "VALID_MSVS_GUID_CHARS = re.compile(r'^[A-F0-9\\-]+$')\ngenerator_default_variables = {\n    'EXECUTABLE_PREFIX': '',\n    'EXECUTABLE_SUFFIX': '.exe',\n    'STATIC_LIB_PREFIX': '',\n    'SHARED_LIB_PREFIX': '',\n    'STATIC_LIB_SUFFIX': '.lib',\n    'SHARED_LIB_SUFFIX': '.dll',\n    'INTERMEDIATE_DIR': '$(IntDir)',\n    'SHARED_INTERMEDIATE_DIR': '$(OutDir)obj/global_intermediate',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import VALID_MSVS_GUID_CHARS\n```\n\n```python\n\n\n```\n\n```python\nVALID_MSVS_GUID_CHARS = re.compile(r'^[A-F0-9\\-]+$')\ngenerator_default_variables = {\n    'EXECUTABLE_PREFIX': '',\n    'EXECUTABLE_SUFFIX': '.exe',\n    'STATIC_LIB_PREFIX': '',\n    'SHARED_LIB_PREFIX': '',\n    'STATIC_LIB_SUFFIX': '.lib',\n    'SHARED_LIB_SUFFIX': '.dll',\n    'INTERMEDIATE_DIR': '$(IntDir)',\n    'SHARED_INTERMEDIATE_DIR': '$(OutDir)obj/global_intermediate',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "generator_default_variables = {\n    'EXECUTABLE_PREFIX': '',\n    'EXECUTABLE_SUFFIX': '.exe',\n    'STATIC_LIB_PREFIX': '',\n    'SHARED_LIB_PREFIX': '',\n    'STATIC_LIB_SUFFIX': '.lib',\n    'SHARED_LIB_SUFFIX': '.dll',\n    'INTERMEDIATE_DIR': '$(IntDir)',\n    'SHARED_INTERMEDIATE_DIR': '$(OutDir)obj/global_intermediate',\n    'OS': 'win',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import generator_default_variables\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables = {\n    'EXECUTABLE_PREFIX': '',\n    'EXECUTABLE_SUFFIX': '.exe',\n    'STATIC_LIB_PREFIX': '',\n    'SHARED_LIB_PREFIX': '',\n    'STATIC_LIB_SUFFIX': '.lib',\n    'SHARED_LIB_SUFFIX': '.dll',\n    'INTERMEDIATE_DIR': '$(IntDir)',\n    'SHARED_INTERMEDIATE_DIR': '$(OutDir)obj/global_intermediate',\n    'OS': 'win',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_additional_path_sections",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "generator_additional_path_sections = [\n    'msvs_cygwin_dirs',\n    'msvs_props',\n]\ngenerator_additional_non_configuration_keys = [\n    'msvs_cygwin_dirs',\n    'msvs_cygwin_shell',\n    'msvs_large_pdb',\n    'msvs_shard',\n    'msvs_external_builder',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import generator_additional_path_sections\n```\n\n```python\n\n\n```\n\n```python\ngenerator_additional_path_sections = [\n    'msvs_cygwin_dirs',\n    'msvs_props',\n]\ngenerator_additional_non_configuration_keys = [\n    'msvs_cygwin_dirs',\n    'msvs_cygwin_shell',\n    'msvs_large_pdb',\n    'msvs_shard',\n    'msvs_external_builder',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_additional_non_configuration_keys",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "generator_additional_non_configuration_keys = [\n    'msvs_cygwin_dirs',\n    'msvs_cygwin_shell',\n    'msvs_large_pdb',\n    'msvs_shard',\n    'msvs_external_builder',\n    'msvs_external_builder_out_dir',\n    'msvs_external_builder_build_cmd',\n    'msvs_external_builder_clean_cmd',\n    'msvs_external_builder_clcompile_cmd',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import generator_additional_non_configuration_keys\n```\n\n```python\n\n\n```\n\n```python\ngenerator_additional_non_configuration_keys = [\n    'msvs_cygwin_dirs',\n    'msvs_cygwin_shell',\n    'msvs_large_pdb',\n    'msvs_shard',\n    'msvs_external_builder',\n    'msvs_external_builder_out_dir',\n    'msvs_external_builder_build_cmd',\n    'msvs_external_builder_clean_cmd',\n    'msvs_external_builder_clcompile_cmd',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "precomp_keys",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "precomp_keys = [\n    'msvs_precompiled_header',\n    'msvs_precompiled_source',\n]\ncached_username = None\ncached_domain = None\n# TODO(gspencer): Switch the os.environ calls to be\n# win32api.GetDomainName() and win32api.GetUserName() once the\n# python version in depot_tools has been updated to work on Vista\n# 64-bit.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import precomp_keys\n```\n\n```python\n\n\n```\n\n```python\nprecomp_keys = [\n    'msvs_precompiled_header',\n    'msvs_precompiled_source',\n]\ncached_username = None\ncached_domain = None\n# TODO(gspencer): Switch the os.environ calls to be\n# win32api.GetDomainName() and win32api.GetUserName() once the\n# python version in depot_tools has been updated to work on Vista\n# 64-bit.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cached_username",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "cached_username = None\ncached_domain = None\n# TODO(gspencer): Switch the os.environ calls to be\n# win32api.GetDomainName() and win32api.GetUserName() once the\n# python version in depot_tools has been updated to work on Vista\n# 64-bit.\ndef _GetDomainAndUserName():\n  if sys.platform not in ('win32', 'cygwin'):\n    return ('DOMAIN', 'USERNAME')\n  global cached_username",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import cached_username\n```\n\n```python\n\n\n```\n\n```python\ncached_username = None\ncached_domain = None\n# TODO(gspencer): Switch the os.environ calls to be\n# win32api.GetDomainName() and win32api.GetUserName() once the\n# python version in depot_tools has been updated to work on Vista\n# 64-bit.\ndef _GetDomainAndUserName():\n  if sys.platform not in ('win32', 'cygwin'):\n    return ('DOMAIN', 'USERNAME')\n  global cached_username\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cached_domain",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "cached_domain = None\n# TODO(gspencer): Switch the os.environ calls to be\n# win32api.GetDomainName() and win32api.GetUserName() once the\n# python version in depot_tools has been updated to work on Vista\n# 64-bit.\ndef _GetDomainAndUserName():\n  if sys.platform not in ('win32', 'cygwin'):\n    return ('DOMAIN', 'USERNAME')\n  global cached_username\n  global cached_domain",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import cached_domain\n```\n\n```python\n\n\n```\n\n```python\ncached_domain = None\n# TODO(gspencer): Switch the os.environ calls to be\n# win32api.GetDomainName() and win32api.GetUserName() once the\n# python version in depot_tools has been updated to work on Vista\n# 64-bit.\ndef _GetDomainAndUserName():\n  if sys.platform not in ('win32', 'cygwin'):\n    return ('DOMAIN', 'USERNAME')\n  global cached_username\n  global cached_domain\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fixpath_prefix",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "fixpath_prefix = None\ndef _NormalizedSource(source):\n  \"\"\"Normalize the path.\n  But not if that gets rid of a variable, as this may expand to something\n  larger than one directory.\n  Arguments:\n      source: The path to be normalize.d\n  Returns:\n      The normalized path.\n  \"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import fixpath_prefix\n```\n\n```python\n\n\n```\n\n```python\nfixpath_prefix = None\ndef _NormalizedSource(source):\n  \"\"\"Normalize the path.\n  But not if that gets rid of a variable, as this may expand to something\n  larger than one directory.\n  Arguments:\n      source: The path to be normalize.d\n  Returns:\n      The normalized path.\n  \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quote_replacer_regex",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "quote_replacer_regex = re.compile(r'(\\\\*)\"')\ndef _EscapeCommandLineArgumentForMSVS(s):\n  \"\"\"Escapes a Windows command-line argument.\n  So that the Win32 CommandLineToArgv function will turn the escaped result back\n  into the original string.\n  See http://msdn.microsoft.com/en-us/library/17w5ykft.aspx\n  (\"Parsing C++ Command-Line Arguments\") to understand why we have to do\n  this.\n  Args:\n      s: the string to be escaped.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import quote_replacer_regex\n```\n\n```python\n\n\n```\n\n```python\nquote_replacer_regex = re.compile(r'(\\\\*)\"')\ndef _EscapeCommandLineArgumentForMSVS(s):\n  \"\"\"Escapes a Windows command-line argument.\n  So that the Win32 CommandLineToArgv function will turn the escaped result back\n  into the original string.\n  See http://msdn.microsoft.com/en-us/library/17w5ykft.aspx\n  (\"Parsing C++ Command-Line Arguments\") to understand why we have to do\n  this.\n  Args:\n      s: the string to be escaped.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "delimiters_replacer_regex",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "delimiters_replacer_regex = re.compile(r'(\\\\*)([,;]+)')\ndef _EscapeVCProjCommandLineArgListItem(s):\n  \"\"\"Escapes command line arguments for MSVS.\n  The VCProj format stores string lists in a single string using commas and\n  semi-colons as separators, which must be quoted if they are to be\n  interpreted literally. However, command-line arguments may already have\n  quotes, and the VCProj parser is ignorant of the backslash escaping\n  convention used by CommandLineToArgv, so the command-line quotes and the\n  VCProj quotes may not be the same quotes. So to store a general\n  command-line argument in a VCProj list, we need to parse the existing",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import delimiters_replacer_regex\n```\n\n```python\n\n\n```\n\n```python\ndelimiters_replacer_regex = re.compile(r'(\\\\*)([,;]+)')\ndef _EscapeVCProjCommandLineArgListItem(s):\n  \"\"\"Escapes command line arguments for MSVS.\n  The VCProj format stores string lists in a single string using commas and\n  semi-colons as separators, which must be quoted if they are to be\n  interpreted literally. However, command-line arguments may already have\n  quotes, and the VCProj parser is ignorant of the backslash escaping\n  convention used by CommandLineToArgv, so the command-line quotes and the\n  VCProj quotes may not be the same quotes. So to store a general\n  command-line argument in a VCProj list, we need to parse the existing\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quote_replacer_regex2",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "quote_replacer_regex2 = re.compile(r'(\\\\+)\"')\ndef _EscapeCommandLineArgumentForMSBuild(s):\n  \"\"\"Escapes a Windows command-line argument for use by MSBuild.\"\"\"\n  def _Replace(match):\n    return (len(match.group(1)) / 2 * 4) * '\\\\' + '\\\\\"'\n  # Escape all quotes so that they are interpreted literally.\n  s = quote_replacer_regex2.sub(_Replace, s)\n  return s\ndef _EscapeMSBuildSpecialCharacters(s):\n  escape_dictionary = {",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import quote_replacer_regex2\n```\n\n```python\n\n\n```\n\n```python\nquote_replacer_regex2 = re.compile(r'(\\\\+)\"')\ndef _EscapeCommandLineArgumentForMSBuild(s):\n  \"\"\"Escapes a Windows command-line argument for use by MSBuild.\"\"\"\n  def _Replace(match):\n    return (len(match.group(1)) / 2 * 4) * '\\\\' + '\\\\\"'\n  # Escape all quotes so that they are interpreted literally.\n  s = quote_replacer_regex2.sub(_Replace, s)\n  return s\ndef _EscapeMSBuildSpecialCharacters(s):\n  escape_dictionary = {\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MSVS_VARIABLE_REFERENCE",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "MSVS_VARIABLE_REFERENCE = re.compile(r'\\$\\(([a-zA-Z_][a-zA-Z0-9_]*)\\)')\ndef _GetMSBuildPropertyGroup(spec, label, properties):\n  \"\"\"Returns a PropertyGroup definition for the specified properties.\n  Arguments:\n    spec: The target project dict.\n    label: An optional label for the PropertyGroup.\n    properties: The dictionary to be converted.  The key is the name of the\n        property.  The value is itself a dictionary; its key is the value and\n        the value a list of condition for which this value is true.\n  \"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs import MSVS_VARIABLE_REFERENCE\n```\n\n```python\n\n\n```\n\n```python\nMSVS_VARIABLE_REFERENCE = re.compile(r'\\$\\(([a-zA-Z_][a-zA-Z0-9_]*)\\)')\ndef _GetMSBuildPropertyGroup(spec, label, properties):\n  \"\"\"Returns a PropertyGroup definition for the specified properties.\n  Arguments:\n    spec: The target project dict.\n    label: An optional label for the PropertyGroup.\n    properties: The dictionary to be converted.  The key is the name of the\n        property.  The value is itself a dictionary; its key is the value and\n        the value a list of condition for which this value is true.\n  \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestSequenceFunctions",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs_test",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs_test",
        "peekOfCode": "class TestSequenceFunctions(unittest.TestCase):\n  def setUp(self):\n    self.stderr = StringIO.StringIO()\n  def test_GetLibraries(self):\n    self.assertEqual(\n      msvs._GetLibraries({}),\n      [])\n    self.assertEqual(\n      msvs._GetLibraries({'libraries': []}),\n      [])",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.msvs_test",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.msvs_test import TestSequenceFunctions\n```\n\n```python\n\n\n```\n\n```python\nclass TestSequenceFunctions(unittest.TestCase):\n  def setUp(self):\n    self.stderr = StringIO.StringIO()\n  def test_GetLibraries(self):\n    self.assertEqual(\n      msvs._GetLibraries({}),\n      [])\n    self.assertEqual(\n      msvs._GetLibraries({'libraries': []}),\n      [])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Target",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "class Target(object):\n  \"\"\"Target represents the paths used within a single gyp target.\n  Conceptually, building a single target A is a series of steps:\n  1) actions/rules/copies  generates source/resources/etc.\n  2) compiles              generates .o files\n  3) link                  generates a binary (library/executable)\n  4) bundle                merges the above in a mac bundle\n  (Any of these steps can be optional.)\n  From a build ordering perspective, a dependent target B could just\n  depend on the last output of this series of steps.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import Target\n```\n\n```python\n\n\n```\n\n```python\nclass Target(object):\n  \"\"\"Target represents the paths used within a single gyp target.\n  Conceptually, building a single target A is a series of steps:\n  1) actions/rules/copies  generates source/resources/etc.\n  2) compiles              generates .o files\n  3) link                  generates a binary (library/executable)\n  4) bundle                merges the above in a mac bundle\n  (Any of these steps can be optional.)\n  From a build ordering perspective, a dependent target B could just\n  depend on the last output of this series of steps.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NinjaWriter",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "class NinjaWriter(object):\n  def __init__(self, hash_for_rules, target_outputs, base_dir, build_dir,\n               output_file, toplevel_build, output_file_name, flavor,\n               toplevel_dir=None):\n    \"\"\"\n    base_dir: path from source root to directory containing this gyp file,\n              by gyp semantics, all input paths are relative to this\n    build_dir: path from source root to build output\n    toplevel_dir: path to the toplevel directory\n    \"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import NinjaWriter\n```\n\n```python\n\n\n```\n\n```python\nclass NinjaWriter(object):\n  def __init__(self, hash_for_rules, target_outputs, base_dir, build_dir,\n               output_file, toplevel_build, output_file_name, flavor,\n               toplevel_dir=None):\n    \"\"\"\n    base_dir: path from source root to directory containing this gyp file,\n              by gyp semantics, all input paths are relative to this\n    build_dir: path from source root to build output\n    toplevel_dir: path to the toplevel directory\n    \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "StripPrefix",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def StripPrefix(arg, prefix):\n  if arg.startswith(prefix):\n    return arg[len(prefix):]\n  return arg\ndef QuoteShellArgument(arg, flavor):\n  \"\"\"Quote a string such that it will be interpreted as a single argument\n  by the shell.\"\"\"\n  # Rather than attempting to enumerate the bad shell characters, just\n  # whitelist common OK ones and quote anything else.\n  if re.match(r'^[a-zA-Z0-9_=.\\\\/-]+$', arg):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import StripPrefix\n```\n\n```python\n\n\n```\n\n```python\ndef StripPrefix(arg, prefix):\n  if arg.startswith(prefix):\n    return arg[len(prefix):]\n  return arg\ndef QuoteShellArgument(arg, flavor):\n  \"\"\"Quote a string such that it will be interpreted as a single argument\n  by the shell.\"\"\"\n  # Rather than attempting to enumerate the bad shell characters, just\n  # whitelist common OK ones and quote anything else.\n  if re.match(r'^[a-zA-Z0-9_=.\\\\/-]+$', arg):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "QuoteShellArgument",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def QuoteShellArgument(arg, flavor):\n  \"\"\"Quote a string such that it will be interpreted as a single argument\n  by the shell.\"\"\"\n  # Rather than attempting to enumerate the bad shell characters, just\n  # whitelist common OK ones and quote anything else.\n  if re.match(r'^[a-zA-Z0-9_=.\\\\/-]+$', arg):\n    return arg  # No quoting necessary.\n  if flavor == 'win':\n    return gyp.msvs_emulation.QuoteForRspFile(arg)\n  return \"'\" + arg.replace(\"'\", \"'\" + '\"\\'\"' + \"'\")  + \"'\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import QuoteShellArgument\n```\n\n```python\n\n\n```\n\n```python\ndef QuoteShellArgument(arg, flavor):\n  \"\"\"Quote a string such that it will be interpreted as a single argument\n  by the shell.\"\"\"\n  # Rather than attempting to enumerate the bad shell characters, just\n  # whitelist common OK ones and quote anything else.\n  if re.match(r'^[a-zA-Z0-9_=.\\\\/-]+$', arg):\n    return arg  # No quoting necessary.\n  if flavor == 'win':\n    return gyp.msvs_emulation.QuoteForRspFile(arg)\n  return \"'\" + arg.replace(\"'\", \"'\" + '\"\\'\"' + \"'\")  + \"'\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Define",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def Define(d, flavor):\n  \"\"\"Takes a preprocessor define and returns a -D parameter that's ninja- and\n  shell-escaped.\"\"\"\n  if flavor == 'win':\n    # cl.exe replaces literal # characters with = in preprocesor definitions for\n    # some reason. Octal-encode to work around that.\n    d = d.replace('#', '\\\\%03o' % ord('#'))\n  return QuoteShellArgument(ninja_syntax.escape('-D' + d), flavor)\ndef AddArch(output, arch):\n  \"\"\"Adds an arch string to an output path.\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import Define\n```\n\n```python\n\n\n```\n\n```python\ndef Define(d, flavor):\n  \"\"\"Takes a preprocessor define and returns a -D parameter that's ninja- and\n  shell-escaped.\"\"\"\n  if flavor == 'win':\n    # cl.exe replaces literal # characters with = in preprocesor definitions for\n    # some reason. Octal-encode to work around that.\n    d = d.replace('#', '\\\\%03o' % ord('#'))\n  return QuoteShellArgument(ninja_syntax.escape('-D' + d), flavor)\ndef AddArch(output, arch):\n  \"\"\"Adds an arch string to an output path.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AddArch",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def AddArch(output, arch):\n  \"\"\"Adds an arch string to an output path.\"\"\"\n  output, extension = os.path.splitext(output)\n  return '%s.%s%s' % (output, arch, extension)\nclass Target(object):\n  \"\"\"Target represents the paths used within a single gyp target.\n  Conceptually, building a single target A is a series of steps:\n  1) actions/rules/copies  generates source/resources/etc.\n  2) compiles              generates .o files\n  3) link                  generates a binary (library/executable)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import AddArch\n```\n\n```python\n\n\n```\n\n```python\ndef AddArch(output, arch):\n  \"\"\"Adds an arch string to an output path.\"\"\"\n  output, extension = os.path.splitext(output)\n  return '%s.%s%s' % (output, arch, extension)\nclass Target(object):\n  \"\"\"Target represents the paths used within a single gyp target.\n  Conceptually, building a single target A is a series of steps:\n  1) actions/rules/copies  generates source/resources/etc.\n  2) compiles              generates .o files\n  3) link                  generates a binary (library/executable)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  global generator_additional_non_configuration_keys\n  global generator_additional_path_sections\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n    default_variables.setdefault('SHARED_LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import CalculateVariables\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateVariables(default_variables, params):\n  \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n  global generator_additional_non_configuration_keys\n  global generator_additional_path_sections\n  flavor = gyp.common.GetFlavor(params)\n  if flavor == 'mac':\n    default_variables.setdefault('OS', 'mac')\n    default_variables.setdefault('SHARED_LIB_SUFFIX', '.dylib')\n    default_variables.setdefault('SHARED_LIB_DIR',\n                                 generator_default_variables['PRODUCT_DIR'])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ComputeOutputDir",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def ComputeOutputDir(params):\n  \"\"\"Returns the path from the toplevel_dir to the build output directory.\"\"\"\n  # generator_dir: relative path from pwd to where make puts build files.\n  # Makes migrating from make to ninja easier, ninja doesn't put anything here.\n  generator_dir = os.path.relpath(params['options'].generator_output or '.')\n  # output_dir: relative path from generator_dir to the build directory.\n  output_dir = params.get('generator_flags', {}).get('output_dir', 'out')\n  # Relative path from source root to our output files.  e.g. \"out\"\n  return os.path.normpath(os.path.join(generator_dir, output_dir))\ndef CalculateGeneratorInputInfo(params):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import ComputeOutputDir\n```\n\n```python\n\n\n```\n\n```python\ndef ComputeOutputDir(params):\n  \"\"\"Returns the path from the toplevel_dir to the build output directory.\"\"\"\n  # generator_dir: relative path from pwd to where make puts build files.\n  # Makes migrating from make to ninja easier, ninja doesn't put anything here.\n  generator_dir = os.path.relpath(params['options'].generator_output or '.')\n  # output_dir: relative path from generator_dir to the build directory.\n  output_dir = params.get('generator_flags', {}).get('output_dir', 'out')\n  # Relative path from source root to our output files.  e.g. \"out\"\n  return os.path.normpath(os.path.join(generator_dir, output_dir))\ndef CalculateGeneratorInputInfo(params):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateGeneratorInputInfo",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def CalculateGeneratorInputInfo(params):\n  \"\"\"Called by __init__ to initialize generator values based on params.\"\"\"\n  # E.g. \"out/gypfiles\"\n  toplevel = params['options'].toplevel_dir\n  qualified_out_dir = os.path.normpath(os.path.join(\n      toplevel, ComputeOutputDir(params), 'gypfiles'))\n  global generator_filelist_paths\n  generator_filelist_paths = {\n      'toplevel': toplevel,\n      'qualified_out_dir': qualified_out_dir,",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import CalculateGeneratorInputInfo\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateGeneratorInputInfo(params):\n  \"\"\"Called by __init__ to initialize generator values based on params.\"\"\"\n  # E.g. \"out/gypfiles\"\n  toplevel = params['options'].toplevel_dir\n  qualified_out_dir = os.path.normpath(os.path.join(\n      toplevel, ComputeOutputDir(params), 'gypfiles'))\n  global generator_filelist_paths\n  generator_filelist_paths = {\n      'toplevel': toplevel,\n      'qualified_out_dir': qualified_out_dir,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OpenOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def OpenOutput(path, mode='w'):\n  \"\"\"Open |path| for writing, creating directories if necessary.\"\"\"\n  gyp.common.EnsureDirExists(path)\n  return open(path, mode)\ndef CommandWithWrapper(cmd, wrappers, prog):\n  wrapper = wrappers.get(cmd, '')\n  if wrapper:\n    return wrapper + ' ' + prog\n  return prog\ndef GetDefaultConcurrentLinks():",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import OpenOutput\n```\n\n```python\n\n\n```\n\n```python\ndef OpenOutput(path, mode='w'):\n  \"\"\"Open |path| for writing, creating directories if necessary.\"\"\"\n  gyp.common.EnsureDirExists(path)\n  return open(path, mode)\ndef CommandWithWrapper(cmd, wrappers, prog):\n  wrapper = wrappers.get(cmd, '')\n  if wrapper:\n    return wrapper + ' ' + prog\n  return prog\ndef GetDefaultConcurrentLinks():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CommandWithWrapper",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def CommandWithWrapper(cmd, wrappers, prog):\n  wrapper = wrappers.get(cmd, '')\n  if wrapper:\n    return wrapper + ' ' + prog\n  return prog\ndef GetDefaultConcurrentLinks():\n  \"\"\"Returns a best-guess for a number of concurrent links.\"\"\"\n  pool_size = int(os.environ.get('GYP_LINK_CONCURRENCY', 0))\n  if pool_size:\n    return pool_size",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import CommandWithWrapper\n```\n\n```python\n\n\n```\n\n```python\ndef CommandWithWrapper(cmd, wrappers, prog):\n  wrapper = wrappers.get(cmd, '')\n  if wrapper:\n    return wrapper + ' ' + prog\n  return prog\ndef GetDefaultConcurrentLinks():\n  \"\"\"Returns a best-guess for a number of concurrent links.\"\"\"\n  pool_size = int(os.environ.get('GYP_LINK_CONCURRENCY', 0))\n  if pool_size:\n    return pool_size\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetDefaultConcurrentLinks",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def GetDefaultConcurrentLinks():\n  \"\"\"Returns a best-guess for a number of concurrent links.\"\"\"\n  pool_size = int(os.environ.get('GYP_LINK_CONCURRENCY', 0))\n  if pool_size:\n    return pool_size\n  if sys.platform in ('win32', 'cygwin'):\n    import ctypes\n    class MEMORYSTATUSEX(ctypes.Structure):\n      _fields_ = [\n        (\"dwLength\", ctypes.c_ulong),",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import GetDefaultConcurrentLinks\n```\n\n```python\n\n\n```\n\n```python\ndef GetDefaultConcurrentLinks():\n  \"\"\"Returns a best-guess for a number of concurrent links.\"\"\"\n  pool_size = int(os.environ.get('GYP_LINK_CONCURRENCY', 0))\n  if pool_size:\n    return pool_size\n  if sys.platform in ('win32', 'cygwin'):\n    import ctypes\n    class MEMORYSTATUSEX(ctypes.Structure):\n      _fields_ = [\n        (\"dwLength\", ctypes.c_ulong),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutputForConfig",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def GenerateOutputForConfig(target_list, target_dicts, data, params,\n                            config_name):\n  options = params['options']\n  flavor = gyp.common.GetFlavor(params)\n  generator_flags = params.get('generator_flags', {})\n  # build_dir: relative path from source root to our output files.\n  # e.g. \"out/Debug\"\n  build_dir = os.path.normpath(\n      os.path.join(ComputeOutputDir(params), config_name))\n  toplevel_build = os.path.join(options.toplevel_dir, build_dir)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import GenerateOutputForConfig\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutputForConfig(target_list, target_dicts, data, params,\n                            config_name):\n  options = params['options']\n  flavor = gyp.common.GetFlavor(params)\n  generator_flags = params.get('generator_flags', {})\n  # build_dir: relative path from source root to our output files.\n  # e.g. \"out/Debug\"\n  build_dir = os.path.normpath(\n      os.path.join(ComputeOutputDir(params), config_name))\n  toplevel_build = os.path.join(options.toplevel_dir, build_dir)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n  options = params['options']\n  for config in configurations:\n    builddir = os.path.join(options.toplevel_dir, 'out', config)\n    arguments = ['ninja', '-C', builddir]\n    print 'Building [%s]: %s' % (config, arguments)\n    subprocess.check_call(arguments)\ndef CallGenerateOutputForConfig(arglist):\n  # Ignore the interrupt signal so that the parent process catches it and\n  # kills all multiprocessing children.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import PerformBuild\n```\n\n```python\n\n\n```\n\n```python\ndef PerformBuild(data, configurations, params):\n  options = params['options']\n  for config in configurations:\n    builddir = os.path.join(options.toplevel_dir, 'out', config)\n    arguments = ['ninja', '-C', builddir]\n    print 'Building [%s]: %s' % (config, arguments)\n    subprocess.check_call(arguments)\ndef CallGenerateOutputForConfig(arglist):\n  # Ignore the interrupt signal so that the parent process catches it and\n  # kills all multiprocessing children.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CallGenerateOutputForConfig",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def CallGenerateOutputForConfig(arglist):\n  # Ignore the interrupt signal so that the parent process catches it and\n  # kills all multiprocessing children.\n  signal.signal(signal.SIGINT, signal.SIG_IGN)\n  (target_list, target_dicts, data, params, config_name) = arglist\n  GenerateOutputForConfig(target_list, target_dicts, data, params, config_name)\ndef GenerateOutput(target_list, target_dicts, data, params):\n  # Update target_dicts for iOS device builds.\n  target_dicts = gyp.xcode_emulation.CloneConfigurationForDeviceAndEmulator(\n      target_dicts)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import CallGenerateOutputForConfig\n```\n\n```python\n\n\n```\n\n```python\ndef CallGenerateOutputForConfig(arglist):\n  # Ignore the interrupt signal so that the parent process catches it and\n  # kills all multiprocessing children.\n  signal.signal(signal.SIGINT, signal.SIG_IGN)\n  (target_list, target_dicts, data, params, config_name) = arglist\n  GenerateOutputForConfig(target_list, target_dicts, data, params, config_name)\ndef GenerateOutput(target_list, target_dicts, data, params):\n  # Update target_dicts for iOS device builds.\n  target_dicts = gyp.xcode_emulation.CloneConfigurationForDeviceAndEmulator(\n      target_dicts)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n  # Update target_dicts for iOS device builds.\n  target_dicts = gyp.xcode_emulation.CloneConfigurationForDeviceAndEmulator(\n      target_dicts)\n  user_config = params.get('generator_flags', {}).get('config', None)\n  if gyp.common.GetFlavor(params) == 'win':\n    target_list, target_dicts = MSVSUtil.ShardTargets(target_list, target_dicts)\n    target_list, target_dicts = MSVSUtil.InsertLargePdbShims(\n        target_list, target_dicts, generator_default_variables)\n  if user_config:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import GenerateOutput\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutput(target_list, target_dicts, data, params):\n  # Update target_dicts for iOS device builds.\n  target_dicts = gyp.xcode_emulation.CloneConfigurationForDeviceAndEmulator(\n      target_dicts)\n  user_config = params.get('generator_flags', {}).get('config', None)\n  if gyp.common.GetFlavor(params) == 'win':\n    target_list, target_dicts = MSVSUtil.ShardTargets(target_list, target_dicts)\n    target_list, target_dicts = MSVSUtil.InsertLargePdbShims(\n        target_list, target_dicts, generator_default_variables)\n  if user_config:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "generator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'SHARED_LIB_PREFIX': 'lib',\n  # Gyp expects the following variables to be expandable by the build\n  # system to the appropriate locations.  Ninja prefers paths to be\n  # known at gyp time.  To resolve this, introduce special\n  # variables starting with $! and $| (which begin with a $ so gyp knows it",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import generator_default_variables\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'SHARED_LIB_PREFIX': 'lib',\n  # Gyp expects the following variables to be expandable by the build\n  # system to the appropriate locations.  Ninja prefers paths to be\n  # known at gyp time.  To resolve this, introduce special\n  # variables starting with $! and $| (which begin with a $ so gyp knows it\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_additional_non_configuration_keys",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "generator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n  if arg.startswith(prefix):\n    return arg[len(prefix):]\n  return arg\ndef QuoteShellArgument(arg, flavor):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import generator_additional_non_configuration_keys\n```\n\n```python\n\n\n```\n\n```python\ngenerator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n  if arg.startswith(prefix):\n    return arg[len(prefix):]\n  return arg\ndef QuoteShellArgument(arg, flavor):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_additional_path_sections",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "generator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n  if arg.startswith(prefix):\n    return arg[len(prefix):]\n  return arg\ndef QuoteShellArgument(arg, flavor):\n  \"\"\"Quote a string such that it will be interpreted as a single argument",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import generator_additional_path_sections\n```\n\n```python\n\n\n```\n\n```python\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n  if arg.startswith(prefix):\n    return arg[len(prefix):]\n  return arg\ndef QuoteShellArgument(arg, flavor):\n  \"\"\"Quote a string such that it will be interpreted as a single argument\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_extra_sources_for_rules",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "generator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n  if arg.startswith(prefix):\n    return arg[len(prefix):]\n  return arg\ndef QuoteShellArgument(arg, flavor):\n  \"\"\"Quote a string such that it will be interpreted as a single argument\n  by the shell.\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import generator_extra_sources_for_rules\n```\n\n```python\n\n\n```\n\n```python\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n  if arg.startswith(prefix):\n    return arg[len(prefix):]\n  return arg\ndef QuoteShellArgument(arg, flavor):\n  \"\"\"Quote a string such that it will be interpreted as a single argument\n  by the shell.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "generator_filelist_paths = None\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n  if arg.startswith(prefix):\n    return arg[len(prefix):]\n  return arg\ndef QuoteShellArgument(arg, flavor):\n  \"\"\"Quote a string such that it will be interpreted as a single argument\n  by the shell.\"\"\"\n  # Rather than attempting to enumerate the bad shell characters, just",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import generator_filelist_paths\n```\n\n```python\n\n\n```\n\n```python\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n  if arg.startswith(prefix):\n    return arg[len(prefix):]\n  return arg\ndef QuoteShellArgument(arg, flavor):\n  \"\"\"Quote a string such that it will be interpreted as a single argument\n  by the shell.\"\"\"\n  # Rather than attempting to enumerate the bad shell characters, just\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "generator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n  if arg.startswith(prefix):\n    return arg[len(prefix):]\n  return arg\ndef QuoteShellArgument(arg, flavor):\n  \"\"\"Quote a string such that it will be interpreted as a single argument\n  by the shell.\"\"\"\n  # Rather than attempting to enumerate the bad shell characters, just\n  # whitelist common OK ones and quote anything else.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja import generator_supports_multiple_toolsets\n```\n\n```python\n\n\n```\n\n```python\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n  if arg.startswith(prefix):\n    return arg[len(prefix):]\n  return arg\ndef QuoteShellArgument(arg, flavor):\n  \"\"\"Quote a string such that it will be interpreted as a single argument\n  by the shell.\"\"\"\n  # Rather than attempting to enumerate the bad shell characters, just\n  # whitelist common OK ones and quote anything else.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestPrefixesAndSuffixes",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja_test",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja_test",
        "peekOfCode": "class TestPrefixesAndSuffixes(unittest.TestCase):\n  def test_BinaryNamesWindows(self):\n    # These cannot run on non-Windows as they require a VS installation to\n    # correctly handle variable expansion.\n    if sys.platform.startswith('win'):\n      writer = ninja.NinjaWriter('foo', 'wee', '.', '.', 'build.ninja', '.',\n          'build.ninja', 'win')\n      spec = { 'target_name': 'wee' }\n      self.assertTrue(writer.ComputeOutputFileName(spec, 'executable').\n          endswith('.exe'))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.ninja_test",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.ninja_test import TestPrefixesAndSuffixes\n```\n\n```python\n\n\n```\n\n```python\nclass TestPrefixesAndSuffixes(unittest.TestCase):\n  def test_BinaryNamesWindows(self):\n    # These cannot run on non-Windows as they require a VS installation to\n    # correctly handle variable expansion.\n    if sys.platform.startswith('win'):\n      writer = ninja.NinjaWriter('foo', 'wee', '.', '.', 'build.ninja', '.',\n          'build.ninja', 'win')\n      spec = { 'target_name': 'wee' }\n      self.assertTrue(writer.ComputeOutputFileName(spec, 'executable').\n          endswith('.exe'))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XcodeProject",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "class XcodeProject(object):\n  def __init__(self, gyp_path, path, build_file_dict):\n    self.gyp_path = gyp_path\n    self.path = path\n    self.project = gyp.xcodeproj_file.PBXProject(path=path)\n    projectDirPath = gyp.common.RelativePath(\n                         os.path.dirname(os.path.abspath(self.gyp_path)),\n                         os.path.dirname(path) or '.')\n    self.project.SetProperty('projectDirPath', projectDirPath)\n    self.project_file = \\",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import XcodeProject\n```\n\n```python\n\n\n```\n\n```python\nclass XcodeProject(object):\n  def __init__(self, gyp_path, path, build_file_dict):\n    self.gyp_path = gyp_path\n    self.path = path\n    self.project = gyp.xcodeproj_file.PBXProject(path=path)\n    projectDirPath = gyp.common.RelativePath(\n                         os.path.dirname(os.path.abspath(self.gyp_path)),\n                         os.path.dirname(path) or '.')\n    self.project.SetProperty('projectDirPath', projectDirPath)\n    self.project_file = \\\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CreateXCConfigurationList",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def CreateXCConfigurationList(configuration_names):\n  xccl = gyp.xcodeproj_file.XCConfigurationList({'buildConfigurations': []})\n  if len(configuration_names) == 0:\n    configuration_names = ['Default']\n  for configuration_name in configuration_names:\n    xcbc = gyp.xcodeproj_file.XCBuildConfiguration({\n        'name': configuration_name})\n    xccl.AppendProperty('buildConfigurations', xcbc)\n  xccl.SetProperty('defaultConfigurationName', configuration_names[0])\n  return xccl",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import CreateXCConfigurationList\n```\n\n```python\n\n\n```\n\n```python\ndef CreateXCConfigurationList(configuration_names):\n  xccl = gyp.xcodeproj_file.XCConfigurationList({'buildConfigurations': []})\n  if len(configuration_names) == 0:\n    configuration_names = ['Default']\n  for configuration_name in configuration_names:\n    xcbc = gyp.xcodeproj_file.XCBuildConfiguration({\n        'name': configuration_name})\n    xccl.AppendProperty('buildConfigurations', xcbc)\n  xccl.SetProperty('defaultConfigurationName', configuration_names[0])\n  return xccl\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AddSourceToTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def AddSourceToTarget(source, type, pbxp, xct):\n  # TODO(mark): Perhaps source_extensions and library_extensions can be made a\n  # little bit fancier.\n  source_extensions = ['c', 'cc', 'cpp', 'cxx', 'm', 'mm', 's', 'swift']\n  # .o is conceptually more of a \"source\" than a \"library,\" but Xcode thinks\n  # of \"sources\" as things to compile and \"libraries\" (or \"frameworks\") as\n  # things to link with. Adding an object file to an Xcode target's frameworks\n  # phase works properly.\n  library_extensions = ['a', 'dylib', 'framework', 'o']\n  basename = posixpath.basename(source)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import AddSourceToTarget\n```\n\n```python\n\n\n```\n\n```python\ndef AddSourceToTarget(source, type, pbxp, xct):\n  # TODO(mark): Perhaps source_extensions and library_extensions can be made a\n  # little bit fancier.\n  source_extensions = ['c', 'cc', 'cpp', 'cxx', 'm', 'mm', 's', 'swift']\n  # .o is conceptually more of a \"source\" than a \"library,\" but Xcode thinks\n  # of \"sources\" as things to compile and \"libraries\" (or \"frameworks\") as\n  # things to link with. Adding an object file to an Xcode target's frameworks\n  # phase works properly.\n  library_extensions = ['a', 'dylib', 'framework', 'o']\n  basename = posixpath.basename(source)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AddResourceToTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def AddResourceToTarget(resource, pbxp, xct):\n  # TODO(mark): Combine with AddSourceToTarget above?  Or just inline this call\n  # where it's used.\n  xct.ResourcesPhase().AddFile(resource)\ndef AddHeaderToTarget(header, pbxp, xct, is_public):\n  # TODO(mark): Combine with AddSourceToTarget above?  Or just inline this call\n  # where it's used.\n  settings = '{ATTRIBUTES = (%s, ); }' % ('Private', 'Public')[is_public]\n  xct.HeadersPhase().AddFile(header, settings)\n_xcode_variable_re = re.compile(r'(\\$\\((.*?)\\))')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import AddResourceToTarget\n```\n\n```python\n\n\n```\n\n```python\ndef AddResourceToTarget(resource, pbxp, xct):\n  # TODO(mark): Combine with AddSourceToTarget above?  Or just inline this call\n  # where it's used.\n  xct.ResourcesPhase().AddFile(resource)\ndef AddHeaderToTarget(header, pbxp, xct, is_public):\n  # TODO(mark): Combine with AddSourceToTarget above?  Or just inline this call\n  # where it's used.\n  settings = '{ATTRIBUTES = (%s, ); }' % ('Private', 'Public')[is_public]\n  xct.HeadersPhase().AddFile(header, settings)\n_xcode_variable_re = re.compile(r'(\\$\\((.*?)\\))')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AddHeaderToTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def AddHeaderToTarget(header, pbxp, xct, is_public):\n  # TODO(mark): Combine with AddSourceToTarget above?  Or just inline this call\n  # where it's used.\n  settings = '{ATTRIBUTES = (%s, ); }' % ('Private', 'Public')[is_public]\n  xct.HeadersPhase().AddFile(header, settings)\n_xcode_variable_re = re.compile(r'(\\$\\((.*?)\\))')\ndef ExpandXcodeVariables(string, expansions):\n  \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import AddHeaderToTarget\n```\n\n```python\n\n\n```\n\n```python\ndef AddHeaderToTarget(header, pbxp, xct, is_public):\n  # TODO(mark): Combine with AddSourceToTarget above?  Or just inline this call\n  # where it's used.\n  settings = '{ATTRIBUTES = (%s, ); }' % ('Private', 'Public')[is_public]\n  xct.HeadersPhase().AddFile(header, settings)\n_xcode_variable_re = re.compile(r'(\\$\\((.*?)\\))')\ndef ExpandXcodeVariables(string, expansions):\n  \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ExpandXcodeVariables",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def ExpandXcodeVariables(string, expansions):\n  \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n  key in the expansions dict, $(VAR) will be replaced with expansions[VAR].\n  Any $(VAR) substring in string for which VAR is not a key in the expansions\n  dict will remain in the returned string.\n  \"\"\"\n  matches = _xcode_variable_re.findall(string)\n  if matches == None:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import ExpandXcodeVariables\n```\n\n```python\n\n\n```\n\n```python\ndef ExpandXcodeVariables(string, expansions):\n  \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n  key in the expansions dict, $(VAR) will be replaced with expansions[VAR].\n  Any $(VAR) substring in string for which VAR is not a key in the expansions\n  dict will remain in the returned string.\n  \"\"\"\n  matches = _xcode_variable_re.findall(string)\n  if matches == None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EscapeXcodeDefine",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def EscapeXcodeDefine(s):\n  \"\"\"We must escape the defines that we give to XCode so that it knows not to\n     split on spaces and to respect backslash and quote literals. However, we\n     must not quote the define, or Xcode will incorrectly intepret variables\n     especially $(inherited).\"\"\"\n  return re.sub(_xcode_define_re, r'\\\\\\1', s)\ndef PerformBuild(data, configurations, params):\n  options = params['options']\n  for build_file, build_file_dict in data.iteritems():\n    (build_file_root, build_file_ext) = os.path.splitext(build_file)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import EscapeXcodeDefine\n```\n\n```python\n\n\n```\n\n```python\ndef EscapeXcodeDefine(s):\n  \"\"\"We must escape the defines that we give to XCode so that it knows not to\n     split on spaces and to respect backslash and quote literals. However, we\n     must not quote the define, or Xcode will incorrectly intepret variables\n     especially $(inherited).\"\"\"\n  return re.sub(_xcode_define_re, r'\\\\\\1', s)\ndef PerformBuild(data, configurations, params):\n  options = params['options']\n  for build_file, build_file_dict in data.iteritems():\n    (build_file_root, build_file_ext) = os.path.splitext(build_file)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n  options = params['options']\n  for build_file, build_file_dict in data.iteritems():\n    (build_file_root, build_file_ext) = os.path.splitext(build_file)\n    if build_file_ext != '.gyp':\n      continue\n    xcodeproj_path = build_file_root + options.suffix + '.xcodeproj'\n    if options.generator_output:\n      xcodeproj_path = os.path.join(options.generator_output, xcodeproj_path)\n  for config in configurations:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import PerformBuild\n```\n\n```python\n\n\n```\n\n```python\ndef PerformBuild(data, configurations, params):\n  options = params['options']\n  for build_file, build_file_dict in data.iteritems():\n    (build_file_root, build_file_ext) = os.path.splitext(build_file)\n    if build_file_ext != '.gyp':\n      continue\n    xcodeproj_path = build_file_root + options.suffix + '.xcodeproj'\n    if options.generator_output:\n      xcodeproj_path = os.path.join(options.generator_output, xcodeproj_path)\n  for config in configurations:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateGeneratorInputInfo",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def CalculateGeneratorInputInfo(params):\n  toplevel = params['options'].toplevel_dir\n  if params.get('flavor') == 'ninja':\n    generator_dir = os.path.relpath(params['options'].generator_output or '.')\n    output_dir = params.get('generator_flags', {}).get('output_dir', 'out')\n    output_dir = os.path.normpath(os.path.join(generator_dir, output_dir))\n    qualified_out_dir = os.path.normpath(os.path.join(\n        toplevel, output_dir, 'gypfiles-xcode-ninja'))\n  else:\n    output_dir = os.path.normpath(os.path.join(toplevel, 'xcodebuild'))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import CalculateGeneratorInputInfo\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateGeneratorInputInfo(params):\n  toplevel = params['options'].toplevel_dir\n  if params.get('flavor') == 'ninja':\n    generator_dir = os.path.relpath(params['options'].generator_output or '.')\n    output_dir = params.get('generator_flags', {}).get('output_dir', 'out')\n    output_dir = os.path.normpath(os.path.join(generator_dir, output_dir))\n    qualified_out_dir = os.path.normpath(os.path.join(\n        toplevel, output_dir, 'gypfiles-xcode-ninja'))\n  else:\n    output_dir = os.path.normpath(os.path.join(toplevel, 'xcodebuild'))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n  # Optionally configure each spec to use ninja as the external builder.\n  ninja_wrapper = params.get('flavor') == 'ninja'\n  if ninja_wrapper:\n    (target_list, target_dicts, data) = \\\n        gyp.xcode_ninja.CreateWrapper(target_list, target_dicts, data, params)\n  options = params['options']\n  generator_flags = params.get('generator_flags', {})\n  parallel_builds = generator_flags.get('xcode_parallel_builds', True)\n  serialize_all_tests = \\",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import GenerateOutput\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutput(target_list, target_dicts, data, params):\n  # Optionally configure each spec to use ninja as the external builder.\n  ninja_wrapper = params.get('flavor') == 'ninja'\n  if ninja_wrapper:\n    (target_list, target_dicts, data) = \\\n        gyp.xcode_ninja.CreateWrapper(target_list, target_dicts, data, params)\n  options = params['options']\n  generator_flags = params.get('generator_flags', {})\n  parallel_builds = generator_flags.get('xcode_parallel_builds', True)\n  serialize_all_tests = \\\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_intermediate_var",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "_intermediate_var = 'INTERMEDIATE_DIR'\n# SHARED_INTERMEDIATE_DIR is the same, except that it is shared among all\n# targets that share the same BUILT_PRODUCTS_DIR.\n_shared_intermediate_var = 'SHARED_INTERMEDIATE_DIR'\n_library_search_paths_var = 'LIBRARY_SEARCH_PATHS'\ngenerator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import _intermediate_var\n```\n\n```python\n\n\n```\n\n```python\n_intermediate_var = 'INTERMEDIATE_DIR'\n# SHARED_INTERMEDIATE_DIR is the same, except that it is shared among all\n# targets that share the same BUILT_PRODUCTS_DIR.\n_shared_intermediate_var = 'SHARED_INTERMEDIATE_DIR'\n_library_search_paths_var = 'LIBRARY_SEARCH_PATHS'\ngenerator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_shared_intermediate_var",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "_shared_intermediate_var = 'SHARED_INTERMEDIATE_DIR'\n_library_search_paths_var = 'LIBRARY_SEARCH_PATHS'\ngenerator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'SHARED_LIB_SUFFIX': '.dylib',\n  # INTERMEDIATE_DIR is a place for targets to build up intermediate products.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import _shared_intermediate_var\n```\n\n```python\n\n\n```\n\n```python\n_shared_intermediate_var = 'SHARED_INTERMEDIATE_DIR'\n_library_search_paths_var = 'LIBRARY_SEARCH_PATHS'\ngenerator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'SHARED_LIB_SUFFIX': '.dylib',\n  # INTERMEDIATE_DIR is a place for targets to build up intermediate products.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_library_search_paths_var",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "_library_search_paths_var = 'LIBRARY_SEARCH_PATHS'\ngenerator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'SHARED_LIB_SUFFIX': '.dylib',\n  # INTERMEDIATE_DIR is a place for targets to build up intermediate products.\n  # It is specific to each build environment.  It is only guaranteed to exist",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import _library_search_paths_var\n```\n\n```python\n\n\n```\n\n```python\n_library_search_paths_var = 'LIBRARY_SEARCH_PATHS'\ngenerator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'SHARED_LIB_SUFFIX': '.dylib',\n  # INTERMEDIATE_DIR is a place for targets to build up intermediate products.\n  # It is specific to each build environment.  It is only guaranteed to exist\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "generator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'SHARED_LIB_SUFFIX': '.dylib',\n  # INTERMEDIATE_DIR is a place for targets to build up intermediate products.\n  # It is specific to each build environment.  It is only guaranteed to exist\n  # and be constant within the context of a project, corresponding to a single",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import generator_default_variables\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables = {\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'STATIC_LIB_PREFIX': 'lib',\n  'SHARED_LIB_PREFIX': 'lib',\n  'STATIC_LIB_SUFFIX': '.a',\n  'SHARED_LIB_SUFFIX': '.dylib',\n  # INTERMEDIATE_DIR is a place for targets to build up intermediate products.\n  # It is specific to each build environment.  It is only guaranteed to exist\n  # and be constant within the context of a project, corresponding to a single\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_additional_path_sections",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "generator_additional_path_sections = [\n  'mac_bundle_resources',\n  'mac_framework_headers',\n  'mac_framework_private_headers',\n  # 'mac_framework_dirs', input already handles _dirs endings.\n]\n# The Xcode-specific keys that exist on targets and aren't moved down to\n# configurations.\ngenerator_additional_non_configuration_keys = [\n  'ios_app_extension',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import generator_additional_path_sections\n```\n\n```python\n\n\n```\n\n```python\ngenerator_additional_path_sections = [\n  'mac_bundle_resources',\n  'mac_framework_headers',\n  'mac_framework_private_headers',\n  # 'mac_framework_dirs', input already handles _dirs endings.\n]\n# The Xcode-specific keys that exist on targets and aren't moved down to\n# configurations.\ngenerator_additional_non_configuration_keys = [\n  'ios_app_extension',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_additional_non_configuration_keys",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "generator_additional_non_configuration_keys = [\n  'ios_app_extension',\n  'ios_watch_app',\n  'ios_watchkit_extension',\n  'mac_bundle',\n  'mac_bundle_resources',\n  'mac_framework_headers',\n  'mac_framework_private_headers',\n  'mac_xctest_bundle',\n  'xcode_create_dependents_test_runner',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import generator_additional_non_configuration_keys\n```\n\n```python\n\n\n```\n\n```python\ngenerator_additional_non_configuration_keys = [\n  'ios_app_extension',\n  'ios_watch_app',\n  'ios_watchkit_extension',\n  'mac_bundle',\n  'mac_bundle_resources',\n  'mac_framework_headers',\n  'mac_framework_private_headers',\n  'mac_xctest_bundle',\n  'xcode_create_dependents_test_runner',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_extra_sources_for_rules",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "generator_extra_sources_for_rules = [\n  'mac_bundle_resources',\n  'mac_framework_headers',\n  'mac_framework_private_headers',\n]\ngenerator_filelist_paths = None\n# Xcode's standard set of library directories, which don't need to be duplicated\n# in LIBRARY_SEARCH_PATHS. This list is not exhaustive, but that's okay.\nxcode_standard_library_dirs = frozenset([\n  '$(SDKROOT)/usr/lib',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import generator_extra_sources_for_rules\n```\n\n```python\n\n\n```\n\n```python\ngenerator_extra_sources_for_rules = [\n  'mac_bundle_resources',\n  'mac_framework_headers',\n  'mac_framework_private_headers',\n]\ngenerator_filelist_paths = None\n# Xcode's standard set of library directories, which don't need to be duplicated\n# in LIBRARY_SEARCH_PATHS. This list is not exhaustive, but that's okay.\nxcode_standard_library_dirs = frozenset([\n  '$(SDKROOT)/usr/lib',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "generator_filelist_paths = None\n# Xcode's standard set of library directories, which don't need to be duplicated\n# in LIBRARY_SEARCH_PATHS. This list is not exhaustive, but that's okay.\nxcode_standard_library_dirs = frozenset([\n  '$(SDKROOT)/usr/lib',\n  '$(SDKROOT)/usr/local/lib',\n])\ndef CreateXCConfigurationList(configuration_names):\n  xccl = gyp.xcodeproj_file.XCConfigurationList({'buildConfigurations': []})\n  if len(configuration_names) == 0:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import generator_filelist_paths\n```\n\n```python\n\n\n```\n\n```python\ngenerator_filelist_paths = None\n# Xcode's standard set of library directories, which don't need to be duplicated\n# in LIBRARY_SEARCH_PATHS. This list is not exhaustive, but that's okay.\nxcode_standard_library_dirs = frozenset([\n  '$(SDKROOT)/usr/lib',\n  '$(SDKROOT)/usr/local/lib',\n])\ndef CreateXCConfigurationList(configuration_names):\n  xccl = gyp.xcodeproj_file.XCConfigurationList({'buildConfigurations': []})\n  if len(configuration_names) == 0:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "xcode_standard_library_dirs",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "xcode_standard_library_dirs = frozenset([\n  '$(SDKROOT)/usr/lib',\n  '$(SDKROOT)/usr/local/lib',\n])\ndef CreateXCConfigurationList(configuration_names):\n  xccl = gyp.xcodeproj_file.XCConfigurationList({'buildConfigurations': []})\n  if len(configuration_names) == 0:\n    configuration_names = ['Default']\n  for configuration_name in configuration_names:\n    xcbc = gyp.xcodeproj_file.XCBuildConfiguration({",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import xcode_standard_library_dirs\n```\n\n```python\n\n\n```\n\n```python\nxcode_standard_library_dirs = frozenset([\n  '$(SDKROOT)/usr/lib',\n  '$(SDKROOT)/usr/local/lib',\n])\ndef CreateXCConfigurationList(configuration_names):\n  xccl = gyp.xcodeproj_file.XCConfigurationList({'buildConfigurations': []})\n  if len(configuration_names) == 0:\n    configuration_names = ['Default']\n  for configuration_name in configuration_names:\n    xcbc = gyp.xcodeproj_file.XCBuildConfiguration({\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "file = open('$TMPDIR/GYP_serialize_test_runs', 'a')\nfcntl.flock(file.fileno(), fcntl.LOCK_EX)\nsys.exit(subprocess.call(sys.argv[1:]))\" \"\"\"\n        # If we were unable to exec for some reason, we want to exit\n        # with an error, and fixup variable references to be shell\n        # syntax instead of xcode syntax.\n        script = script + 'exec ' + command_prefix + '%s\\nexit 1\\n' % \\\n                 gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n                     gyp.common.EncodePOSIXShellList(command.get('action')))\n        ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase({",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import file\n```\n\n```python\n\n\n```\n\n```python\nfile = open('$TMPDIR/GYP_serialize_test_runs', 'a')\nfcntl.flock(file.fileno(), fcntl.LOCK_EX)\nsys.exit(subprocess.call(sys.argv[1:]))\" \"\"\"\n        # If we were unable to exec for some reason, we want to exit\n        # with an error, and fixup variable references to be shell\n        # syntax instead of xcode syntax.\n        script = script + 'exec ' + command_prefix + '%s\\nexit 1\\n' % \\\n                 gyp.xcodeproj_file.ConvertVariablesToShellSyntax(\n                     gyp.common.EncodePOSIXShellList(command.get('action')))\n        ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase({\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_xcode_variable_re",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "_xcode_variable_re = re.compile(r'(\\$\\((.*?)\\))')\ndef ExpandXcodeVariables(string, expansions):\n  \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n  key in the expansions dict, $(VAR) will be replaced with expansions[VAR].\n  Any $(VAR) substring in string for which VAR is not a key in the expansions\n  dict will remain in the returned string.\n  \"\"\"\n  matches = _xcode_variable_re.findall(string)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import _xcode_variable_re\n```\n\n```python\n\n\n```\n\n```python\n_xcode_variable_re = re.compile(r'(\\$\\((.*?)\\))')\ndef ExpandXcodeVariables(string, expansions):\n  \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n  key in the expansions dict, $(VAR) will be replaced with expansions[VAR].\n  Any $(VAR) substring in string for which VAR is not a key in the expansions\n  dict will remain in the returned string.\n  \"\"\"\n  matches = _xcode_variable_re.findall(string)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_xcode_define_re",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "_xcode_define_re = re.compile(r'([\\\\\\\"\\' ])')\ndef EscapeXcodeDefine(s):\n  \"\"\"We must escape the defines that we give to XCode so that it knows not to\n     split on spaces and to respect backslash and quote literals. However, we\n     must not quote the define, or Xcode will incorrectly intepret variables\n     especially $(inherited).\"\"\"\n  return re.sub(_xcode_define_re, r'\\\\\\1', s)\ndef PerformBuild(data, configurations, params):\n  options = params['options']\n  for build_file, build_file_dict in data.iteritems():",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode import _xcode_define_re\n```\n\n```python\n\n\n```\n\n```python\n_xcode_define_re = re.compile(r'([\\\\\\\"\\' ])')\ndef EscapeXcodeDefine(s):\n  \"\"\"We must escape the defines that we give to XCode so that it knows not to\n     split on spaces and to respect backslash and quote literals. However, we\n     must not quote the define, or Xcode will incorrectly intepret variables\n     especially $(inherited).\"\"\"\n  return re.sub(_xcode_define_re, r'\\\\\\1', s)\ndef PerformBuild(data, configurations, params):\n  options = params['options']\n  for build_file, build_file_dict in data.iteritems():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestEscapeXcodeDefine",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode_test",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode_test",
        "peekOfCode": "class TestEscapeXcodeDefine(unittest.TestCase):\n  if sys.platform == 'darwin':\n    def test_InheritedRemainsUnescaped(self):\n      self.assertEqual(xcode.EscapeXcodeDefine('$(inherited)'), '$(inherited)')\n    def test_Escaping(self):\n      self.assertEqual(xcode.EscapeXcodeDefine('a b\"c\\\\'), 'a\\\\ b\\\\\"c\\\\\\\\')\nif __name__ == '__main__':\n  unittest.main()",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.generator.xcode_test",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.generator.xcode_test import TestEscapeXcodeDefine\n```\n\n```python\n\n\n```\n\n```python\nclass TestEscapeXcodeDefine(unittest.TestCase):\n  if sys.platform == 'darwin':\n    def test_InheritedRemainsUnescaped(self):\n      self.assertEqual(xcode.EscapeXcodeDefine('$(inherited)'), '$(inherited)')\n    def test_Escaping(self):\n      self.assertEqual(xcode.EscapeXcodeDefine('a b\"c\\\\'), 'a\\\\ b\\\\\"c\\\\\\\\')\nif __name__ == '__main__':\n  unittest.main()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MSVSSolutionEntry",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "class MSVSSolutionEntry(object):\n  def __cmp__(self, other):\n    # Sort by name then guid (so things are in order on vs2008).\n    return cmp((self.name, self.get_guid()), (other.name, other.get_guid()))\nclass MSVSFolder(MSVSSolutionEntry):\n  \"\"\"Folder in a Visual Studio project or solution.\"\"\"\n  def __init__(self, path, name = None, entries = None,\n               guid = None, items = None):\n    \"\"\"Initializes the folder.\n    Args:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSNew import MSVSSolutionEntry\n```\n\n```python\n\n\n```\n\n```python\nclass MSVSSolutionEntry(object):\n  def __cmp__(self, other):\n    # Sort by name then guid (so things are in order on vs2008).\n    return cmp((self.name, self.get_guid()), (other.name, other.get_guid()))\nclass MSVSFolder(MSVSSolutionEntry):\n  \"\"\"Folder in a Visual Studio project or solution.\"\"\"\n  def __init__(self, path, name = None, entries = None,\n               guid = None, items = None):\n    \"\"\"Initializes the folder.\n    Args:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MSVSFolder",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "class MSVSFolder(MSVSSolutionEntry):\n  \"\"\"Folder in a Visual Studio project or solution.\"\"\"\n  def __init__(self, path, name = None, entries = None,\n               guid = None, items = None):\n    \"\"\"Initializes the folder.\n    Args:\n      path: Full path to the folder.\n      name: Name of the folder.\n      entries: List of folder entries to nest inside this folder.  May contain\n          Folder or Project objects.  May be None, if the folder is empty.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSNew import MSVSFolder\n```\n\n```python\n\n\n```\n\n```python\nclass MSVSFolder(MSVSSolutionEntry):\n  \"\"\"Folder in a Visual Studio project or solution.\"\"\"\n  def __init__(self, path, name = None, entries = None,\n               guid = None, items = None):\n    \"\"\"Initializes the folder.\n    Args:\n      path: Full path to the folder.\n      name: Name of the folder.\n      entries: List of folder entries to nest inside this folder.  May contain\n          Folder or Project objects.  May be None, if the folder is empty.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MSVSProject",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "class MSVSProject(MSVSSolutionEntry):\n  \"\"\"Visual Studio project.\"\"\"\n  def __init__(self, path, name = None, dependencies = None, guid = None,\n               spec = None, build_file = None, config_platform_overrides = None,\n               fixpath_prefix = None):\n    \"\"\"Initializes the project.\n    Args:\n      path: Absolute path to the project file.\n      name: Name of project.  If None, the name will be the same as the base\n          name of the project file.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSNew import MSVSProject\n```\n\n```python\n\n\n```\n\n```python\nclass MSVSProject(MSVSSolutionEntry):\n  \"\"\"Visual Studio project.\"\"\"\n  def __init__(self, path, name = None, dependencies = None, guid = None,\n               spec = None, build_file = None, config_platform_overrides = None,\n               fixpath_prefix = None):\n    \"\"\"Initializes the project.\n    Args:\n      path: Absolute path to the project file.\n      name: Name of project.  If None, the name will be the same as the base\n          name of the project file.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MSVSSolution",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "class MSVSSolution(object):\n  \"\"\"Visual Studio solution.\"\"\"\n  def __init__(self, path, version, entries=None, variants=None,\n               websiteProperties=True):\n    \"\"\"Initializes the solution.\n    Args:\n      path: Path to solution file.\n      version: Format version to emit.\n      entries: List of entries in solution.  May contain Folder or Project\n          objects.  May be None, if the folder is empty.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSNew import MSVSSolution\n```\n\n```python\n\n\n```\n\n```python\nclass MSVSSolution(object):\n  \"\"\"Visual Studio solution.\"\"\"\n  def __init__(self, path, version, entries=None, variants=None,\n               websiteProperties=True):\n    \"\"\"Initializes the solution.\n    Args:\n      path: Path to solution file.\n      version: Format version to emit.\n      entries: List of entries in solution.  May contain Folder or Project\n          objects.  May be None, if the folder is empty.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MakeGuid",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "def MakeGuid(name, seed='msvs_new'):\n  \"\"\"Returns a GUID for the specified target name.\n  Args:\n    name: Target name.\n    seed: Seed for MD5 hash.\n  Returns:\n    A GUID-line string calculated from the name and seed.\n  This generates something which looks like a GUID, but depends only on the\n  name and seed.  This means the same name/seed will always generate the same\n  GUID, so that projects and solutions which refer to each other can explicitly",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSNew import MakeGuid\n```\n\n```python\n\n\n```\n\n```python\ndef MakeGuid(name, seed='msvs_new'):\n  \"\"\"Returns a GUID for the specified target name.\n  Args:\n    name: Target name.\n    seed: Seed for MD5 hash.\n  Returns:\n    A GUID-line string calculated from the name and seed.\n  This generates something which looks like a GUID, but depends only on the\n  name and seed.  This means the same name/seed will always generate the same\n  GUID, so that projects and solutions which refer to each other can explicitly\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ENTRY_TYPE_GUIDS",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "ENTRY_TYPE_GUIDS = {\n    'project': '{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}',\n    'folder': '{2150E333-8FDC-42A3-9474-1A3956D46DE8}',\n}\n#------------------------------------------------------------------------------\n# Helper functions\ndef MakeGuid(name, seed='msvs_new'):\n  \"\"\"Returns a GUID for the specified target name.\n  Args:\n    name: Target name.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSNew import ENTRY_TYPE_GUIDS\n```\n\n```python\n\n\n```\n\n```python\nENTRY_TYPE_GUIDS = {\n    'project': '{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}',\n    'folder': '{2150E333-8FDC-42A3-9474-1A3956D46DE8}',\n}\n#------------------------------------------------------------------------------\n# Helper functions\ndef MakeGuid(name, seed='msvs_new'):\n  \"\"\"Returns a GUID for the specified target name.\n  Args:\n    name: Target name.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Tool",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "peekOfCode": "class Tool(object):\n  \"\"\"Visual Studio tool.\"\"\"\n  def __init__(self, name, attrs=None):\n    \"\"\"Initializes the tool.\n    Args:\n      name: Tool name.\n      attrs: Dict of tool attributes; may be None.\n    \"\"\"\n    self._attrs = attrs or {}\n    self._attrs['Name'] = name",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSProject import Tool\n```\n\n```python\n\n\n```\n\n```python\nclass Tool(object):\n  \"\"\"Visual Studio tool.\"\"\"\n  def __init__(self, name, attrs=None):\n    \"\"\"Initializes the tool.\n    Args:\n      name: Tool name.\n      attrs: Dict of tool attributes; may be None.\n    \"\"\"\n    self._attrs = attrs or {}\n    self._attrs['Name'] = name\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Filter",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "peekOfCode": "class Filter(object):\n  \"\"\"Visual Studio filter - that is, a virtual folder.\"\"\"\n  def __init__(self, name, contents=None):\n    \"\"\"Initializes the folder.\n    Args:\n      name: Filter (folder) name.\n      contents: List of filenames and/or Filter objects contained.\n    \"\"\"\n    self.name = name\n    self.contents = list(contents or [])",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSProject import Filter\n```\n\n```python\n\n\n```\n\n```python\nclass Filter(object):\n  \"\"\"Visual Studio filter - that is, a virtual folder.\"\"\"\n  def __init__(self, name, contents=None):\n    \"\"\"Initializes the folder.\n    Args:\n      name: Filter (folder) name.\n      contents: List of filenames and/or Filter objects contained.\n    \"\"\"\n    self.name = name\n    self.contents = list(contents or [])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Writer",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "peekOfCode": "class Writer(object):\n  \"\"\"Visual Studio XML project writer.\"\"\"\n  def __init__(self, project_path, version, name, guid=None, platforms=None):\n    \"\"\"Initializes the project.\n    Args:\n      project_path: Path to the project file.\n      version: Format version to emit.\n      name: Name of the project.\n      guid: GUID to use for project, if not None.\n      platforms: Array of string, the supported platforms.  If null, ['Win32']",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSProject import Writer\n```\n\n```python\n\n\n```\n\n```python\nclass Writer(object):\n  \"\"\"Visual Studio XML project writer.\"\"\"\n  def __init__(self, project_path, version, name, guid=None, platforms=None):\n    \"\"\"Initializes the project.\n    Args:\n      project_path: Path to the project file.\n      version: Format version to emit.\n      name: Name of the project.\n      guid: GUID to use for project, if not None.\n      platforms: Array of string, the supported platforms.  If null, ['Win32']\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_Tool",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _Tool(object):\n  \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n      msvs_name: The name of the tool in MSVS.\n      msbuild_name: The name of the tool in MSBuild.\n  \"\"\"\n  def __init__(self, msvs_name, msbuild_name):\n    self.msvs_name = msvs_name\n    self.msbuild_name = msbuild_name\ndef _AddTool(tool):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _Tool\n```\n\n```python\n\n\n```\n\n```python\nclass _Tool(object):\n  \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n      msvs_name: The name of the tool in MSVS.\n      msbuild_name: The name of the tool in MSBuild.\n  \"\"\"\n  def __init__(self, msvs_name, msbuild_name):\n    self.msvs_name = msvs_name\n    self.msbuild_name = msbuild_name\ndef _AddTool(tool):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_Type",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _Type(object):\n  \"\"\"Type of settings (Base class).\"\"\"\n  def ValidateMSVS(self, value):\n    \"\"\"Verifies that the value is legal for MSVS.\n    Args:\n      value: the value to check for this type.\n    Raises:\n      ValueError if value is not valid for MSVS.\n    \"\"\"\n  def ValidateMSBuild(self, value):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _Type\n```\n\n```python\n\n\n```\n\n```python\nclass _Type(object):\n  \"\"\"Type of settings (Base class).\"\"\"\n  def ValidateMSVS(self, value):\n    \"\"\"Verifies that the value is legal for MSVS.\n    Args:\n      value: the value to check for this type.\n    Raises:\n      ValueError if value is not valid for MSVS.\n    \"\"\"\n  def ValidateMSBuild(self, value):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _String(_Type):\n  \"\"\"A setting that's just a string.\"\"\"\n  def ValidateMSVS(self, value):\n    if not isinstance(value, basestring):\n      raise ValueError('expected string; got %r' % value)\n  def ValidateMSBuild(self, value):\n    if not isinstance(value, basestring):\n      raise ValueError('expected string; got %r' % value)\n  def ConvertToMSBuild(self, value):\n    # Convert the macros",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _String\n```\n\n```python\n\n\n```\n\n```python\nclass _String(_Type):\n  \"\"\"A setting that's just a string.\"\"\"\n  def ValidateMSVS(self, value):\n    if not isinstance(value, basestring):\n      raise ValueError('expected string; got %r' % value)\n  def ValidateMSBuild(self, value):\n    if not isinstance(value, basestring):\n      raise ValueError('expected string; got %r' % value)\n  def ConvertToMSBuild(self, value):\n    # Convert the macros\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_StringList",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _StringList(_Type):\n  \"\"\"A settings that's a list of strings.\"\"\"\n  def ValidateMSVS(self, value):\n    if not isinstance(value, basestring) and not isinstance(value, list):\n      raise ValueError('expected string list; got %r' % value)\n  def ValidateMSBuild(self, value):\n    if not isinstance(value, basestring) and not isinstance(value, list):\n      raise ValueError('expected string list; got %r' % value)\n  def ConvertToMSBuild(self, value):\n    # Convert the macros",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _StringList\n```\n\n```python\n\n\n```\n\n```python\nclass _StringList(_Type):\n  \"\"\"A settings that's a list of strings.\"\"\"\n  def ValidateMSVS(self, value):\n    if not isinstance(value, basestring) and not isinstance(value, list):\n      raise ValueError('expected string list; got %r' % value)\n  def ValidateMSBuild(self, value):\n    if not isinstance(value, basestring) and not isinstance(value, list):\n      raise ValueError('expected string list; got %r' % value)\n  def ConvertToMSBuild(self, value):\n    # Convert the macros\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_Boolean",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _Boolean(_Type):\n  \"\"\"Boolean settings, can have the values 'false' or 'true'.\"\"\"\n  def _Validate(self, value):\n    if value != 'true' and value != 'false':\n      raise ValueError('expected bool; got %r' % value)\n  def ValidateMSVS(self, value):\n    self._Validate(value)\n  def ValidateMSBuild(self, value):\n    self._Validate(value)\n  def ConvertToMSBuild(self, value):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _Boolean\n```\n\n```python\n\n\n```\n\n```python\nclass _Boolean(_Type):\n  \"\"\"Boolean settings, can have the values 'false' or 'true'.\"\"\"\n  def _Validate(self, value):\n    if value != 'true' and value != 'false':\n      raise ValueError('expected bool; got %r' % value)\n  def ValidateMSVS(self, value):\n    self._Validate(value)\n  def ValidateMSBuild(self, value):\n    self._Validate(value)\n  def ConvertToMSBuild(self, value):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_Integer",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _Integer(_Type):\n  \"\"\"Integer settings.\"\"\"\n  def __init__(self, msbuild_base=10):\n    _Type.__init__(self)\n    self._msbuild_base = msbuild_base\n  def ValidateMSVS(self, value):\n    # Try to convert, this will raise ValueError if invalid.\n    self.ConvertToMSBuild(value)\n  def ValidateMSBuild(self, value):\n    # Try to convert, this will raise ValueError if invalid.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _Integer\n```\n\n```python\n\n\n```\n\n```python\nclass _Integer(_Type):\n  \"\"\"Integer settings.\"\"\"\n  def __init__(self, msbuild_base=10):\n    _Type.__init__(self)\n    self._msbuild_base = msbuild_base\n  def ValidateMSVS(self, value):\n    # Try to convert, this will raise ValueError if invalid.\n    self.ConvertToMSBuild(value)\n  def ValidateMSBuild(self, value):\n    # Try to convert, this will raise ValueError if invalid.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_Enumeration",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _Enumeration(_Type):\n  \"\"\"Type of settings that is an enumeration.\n  In MSVS, the values are indexes like '0', '1', and '2'.\n  MSBuild uses text labels that are more representative, like 'Win32'.\n  Constructor args:\n    label_list: an array of MSBuild labels that correspond to the MSVS index.\n        In the rare cases where MSVS has skipped an index value, None is\n        used in the array to indicate the unused spot.\n    new: an array of labels that are new to MSBuild.\n  \"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _Enumeration\n```\n\n```python\n\n\n```\n\n```python\nclass _Enumeration(_Type):\n  \"\"\"Type of settings that is an enumeration.\n  In MSVS, the values are indexes like '0', '1', and '2'.\n  MSBuild uses text labels that are more representative, like 'Win32'.\n  Constructor args:\n    label_list: an array of MSBuild labels that correspond to the MSVS index.\n        In the rare cases where MSVS has skipped an index value, None is\n        used in the array to indicate the unused spot.\n    new: an array of labels that are new to MSBuild.\n  \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FixVCMacroSlashes",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "def FixVCMacroSlashes(s):\n  \"\"\"Replace macros which have excessive following slashes.\n  These macros are known to have a built-in trailing slash. Furthermore, many\n  scripts hiccup on processing paths with extra slashes in the middle.\n  This list is probably not exhaustive.  Add as needed.\n  \"\"\"\n  if '$' in s:\n    s = fix_vc_macro_slashes_regex.sub(r'\\1', s)\n  return s\ndef ConvertVCMacrosToMSBuild(s):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import FixVCMacroSlashes\n```\n\n```python\n\n\n```\n\n```python\ndef FixVCMacroSlashes(s):\n  \"\"\"Replace macros which have excessive following slashes.\n  These macros are known to have a built-in trailing slash. Furthermore, many\n  scripts hiccup on processing paths with extra slashes in the middle.\n  This list is probably not exhaustive.  Add as needed.\n  \"\"\"\n  if '$' in s:\n    s = fix_vc_macro_slashes_regex.sub(r'\\1', s)\n  return s\ndef ConvertVCMacrosToMSBuild(s):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ConvertVCMacrosToMSBuild",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "def ConvertVCMacrosToMSBuild(s):\n  \"\"\"Convert the MSVS macros found in the string to the MSBuild equivalent.\n  This list is probably not exhaustive.  Add as needed.\n  \"\"\"\n  if '$' in s:\n    replace_map = {\n        '$(ConfigurationName)': '$(Configuration)',\n        '$(InputDir)': '%(RelativeDir)',\n        '$(InputExt)': '%(Extension)',\n        '$(InputFileName)': '%(Filename)%(Extension)',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import ConvertVCMacrosToMSBuild\n```\n\n```python\n\n\n```\n\n```python\ndef ConvertVCMacrosToMSBuild(s):\n  \"\"\"Convert the MSVS macros found in the string to the MSBuild equivalent.\n  This list is probably not exhaustive.  Add as needed.\n  \"\"\"\n  if '$' in s:\n    replace_map = {\n        '$(ConfigurationName)': '$(Configuration)',\n        '$(InputDir)': '%(RelativeDir)',\n        '$(InputExt)': '%(Extension)',\n        '$(InputFileName)': '%(Filename)%(Extension)',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ConvertToMSBuildSettings",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "def ConvertToMSBuildSettings(msvs_settings, stderr=sys.stderr):\n  \"\"\"Converts MSVS settings (VS2008 and earlier) to MSBuild settings (VS2010+).\n  Args:\n      msvs_settings: A dictionary.  The key is the tool name.  The values are\n          themselves dictionaries of settings and their values.\n      stderr: The stream receiving the error messages.\n  Returns:\n      A dictionary of MSBuild settings.  The key is either the MSBuild tool name\n      or the empty string (for the global settings).  The values are themselves\n      dictionaries of settings and their values.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import ConvertToMSBuildSettings\n```\n\n```python\n\n\n```\n\n```python\ndef ConvertToMSBuildSettings(msvs_settings, stderr=sys.stderr):\n  \"\"\"Converts MSVS settings (VS2008 and earlier) to MSBuild settings (VS2010+).\n  Args:\n      msvs_settings: A dictionary.  The key is the tool name.  The values are\n          themselves dictionaries of settings and their values.\n      stderr: The stream receiving the error messages.\n  Returns:\n      A dictionary of MSBuild settings.  The key is either the MSBuild tool name\n      or the empty string (for the global settings).  The values are themselves\n      dictionaries of settings and their values.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ValidateMSVSSettings",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "def ValidateMSVSSettings(settings, stderr=sys.stderr):\n  \"\"\"Validates that the names of the settings are valid for MSVS.\n  Args:\n      settings: A dictionary.  The key is the tool name.  The values are\n          themselves dictionaries of settings and their values.\n      stderr: The stream receiving the error messages.\n  \"\"\"\n  _ValidateSettings(_msvs_validators, settings, stderr)\ndef ValidateMSBuildSettings(settings, stderr=sys.stderr):\n  \"\"\"Validates that the names of the settings are valid for MSBuild.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import ValidateMSVSSettings\n```\n\n```python\n\n\n```\n\n```python\ndef ValidateMSVSSettings(settings, stderr=sys.stderr):\n  \"\"\"Validates that the names of the settings are valid for MSVS.\n  Args:\n      settings: A dictionary.  The key is the tool name.  The values are\n          themselves dictionaries of settings and their values.\n      stderr: The stream receiving the error messages.\n  \"\"\"\n  _ValidateSettings(_msvs_validators, settings, stderr)\ndef ValidateMSBuildSettings(settings, stderr=sys.stderr):\n  \"\"\"Validates that the names of the settings are valid for MSBuild.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ValidateMSBuildSettings",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "def ValidateMSBuildSettings(settings, stderr=sys.stderr):\n  \"\"\"Validates that the names of the settings are valid for MSBuild.\n  Args:\n      settings: A dictionary.  The key is the tool name.  The values are\n          themselves dictionaries of settings and their values.\n      stderr: The stream receiving the error messages.\n  \"\"\"\n  _ValidateSettings(_msbuild_validators, settings, stderr)\ndef _ValidateSettings(validators, settings, stderr):\n  \"\"\"Validates that the settings are valid for MSBuild or MSVS.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import ValidateMSBuildSettings\n```\n\n```python\n\n\n```\n\n```python\ndef ValidateMSBuildSettings(settings, stderr=sys.stderr):\n  \"\"\"Validates that the names of the settings are valid for MSBuild.\n  Args:\n      settings: A dictionary.  The key is the tool name.  The values are\n          themselves dictionaries of settings and their values.\n      stderr: The stream receiving the error messages.\n  \"\"\"\n  _ValidateSettings(_msbuild_validators, settings, stderr)\ndef _ValidateSettings(validators, settings, stderr):\n  \"\"\"Validates that the settings are valid for MSBuild or MSVS.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_msvs_validators",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msvs_validators = {}\n_msbuild_validators = {}\n# A dictionary of settings converters. The key is the tool name, the value is\n# a dictionary mapping setting names to conversion functions.\n_msvs_to_msbuild_converters = {}\n# Tool name mapping from MSVS to MSBuild.\n_msbuild_name_of_tool = {}\nclass _Tool(object):\n  \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _msvs_validators\n```\n\n```python\n\n\n```\n\n```python\n_msvs_validators = {}\n_msbuild_validators = {}\n# A dictionary of settings converters. The key is the tool name, the value is\n# a dictionary mapping setting names to conversion functions.\n_msvs_to_msbuild_converters = {}\n# Tool name mapping from MSVS to MSBuild.\n_msbuild_name_of_tool = {}\nclass _Tool(object):\n  \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_msbuild_validators",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msbuild_validators = {}\n# A dictionary of settings converters. The key is the tool name, the value is\n# a dictionary mapping setting names to conversion functions.\n_msvs_to_msbuild_converters = {}\n# Tool name mapping from MSVS to MSBuild.\n_msbuild_name_of_tool = {}\nclass _Tool(object):\n  \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n      msvs_name: The name of the tool in MSVS.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _msbuild_validators\n```\n\n```python\n\n\n```\n\n```python\n_msbuild_validators = {}\n# A dictionary of settings converters. The key is the tool name, the value is\n# a dictionary mapping setting names to conversion functions.\n_msvs_to_msbuild_converters = {}\n# Tool name mapping from MSVS to MSBuild.\n_msbuild_name_of_tool = {}\nclass _Tool(object):\n  \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n      msvs_name: The name of the tool in MSVS.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_msvs_to_msbuild_converters",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msvs_to_msbuild_converters = {}\n# Tool name mapping from MSVS to MSBuild.\n_msbuild_name_of_tool = {}\nclass _Tool(object):\n  \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n      msvs_name: The name of the tool in MSVS.\n      msbuild_name: The name of the tool in MSBuild.\n  \"\"\"\n  def __init__(self, msvs_name, msbuild_name):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _msvs_to_msbuild_converters\n```\n\n```python\n\n\n```\n\n```python\n_msvs_to_msbuild_converters = {}\n# Tool name mapping from MSVS to MSBuild.\n_msbuild_name_of_tool = {}\nclass _Tool(object):\n  \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n      msvs_name: The name of the tool in MSVS.\n      msbuild_name: The name of the tool in MSBuild.\n  \"\"\"\n  def __init__(self, msvs_name, msbuild_name):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_msbuild_name_of_tool",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msbuild_name_of_tool = {}\nclass _Tool(object):\n  \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n      msvs_name: The name of the tool in MSVS.\n      msbuild_name: The name of the tool in MSBuild.\n  \"\"\"\n  def __init__(self, msvs_name, msbuild_name):\n    self.msvs_name = msvs_name\n    self.msbuild_name = msbuild_name",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _msbuild_name_of_tool\n```\n\n```python\n\n\n```\n\n```python\n_msbuild_name_of_tool = {}\nclass _Tool(object):\n  \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n      msvs_name: The name of the tool in MSVS.\n      msbuild_name: The name of the tool in MSBuild.\n  \"\"\"\n  def __init__(self, msvs_name, msbuild_name):\n    self.msvs_name = msvs_name\n    self.msbuild_name = msbuild_name\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_boolean",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_boolean = _Boolean()\n_integer = _Integer()\n# For now, we don't do any special validation on these types:\n_string = _String()\n_file_name = _String()\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _boolean\n```\n\n```python\n\n\n```\n\n```python\n_boolean = _Boolean()\n_integer = _Integer()\n# For now, we don't do any special validation on these types:\n_string = _String()\n_file_name = _String()\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_integer",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_integer = _Integer()\n# For now, we don't do any special validation on these types:\n_string = _String()\n_file_name = _String()\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _integer\n```\n\n```python\n\n\n```\n\n```python\n_integer = _Integer()\n# For now, we don't do any special validation on these types:\n_string = _String()\n_file_name = _String()\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_string",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_string = _String()\n_file_name = _String()\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _string\n```\n\n```python\n\n\n```\n\n```python\n_string = _String()\n_file_name = _String()\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_file_name",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_file_name = _String()\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n  \"\"\"Defines a setting that has the same name in MSVS and MSBuild.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _file_name\n```\n\n```python\n\n\n```\n\n```python\n_file_name = _String()\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n  \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_folder_name",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n  \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _folder_name\n```\n\n```python\n\n\n```\n\n```python\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n  \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_file_list",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n  \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _file_list\n```\n\n```python\n\n\n```\n\n```python\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n  \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_folder_list",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n  \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    name: the name of the setting.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _folder_list\n```\n\n```python\n\n\n```\n\n```python\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n  \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    name: the name of the setting.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_string_list",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n  \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    name: the name of the setting.\n    setting_type: the type of this setting.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _string_list\n```\n\n```python\n\n\n```\n\n```python\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n  \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    name: the name of the setting.\n    setting_type: the type of this setting.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_newly_boolean",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n  \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    name: the name of the setting.\n    setting_type: the type of this setting.\n  \"\"\"\n  _Renamed(tool, name, name, setting_type)\ndef _Renamed(tool, msvs_name, msbuild_name, setting_type):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _newly_boolean\n```\n\n```python\n\n\n```\n\n```python\n_newly_boolean = _Enumeration(['', 'false', 'true'])\ndef _Same(tool, name, setting_type):\n  \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    name: the name of the setting.\n    setting_type: the type of this setting.\n  \"\"\"\n  _Renamed(tool, name, name, setting_type)\ndef _Renamed(tool, msvs_name, msbuild_name, setting_type):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fix_vc_macro_slashes_regex_list",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "fix_vc_macro_slashes_regex_list = ('IntDir', 'OutDir')\nfix_vc_macro_slashes_regex = re.compile(\n  r'(\\$\\((?:%s)\\))(?:[\\\\/]+)' % \"|\".join(fix_vc_macro_slashes_regex_list)\n)\n# Regular expression to detect keys that were generated by exclusion lists\n_EXCLUDED_SUFFIX_RE = re.compile('^(.*)_excluded$')\ndef _ValidateExclusionSetting(setting, settings, error_msg, stderr=sys.stderr):\n  \"\"\"Verify that 'setting' is valid if it is generated from an exclusion list.\n  If the setting appears to be generated from an exclusion list, the root name\n  is checked.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import fix_vc_macro_slashes_regex_list\n```\n\n```python\n\n\n```\n\n```python\nfix_vc_macro_slashes_regex_list = ('IntDir', 'OutDir')\nfix_vc_macro_slashes_regex = re.compile(\n  r'(\\$\\((?:%s)\\))(?:[\\\\/]+)' % \"|\".join(fix_vc_macro_slashes_regex_list)\n)\n# Regular expression to detect keys that were generated by exclusion lists\n_EXCLUDED_SUFFIX_RE = re.compile('^(.*)_excluded$')\ndef _ValidateExclusionSetting(setting, settings, error_msg, stderr=sys.stderr):\n  \"\"\"Verify that 'setting' is valid if it is generated from an exclusion list.\n  If the setting appears to be generated from an exclusion list, the root name\n  is checked.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "fix_vc_macro_slashes_regex",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "fix_vc_macro_slashes_regex = re.compile(\n  r'(\\$\\((?:%s)\\))(?:[\\\\/]+)' % \"|\".join(fix_vc_macro_slashes_regex_list)\n)\n# Regular expression to detect keys that were generated by exclusion lists\n_EXCLUDED_SUFFIX_RE = re.compile('^(.*)_excluded$')\ndef _ValidateExclusionSetting(setting, settings, error_msg, stderr=sys.stderr):\n  \"\"\"Verify that 'setting' is valid if it is generated from an exclusion list.\n  If the setting appears to be generated from an exclusion list, the root name\n  is checked.\n  Args:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import fix_vc_macro_slashes_regex\n```\n\n```python\n\n\n```\n\n```python\nfix_vc_macro_slashes_regex = re.compile(\n  r'(\\$\\((?:%s)\\))(?:[\\\\/]+)' % \"|\".join(fix_vc_macro_slashes_regex_list)\n)\n# Regular expression to detect keys that were generated by exclusion lists\n_EXCLUDED_SUFFIX_RE = re.compile('^(.*)_excluded$')\ndef _ValidateExclusionSetting(setting, settings, error_msg, stderr=sys.stderr):\n  \"\"\"Verify that 'setting' is valid if it is generated from an exclusion list.\n  If the setting appears to be generated from an exclusion list, the root name\n  is checked.\n  Args:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_EXCLUDED_SUFFIX_RE",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_EXCLUDED_SUFFIX_RE = re.compile('^(.*)_excluded$')\ndef _ValidateExclusionSetting(setting, settings, error_msg, stderr=sys.stderr):\n  \"\"\"Verify that 'setting' is valid if it is generated from an exclusion list.\n  If the setting appears to be generated from an exclusion list, the root name\n  is checked.\n  Args:\n      setting:   A string that is the setting name to validate\n      settings:  A dictionary where the keys are valid settings\n      error_msg: The message to emit in the event of error\n      stderr:    The stream receiving the error messages.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _EXCLUDED_SUFFIX_RE\n```\n\n```python\n\n\n```\n\n```python\n_EXCLUDED_SUFFIX_RE = re.compile('^(.*)_excluded$')\ndef _ValidateExclusionSetting(setting, settings, error_msg, stderr=sys.stderr):\n  \"\"\"Verify that 'setting' is valid if it is generated from an exclusion list.\n  If the setting appears to be generated from an exclusion list, the root name\n  is checked.\n  Args:\n      setting:   A string that is the setting name to validate\n      settings:  A dictionary where the keys are valid settings\n      error_msg: The message to emit in the event of error\n      stderr:    The stream receiving the error messages.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_compile",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_compile = _Tool('VCCLCompilerTool', 'ClCompile')\n_link = _Tool('VCLinkerTool', 'Link')\n_midl = _Tool('VCMIDLTool', 'Midl')\n_rc = _Tool('VCResourceCompilerTool', 'ResourceCompile')\n_lib = _Tool('VCLibrarianTool', 'Lib')\n_manifest = _Tool('VCManifestTool', 'Manifest')\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _compile\n```\n\n```python\n\n\n```\n\n```python\n_compile = _Tool('VCCLCompilerTool', 'ClCompile')\n_link = _Tool('VCLinkerTool', 'Link')\n_midl = _Tool('VCMIDLTool', 'Midl')\n_rc = _Tool('VCResourceCompilerTool', 'ResourceCompile')\n_lib = _Tool('VCLibrarianTool', 'Lib')\n_manifest = _Tool('VCManifestTool', 'Manifest')\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_link",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_link = _Tool('VCLinkerTool', 'Link')\n_midl = _Tool('VCMIDLTool', 'Midl')\n_rc = _Tool('VCResourceCompilerTool', 'ResourceCompile')\n_lib = _Tool('VCLibrarianTool', 'Lib')\n_manifest = _Tool('VCManifestTool', 'Manifest')\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _link\n```\n\n```python\n\n\n```\n\n```python\n_link = _Tool('VCLinkerTool', 'Link')\n_midl = _Tool('VCMIDLTool', 'Midl')\n_rc = _Tool('VCResourceCompilerTool', 'ResourceCompile')\n_lib = _Tool('VCLibrarianTool', 'Lib')\n_manifest = _Tool('VCManifestTool', 'Manifest')\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_midl",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_midl = _Tool('VCMIDLTool', 'Midl')\n_rc = _Tool('VCResourceCompilerTool', 'ResourceCompile')\n_lib = _Tool('VCLibrarianTool', 'Lib')\n_manifest = _Tool('VCManifestTool', 'Manifest')\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _midl\n```\n\n```python\n\n\n```\n\n```python\n_midl = _Tool('VCMIDLTool', 'Midl')\n_rc = _Tool('VCResourceCompilerTool', 'ResourceCompile')\n_lib = _Tool('VCLibrarianTool', 'Lib')\n_manifest = _Tool('VCManifestTool', 'Manifest')\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_rc",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_rc = _Tool('VCResourceCompilerTool', 'ResourceCompile')\n_lib = _Tool('VCLibrarianTool', 'Lib')\n_manifest = _Tool('VCManifestTool', 'Manifest')\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n_AddTool(_manifest)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _rc\n```\n\n```python\n\n\n```\n\n```python\n_rc = _Tool('VCResourceCompilerTool', 'ResourceCompile')\n_lib = _Tool('VCLibrarianTool', 'Lib')\n_manifest = _Tool('VCManifestTool', 'Manifest')\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n_AddTool(_manifest)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_lib",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_lib = _Tool('VCLibrarianTool', 'Lib')\n_manifest = _Tool('VCManifestTool', 'Manifest')\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n_AddTool(_manifest)\n_AddTool(_masm)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _lib\n```\n\n```python\n\n\n```\n\n```python\n_lib = _Tool('VCLibrarianTool', 'Lib')\n_manifest = _Tool('VCManifestTool', 'Manifest')\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n_AddTool(_manifest)\n_AddTool(_masm)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_manifest",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_manifest = _Tool('VCManifestTool', 'Manifest')\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n_AddTool(_manifest)\n_AddTool(_masm)\n# Add sections only found in the MSBuild settings.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _manifest\n```\n\n```python\n\n\n```\n\n```python\n_manifest = _Tool('VCManifestTool', 'Manifest')\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n_AddTool(_manifest)\n_AddTool(_masm)\n# Add sections only found in the MSBuild settings.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_masm",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n_AddTool(_manifest)\n_AddTool(_masm)\n# Add sections only found in the MSBuild settings.\n_msbuild_validators[''] = {}",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _masm\n```\n\n```python\n\n\n```\n\n```python\n_masm = _Tool('MASM', 'MASM')\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n_AddTool(_manifest)\n_AddTool(_masm)\n# Add sections only found in the MSBuild settings.\n_msbuild_validators[''] = {}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_msbuild_validators['']",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msbuild_validators[''] = {}\n_msbuild_validators['ProjectReference'] = {}\n_msbuild_validators['ManifestResourceCompile'] = {}\n# Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and\n# ClCompile in MSBuild.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, 'AdditionalIncludeDirectories', _folder_list)  # /I\n_Same(_compile, 'AdditionalOptions', _string_list)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _msbuild_validators['']\n```\n\n```python\n\n\n```\n\n```python\n_msbuild_validators[''] = {}\n_msbuild_validators['ProjectReference'] = {}\n_msbuild_validators['ManifestResourceCompile'] = {}\n# Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and\n# ClCompile in MSBuild.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, 'AdditionalIncludeDirectories', _folder_list)  # /I\n_Same(_compile, 'AdditionalOptions', _string_list)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_msbuild_validators['ProjectReference']",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msbuild_validators['ProjectReference'] = {}\n_msbuild_validators['ManifestResourceCompile'] = {}\n# Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and\n# ClCompile in MSBuild.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, 'AdditionalIncludeDirectories', _folder_list)  # /I\n_Same(_compile, 'AdditionalOptions', _string_list)\n_Same(_compile, 'AdditionalUsingDirectories', _folder_list)  # /AI",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _msbuild_validators['ProjectReference']\n```\n\n```python\n\n\n```\n\n```python\n_msbuild_validators['ProjectReference'] = {}\n_msbuild_validators['ManifestResourceCompile'] = {}\n# Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and\n# ClCompile in MSBuild.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, 'AdditionalIncludeDirectories', _folder_list)  # /I\n_Same(_compile, 'AdditionalOptions', _string_list)\n_Same(_compile, 'AdditionalUsingDirectories', _folder_list)  # /AI\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_msbuild_validators['ManifestResourceCompile']",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msbuild_validators['ManifestResourceCompile'] = {}\n# Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and\n# ClCompile in MSBuild.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, 'AdditionalIncludeDirectories', _folder_list)  # /I\n_Same(_compile, 'AdditionalOptions', _string_list)\n_Same(_compile, 'AdditionalUsingDirectories', _folder_list)  # /AI\n_Same(_compile, 'AssemblerListingLocation', _file_name)  # /Fa",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _msbuild_validators['ManifestResourceCompile']\n```\n\n```python\n\n\n```\n\n```python\n_msbuild_validators['ManifestResourceCompile'] = {}\n# Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and\n# ClCompile in MSBuild.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, 'AdditionalIncludeDirectories', _folder_list)  # /I\n_Same(_compile, 'AdditionalOptions', _string_list)\n_Same(_compile, 'AdditionalUsingDirectories', _folder_list)  # /AI\n_Same(_compile, 'AssemblerListingLocation', _file_name)  # /Fa\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_subsystem_enumeration",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_subsystem_enumeration = _Enumeration(\n    ['NotSet',\n     'Console',  # /SUBSYSTEM:CONSOLE\n     'Windows',  # /SUBSYSTEM:WINDOWS\n     'Native',  # /SUBSYSTEM:NATIVE\n     'EFI Application',  # /SUBSYSTEM:EFI_APPLICATION\n     'EFI Boot Service Driver',  # /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER\n     'EFI ROM',  # /SUBSYSTEM:EFI_ROM\n     'EFI Runtime',  # /SUBSYSTEM:EFI_RUNTIME_DRIVER\n     'WindowsCE'],  # /SUBSYSTEM:WINDOWSCE",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _subsystem_enumeration\n```\n\n```python\n\n\n```\n\n```python\n_subsystem_enumeration = _Enumeration(\n    ['NotSet',\n     'Console',  # /SUBSYSTEM:CONSOLE\n     'Windows',  # /SUBSYSTEM:WINDOWS\n     'Native',  # /SUBSYSTEM:NATIVE\n     'EFI Application',  # /SUBSYSTEM:EFI_APPLICATION\n     'EFI Boot Service Driver',  # /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER\n     'EFI ROM',  # /SUBSYSTEM:EFI_ROM\n     'EFI Runtime',  # /SUBSYSTEM:EFI_RUNTIME_DRIVER\n     'WindowsCE'],  # /SUBSYSTEM:WINDOWSCE\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_target_machine_enumeration",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_target_machine_enumeration = _Enumeration(\n    ['NotSet',\n     'MachineX86',  # /MACHINE:X86\n     None,\n     'MachineARM',  # /MACHINE:ARM\n     'MachineEBC',  # /MACHINE:EBC\n     'MachineIA64',  # /MACHINE:IA64\n     None,\n     'MachineMIPS',  # /MACHINE:MIPS\n     'MachineMIPS16',  # /MACHINE:MIPS16",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings import _target_machine_enumeration\n```\n\n```python\n\n\n```\n\n```python\n_target_machine_enumeration = _Enumeration(\n    ['NotSet',\n     'MachineX86',  # /MACHINE:X86\n     None,\n     'MachineARM',  # /MACHINE:ARM\n     'MachineEBC',  # /MACHINE:EBC\n     'MachineIA64',  # /MACHINE:IA64\n     None,\n     'MachineMIPS',  # /MACHINE:MIPS\n     'MachineMIPS16',  # /MACHINE:MIPS16\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestSequenceFunctions",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings_test",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings_test",
        "peekOfCode": "class TestSequenceFunctions(unittest.TestCase):\n  def setUp(self):\n    self.stderr = StringIO.StringIO()\n  def _ExpectedWarnings(self, expected):\n    \"\"\"Compares recorded lines to expected warnings.\"\"\"\n    self.stderr.seek(0)\n    actual = self.stderr.read().split('\\n')\n    actual = [line for line in actual if line]\n    self.assertEqual(sorted(expected), sorted(actual))\n  def testValidateMSVSSettings_tool_names(self):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings_test",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings_test import TestSequenceFunctions\n```\n\n```python\n\n\n```\n\n```python\nclass TestSequenceFunctions(unittest.TestCase):\n  def setUp(self):\n    self.stderr = StringIO.StringIO()\n  def _ExpectedWarnings(self, expected):\n    \"\"\"Compares recorded lines to expected warnings.\"\"\"\n    self.stderr.seek(0)\n    actual = self.stderr.read().split('\\n')\n    actual = [line for line in actual if line]\n    self.assertEqual(sorted(expected), sorted(actual))\n  def testValidateMSVSSettings_tool_names(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Writer",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSToolFile",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSToolFile",
        "peekOfCode": "class Writer(object):\n  \"\"\"Visual Studio XML tool file writer.\"\"\"\n  def __init__(self, tool_file_path, name):\n    \"\"\"Initializes the tool file.\n    Args:\n      tool_file_path: Path to the tool file.\n      name: Name of the tool file.\n    \"\"\"\n    self.tool_file_path = tool_file_path\n    self.name = name",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSToolFile",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSToolFile import Writer\n```\n\n```python\n\n\n```\n\n```python\nclass Writer(object):\n  \"\"\"Visual Studio XML tool file writer.\"\"\"\n  def __init__(self, tool_file_path, name):\n    \"\"\"Initializes the tool file.\n    Args:\n      tool_file_path: Path to the tool file.\n      name: Name of the tool file.\n    \"\"\"\n    self.tool_file_path = tool_file_path\n    self.name = name\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Writer",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSUserFile",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSUserFile",
        "peekOfCode": "class Writer(object):\n  \"\"\"Visual Studio XML user user file writer.\"\"\"\n  def __init__(self, user_file_path, version, name):\n    \"\"\"Initializes the user file.\n    Args:\n      user_file_path: Path to the user file.\n      version: Version info.\n      name: Name of the user file.\n    \"\"\"\n    self.user_file_path = user_file_path",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSUserFile",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSUserFile import Writer\n```\n\n```python\n\n\n```\n\n```python\nclass Writer(object):\n  \"\"\"Visual Studio XML user user file writer.\"\"\"\n  def __init__(self, user_file_path, version, name):\n    \"\"\"Initializes the user file.\n    Args:\n      user_file_path: Path to the user file.\n      version: Version info.\n      name: Name of the user file.\n    \"\"\"\n    self.user_file_path = user_file_path\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ShardTargets",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "peekOfCode": "def ShardTargets(target_list, target_dicts):\n  \"\"\"Shard some targets apart to work around the linkers limits.\n  Arguments:\n    target_list: List of target pairs: 'base/base.gyp:base'.\n    target_dicts: Dict of target properties keyed on target pair.\n  Returns:\n    Tuple of the new sharded versions of the inputs.\n  \"\"\"\n  # Gather the targets to shard, and how many pieces.\n  targets_to_shard = {}",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil import ShardTargets\n```\n\n```python\n\n\n```\n\n```python\ndef ShardTargets(target_list, target_dicts):\n  \"\"\"Shard some targets apart to work around the linkers limits.\n  Arguments:\n    target_list: List of target pairs: 'base/base.gyp:base'.\n    target_dicts: Dict of target properties keyed on target pair.\n  Returns:\n    Tuple of the new sharded versions of the inputs.\n  \"\"\"\n  # Gather the targets to shard, and how many pieces.\n  targets_to_shard = {}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "InsertLargePdbShims",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "peekOfCode": "def InsertLargePdbShims(target_list, target_dicts, vars):\n  \"\"\"Insert a shim target that forces the linker to use 4KB pagesize PDBs.\n  This is a workaround for targets with PDBs greater than 1GB in size, the\n  limit for the 1KB pagesize PDBs created by the linker by default.\n  Arguments:\n    target_list: List of target pairs: 'base/base.gyp:base'.\n    target_dicts: Dict of target properties keyed on target pair.\n    vars: A dictionary of common GYP variables with generator-specific values.\n  Returns:\n    Tuple of the shimmed version of the inputs.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil import InsertLargePdbShims\n```\n\n```python\n\n\n```\n\n```python\ndef InsertLargePdbShims(target_list, target_dicts, vars):\n  \"\"\"Insert a shim target that forces the linker to use 4KB pagesize PDBs.\n  This is a workaround for targets with PDBs greater than 1GB in size, the\n  limit for the 1KB pagesize PDBs created by the linker by default.\n  Arguments:\n    target_list: List of target pairs: 'base/base.gyp:base'.\n    target_dicts: Dict of target properties keyed on target pair.\n    vars: A dictionary of common GYP variables with generator-specific values.\n  Returns:\n    Tuple of the shimmed version of the inputs.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TARGET_TYPE_EXT",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "peekOfCode": "TARGET_TYPE_EXT = {\n  'executable': 'exe',\n  'loadable_module': 'dll',\n  'shared_library': 'dll',\n  'static_library': 'lib',\n}\ndef _GetLargePdbShimCcPath():\n  \"\"\"Returns the path of the large_pdb_shim.cc file.\"\"\"\n  this_dir = os.path.abspath(os.path.dirname(__file__))\n  src_dir = os.path.abspath(os.path.join(this_dir, '..', '..'))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil import TARGET_TYPE_EXT\n```\n\n```python\n\n\n```\n\n```python\nTARGET_TYPE_EXT = {\n  'executable': 'exe',\n  'loadable_module': 'dll',\n  'shared_library': 'dll',\n  'static_library': 'lib',\n}\ndef _GetLargePdbShimCcPath():\n  \"\"\"Returns the path of the large_pdb_shim.cc file.\"\"\"\n  this_dir = os.path.abspath(os.path.dirname(__file__))\n  src_dir = os.path.abspath(os.path.join(this_dir, '..', '..'))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "VisualStudioVersion",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "peekOfCode": "class VisualStudioVersion(object):\n  \"\"\"Information regarding a version of Visual Studio.\"\"\"\n  def __init__(self, short_name, description,\n               solution_version, project_version, flat_sln, uses_vcxproj,\n               path, sdk_based, default_toolset=None):\n    self.short_name = short_name\n    self.description = description\n    self.solution_version = solution_version\n    self.project_version = project_version\n    self.flat_sln = flat_sln",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion import VisualStudioVersion\n```\n\n```python\n\n\n```\n\n```python\nclass VisualStudioVersion(object):\n  \"\"\"Information regarding a version of Visual Studio.\"\"\"\n  def __init__(self, short_name, description,\n               solution_version, project_version, flat_sln, uses_vcxproj,\n               path, sdk_based, default_toolset=None):\n    self.short_name = short_name\n    self.description = description\n    self.solution_version = solution_version\n    self.project_version = project_version\n    self.flat_sln = flat_sln\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SelectVisualStudioVersion",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "peekOfCode": "def SelectVisualStudioVersion(version='auto', allow_fallback=True):\n  \"\"\"Select which version of Visual Studio projects to generate.\n  Arguments:\n    version: Hook to allow caller to force a particular version (vs auto).\n  Returns:\n    An object representing a visual studio project format version.\n  \"\"\"\n  # In auto mode, check environment variable for override.\n  if version == 'auto':\n    version = os.environ.get('GYP_MSVS_VERSION', 'auto')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion import SelectVisualStudioVersion\n```\n\n```python\n\n\n```\n\n```python\ndef SelectVisualStudioVersion(version='auto', allow_fallback=True):\n  \"\"\"Select which version of Visual Studio projects to generate.\n  Arguments:\n    version: Hook to allow caller to force a particular version (vs auto).\n  Returns:\n    An object representing a visual studio project format version.\n  \"\"\"\n  # In auto mode, check environment variable for override.\n  if version == 'auto':\n    version = os.environ.get('GYP_MSVS_VERSION', 'auto')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RegeneratableOptionParser",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "class RegeneratableOptionParser(optparse.OptionParser):\n  def __init__(self):\n    self.__regeneratable_options = {}\n    optparse.OptionParser.__init__(self)\n  def add_option(self, *args, **kw):\n    \"\"\"Add an option to the parser.\n    This accepts the same arguments as OptionParser.add_option, plus the\n    following:\n      regenerate: can be set to False to prevent this option from being included\n                  in regeneration.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import RegeneratableOptionParser\n```\n\n```python\n\n\n```\n\n```python\nclass RegeneratableOptionParser(optparse.OptionParser):\n  def __init__(self):\n    self.__regeneratable_options = {}\n    optparse.OptionParser.__init__(self)\n  def add_option(self, *args, **kw):\n    \"\"\"Add an option to the parser.\n    This accepts the same arguments as OptionParser.add_option, plus the\n    following:\n      regenerate: can be set to False to prevent this option from being included\n                  in regeneration.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DebugOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "def DebugOutput(mode, message, *args):\n  if 'all' in gyp.debug or mode in gyp.debug:\n    ctx = ('unknown', 0, 'unknown')\n    try:\n      f = traceback.extract_stack(limit=2)\n      if f:\n        ctx = f[0][:3]\n    except:\n      pass\n    if args:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import DebugOutput\n```\n\n```python\n\n\n```\n\n```python\ndef DebugOutput(mode, message, *args):\n  if 'all' in gyp.debug or mode in gyp.debug:\n    ctx = ('unknown', 0, 'unknown')\n    try:\n      f = traceback.extract_stack(limit=2)\n      if f:\n        ctx = f[0][:3]\n    except:\n      pass\n    if args:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FindBuildFiles",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "def FindBuildFiles():\n  extension = '.gyp'\n  files = os.listdir(os.getcwd())\n  build_files = []\n  for file in files:\n    if file.endswith(extension):\n      build_files.append(file)\n  return build_files\ndef Load(build_files, format, default_variables={},\n         includes=[], depth='.', params=None, check=False,",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import FindBuildFiles\n```\n\n```python\n\n\n```\n\n```python\ndef FindBuildFiles():\n  extension = '.gyp'\n  files = os.listdir(os.getcwd())\n  build_files = []\n  for file in files:\n    if file.endswith(extension):\n      build_files.append(file)\n  return build_files\ndef Load(build_files, format, default_variables={},\n         includes=[], depth='.', params=None, check=False,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Load",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "def Load(build_files, format, default_variables={},\n         includes=[], depth='.', params=None, check=False,\n         circular_check=True, duplicate_basename_check=True):\n  \"\"\"\n  Loads one or more specified build files.\n  default_variables and includes will be copied before use.\n  Returns the generator for the specified format and the\n  data returned by loading the specified build files.\n  \"\"\"\n  if params is None:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import Load\n```\n\n```python\n\n\n```\n\n```python\ndef Load(build_files, format, default_variables={},\n         includes=[], depth='.', params=None, check=False,\n         circular_check=True, duplicate_basename_check=True):\n  \"\"\"\n  Loads one or more specified build files.\n  default_variables and includes will be copied before use.\n  Returns the generator for the specified format and the\n  data returned by loading the specified build files.\n  \"\"\"\n  if params is None:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NameValueListToDict",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "def NameValueListToDict(name_value_list):\n  \"\"\"\n  Takes an array of strings of the form 'NAME=VALUE' and creates a dictionary\n  of the pairs.  If a string is simply NAME, then the value in the dictionary\n  is set to True.  If VALUE can be converted to an integer, it is.\n  \"\"\"\n  result = { }\n  for item in name_value_list:\n    tokens = item.split('=', 1)\n    if len(tokens) == 2:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import NameValueListToDict\n```\n\n```python\n\n\n```\n\n```python\ndef NameValueListToDict(name_value_list):\n  \"\"\"\n  Takes an array of strings of the form 'NAME=VALUE' and creates a dictionary\n  of the pairs.  If a string is simply NAME, then the value in the dictionary\n  is set to True.  If VALUE can be converted to an integer, it is.\n  \"\"\"\n  result = { }\n  for item in name_value_list:\n    tokens = item.split('=', 1)\n    if len(tokens) == 2:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ShlexEnv",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "def ShlexEnv(env_name):\n  flags = os.environ.get(env_name, [])\n  if flags:\n    flags = shlex.split(flags)\n  return flags\ndef FormatOpt(opt, value):\n  if opt.startswith('--'):\n    return '%s=%s' % (opt, value)\n  return opt + value\ndef RegenerateAppendFlag(flag, values, predicate, env_name, options):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import ShlexEnv\n```\n\n```python\n\n\n```\n\n```python\ndef ShlexEnv(env_name):\n  flags = os.environ.get(env_name, [])\n  if flags:\n    flags = shlex.split(flags)\n  return flags\ndef FormatOpt(opt, value):\n  if opt.startswith('--'):\n    return '%s=%s' % (opt, value)\n  return opt + value\ndef RegenerateAppendFlag(flag, values, predicate, env_name, options):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FormatOpt",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "def FormatOpt(opt, value):\n  if opt.startswith('--'):\n    return '%s=%s' % (opt, value)\n  return opt + value\ndef RegenerateAppendFlag(flag, values, predicate, env_name, options):\n  \"\"\"Regenerate a list of command line flags, for an option of action='append'.\n  The |env_name|, if given, is checked in the environment and used to generate\n  an initial list of options, then the options that were specified on the\n  command line (given in |values|) are appended.  This matches the handling of\n  environment variables and command line flags where command line flags override",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import FormatOpt\n```\n\n```python\n\n\n```\n\n```python\ndef FormatOpt(opt, value):\n  if opt.startswith('--'):\n    return '%s=%s' % (opt, value)\n  return opt + value\ndef RegenerateAppendFlag(flag, values, predicate, env_name, options):\n  \"\"\"Regenerate a list of command line flags, for an option of action='append'.\n  The |env_name|, if given, is checked in the environment and used to generate\n  an initial list of options, then the options that were specified on the\n  command line (given in |values|) are appended.  This matches the handling of\n  environment variables and command line flags where command line flags override\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RegenerateAppendFlag",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "def RegenerateAppendFlag(flag, values, predicate, env_name, options):\n  \"\"\"Regenerate a list of command line flags, for an option of action='append'.\n  The |env_name|, if given, is checked in the environment and used to generate\n  an initial list of options, then the options that were specified on the\n  command line (given in |values|) are appended.  This matches the handling of\n  environment variables and command line flags where command line flags override\n  the environment, while not requiring the environment to be set when the flags\n  are used again.\n  \"\"\"\n  flags = []",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import RegenerateAppendFlag\n```\n\n```python\n\n\n```\n\n```python\ndef RegenerateAppendFlag(flag, values, predicate, env_name, options):\n  \"\"\"Regenerate a list of command line flags, for an option of action='append'.\n  The |env_name|, if given, is checked in the environment and used to generate\n  an initial list of options, then the options that were specified on the\n  command line (given in |values|) are appended.  This matches the handling of\n  environment variables and command line flags where command line flags override\n  the environment, while not requiring the environment to be set when the flags\n  are used again.\n  \"\"\"\n  flags = []\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RegenerateFlags",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "def RegenerateFlags(options):\n  \"\"\"Given a parsed options object, and taking the environment variables into\n  account, returns a list of flags that should regenerate an equivalent options\n  object (even in the absence of the environment variables.)\n  Any path options will be normalized relative to depth.\n  The format flag is not included, as it is assumed the calling generator will\n  set that as appropriate.\n  \"\"\"\n  def FixPath(path):\n    path = gyp.common.FixIfRelativePath(path, options.depth)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import RegenerateFlags\n```\n\n```python\n\n\n```\n\n```python\ndef RegenerateFlags(options):\n  \"\"\"Given a parsed options object, and taking the environment variables into\n  account, returns a list of flags that should regenerate an equivalent options\n  object (even in the absence of the environment variables.)\n  Any path options will be normalized relative to depth.\n  The format flag is not included, as it is assumed the calling generator will\n  set that as appropriate.\n  \"\"\"\n  def FixPath(path):\n    path = gyp.common.FixIfRelativePath(path, options.depth)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "gyp_main",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "def gyp_main(args):\n  my_name = os.path.basename(sys.argv[0])\n  parser = RegeneratableOptionParser()\n  usage = 'usage: %s [options ...] [build_file ...]'\n  parser.set_usage(usage.replace('%s', '%prog'))\n  parser.add_option('--build', dest='configs', action='append',\n                    help='configuration for build after project generation')\n  parser.add_option('--check', dest='check', action='store_true',\n                    help='check format of gyp files')\n  parser.add_option('--config-dir', dest='config_dir', action='store',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import gyp_main\n```\n\n```python\n\n\n```\n\n```python\ndef gyp_main(args):\n  my_name = os.path.basename(sys.argv[0])\n  parser = RegeneratableOptionParser()\n  usage = 'usage: %s [options ...] [build_file ...]'\n  parser.set_usage(usage.replace('%s', '%prog'))\n  parser.add_option('--build', dest='configs', action='append',\n                    help='configuration for build after project generation')\n  parser.add_option('--check', dest='check', action='store_true',\n                    help='check format of gyp files')\n  parser.add_option('--config-dir', dest='config_dir', action='store',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "def main(args):\n  try:\n    return gyp_main(args)\n  except GypError, e:\n    sys.stderr.write(\"gyp: %s\\n\" % e)\n    return 1\n# NOTE: setuptools generated console_scripts calls function with no arguments\ndef script_main():\n  return main(sys.argv[1:])\nif __name__ == '__main__':",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import main\n```\n\n```python\n\n\n```\n\n```python\ndef main(args):\n  try:\n    return gyp_main(args)\n  except GypError, e:\n    sys.stderr.write(\"gyp: %s\\n\" % e)\n    return 1\n# NOTE: setuptools generated console_scripts calls function with no arguments\ndef script_main():\n  return main(sys.argv[1:])\nif __name__ == '__main__':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "script_main",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "def script_main():\n  return main(sys.argv[1:])\nif __name__ == '__main__':\n  sys.exit(script_main())",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import script_main\n```\n\n```python\n\n\n```\n\n```python\ndef script_main():\n  return main(sys.argv[1:])\nif __name__ == '__main__':\n  sys.exit(script_main())\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "debug",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "debug = {}\n# List of \"official\" debug modes, but you can use anything you like.\nDEBUG_GENERAL = 'general'\nDEBUG_VARIABLES = 'variables'\nDEBUG_INCLUDES = 'includes'\ndef DebugOutput(mode, message, *args):\n  if 'all' in gyp.debug or mode in gyp.debug:\n    ctx = ('unknown', 0, 'unknown')\n    try:\n      f = traceback.extract_stack(limit=2)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import debug\n```\n\n```python\n\n\n```\n\n```python\ndebug = {}\n# List of \"official\" debug modes, but you can use anything you like.\nDEBUG_GENERAL = 'general'\nDEBUG_VARIABLES = 'variables'\nDEBUG_INCLUDES = 'includes'\ndef DebugOutput(mode, message, *args):\n  if 'all' in gyp.debug or mode in gyp.debug:\n    ctx = ('unknown', 0, 'unknown')\n    try:\n      f = traceback.extract_stack(limit=2)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DEBUG_GENERAL",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "DEBUG_GENERAL = 'general'\nDEBUG_VARIABLES = 'variables'\nDEBUG_INCLUDES = 'includes'\ndef DebugOutput(mode, message, *args):\n  if 'all' in gyp.debug or mode in gyp.debug:\n    ctx = ('unknown', 0, 'unknown')\n    try:\n      f = traceback.extract_stack(limit=2)\n      if f:\n        ctx = f[0][:3]",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import DEBUG_GENERAL\n```\n\n```python\n\n\n```\n\n```python\nDEBUG_GENERAL = 'general'\nDEBUG_VARIABLES = 'variables'\nDEBUG_INCLUDES = 'includes'\ndef DebugOutput(mode, message, *args):\n  if 'all' in gyp.debug or mode in gyp.debug:\n    ctx = ('unknown', 0, 'unknown')\n    try:\n      f = traceback.extract_stack(limit=2)\n      if f:\n        ctx = f[0][:3]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DEBUG_VARIABLES",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "DEBUG_VARIABLES = 'variables'\nDEBUG_INCLUDES = 'includes'\ndef DebugOutput(mode, message, *args):\n  if 'all' in gyp.debug or mode in gyp.debug:\n    ctx = ('unknown', 0, 'unknown')\n    try:\n      f = traceback.extract_stack(limit=2)\n      if f:\n        ctx = f[0][:3]\n    except:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import DEBUG_VARIABLES\n```\n\n```python\n\n\n```\n\n```python\nDEBUG_VARIABLES = 'variables'\nDEBUG_INCLUDES = 'includes'\ndef DebugOutput(mode, message, *args):\n  if 'all' in gyp.debug or mode in gyp.debug:\n    ctx = ('unknown', 0, 'unknown')\n    try:\n      f = traceback.extract_stack(limit=2)\n      if f:\n        ctx = f[0][:3]\n    except:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DEBUG_INCLUDES",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "peekOfCode": "DEBUG_INCLUDES = 'includes'\ndef DebugOutput(mode, message, *args):\n  if 'all' in gyp.debug or mode in gyp.debug:\n    ctx = ('unknown', 0, 'unknown')\n    try:\n      f = traceback.extract_stack(limit=2)\n      if f:\n        ctx = f[0][:3]\n    except:\n      pass",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.__init__",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.__init__ import DEBUG_INCLUDES\n```\n\n```python\n\n\n```\n\n```python\nDEBUG_INCLUDES = 'includes'\ndef DebugOutput(mode, message, *args):\n  if 'all' in gyp.debug or mode in gyp.debug:\n    ctx = ('unknown', 0, 'unknown')\n    try:\n      f = traceback.extract_stack(limit=2)\n      if f:\n        ctx = f[0][:3]\n    except:\n      pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "memoize",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "class memoize(object):\n  def __init__(self, func):\n    self.func = func\n    self.cache = {}\n  def __call__(self, *args):\n    try:\n      return self.cache[args]\n    except KeyError:\n      result = self.func(*args)\n      self.cache[args] = result",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import memoize\n```\n\n```python\n\n\n```\n\n```python\nclass memoize(object):\n  def __init__(self, func):\n    self.func = func\n    self.cache = {}\n  def __call__(self, *args):\n    try:\n      return self.cache[args]\n    except KeyError:\n      result = self.func(*args)\n      self.cache[args] = result\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GypError",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "class GypError(Exception):\n  \"\"\"Error class representing an error, which is to be presented\n  to the user.  The main entry point will catch and display this.\n  \"\"\"\n  pass\ndef ExceptionAppend(e, msg):\n  \"\"\"Append a message to the given exception's message.\"\"\"\n  if not e.args:\n    e.args = (msg,)\n  elif len(e.args) == 1:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import GypError\n```\n\n```python\n\n\n```\n\n```python\nclass GypError(Exception):\n  \"\"\"Error class representing an error, which is to be presented\n  to the user.  The main entry point will catch and display this.\n  \"\"\"\n  pass\ndef ExceptionAppend(e, msg):\n  \"\"\"Append a message to the given exception's message.\"\"\"\n  if not e.args:\n    e.args = (msg,)\n  elif len(e.args) == 1:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OrderedSet",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "class OrderedSet(collections.MutableSet):\n  def __init__(self, iterable=None):\n    self.end = end = []\n    end += [None, end, end]         # sentinel node for doubly linked list\n    self.map = {}                   # key --> [key, prev, next]\n    if iterable is not None:\n      self |= iterable\n  def __len__(self):\n    return len(self.map)\n  def __contains__(self, key):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import OrderedSet\n```\n\n```python\n\n\n```\n\n```python\nclass OrderedSet(collections.MutableSet):\n  def __init__(self, iterable=None):\n    self.end = end = []\n    end += [None, end, end]         # sentinel node for doubly linked list\n    self.map = {}                   # key --> [key, prev, next]\n    if iterable is not None:\n      self |= iterable\n  def __len__(self):\n    return len(self.map)\n  def __contains__(self, key):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CycleError",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "class CycleError(Exception):\n  \"\"\"An exception raised when an unexpected cycle is detected.\"\"\"\n  def __init__(self, nodes):\n    self.nodes = nodes\n  def __str__(self):\n    return 'CycleError: cycle involving: ' + str(self.nodes)\ndef TopologicallySorted(graph, get_edges):\n  r\"\"\"Topologically sort based on a user provided edge definition.\n  Args:\n    graph: A list of node names.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import CycleError\n```\n\n```python\n\n\n```\n\n```python\nclass CycleError(Exception):\n  \"\"\"An exception raised when an unexpected cycle is detected.\"\"\"\n  def __init__(self, nodes):\n    self.nodes = nodes\n  def __str__(self):\n    return 'CycleError: cycle involving: ' + str(self.nodes)\ndef TopologicallySorted(graph, get_edges):\n  r\"\"\"Topologically sort based on a user provided edge definition.\n  Args:\n    graph: A list of node names.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ExceptionAppend",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def ExceptionAppend(e, msg):\n  \"\"\"Append a message to the given exception's message.\"\"\"\n  if not e.args:\n    e.args = (msg,)\n  elif len(e.args) == 1:\n    e.args = (str(e.args[0]) + ' ' + msg,)\n  else:\n    e.args = (str(e.args[0]) + ' ' + msg,) + e.args[1:]\ndef FindQualifiedTargets(target, qualified_list):\n  \"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import ExceptionAppend\n```\n\n```python\n\n\n```\n\n```python\ndef ExceptionAppend(e, msg):\n  \"\"\"Append a message to the given exception's message.\"\"\"\n  if not e.args:\n    e.args = (msg,)\n  elif len(e.args) == 1:\n    e.args = (str(e.args[0]) + ' ' + msg,)\n  else:\n    e.args = (str(e.args[0]) + ' ' + msg,) + e.args[1:]\ndef FindQualifiedTargets(target, qualified_list):\n  \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FindQualifiedTargets",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def FindQualifiedTargets(target, qualified_list):\n  \"\"\"\n  Given a list of qualified targets, return the qualified targets for the\n  specified |target|.\n  \"\"\"\n  return [t for t in qualified_list if ParseQualifiedTarget(t)[1] == target]\ndef ParseQualifiedTarget(target):\n  # Splits a qualified target into a build file, target name and toolset.\n  # NOTE: rsplit is used to disambiguate the Windows drive letter separator.\n  target_split = target.rsplit(':', 1)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import FindQualifiedTargets\n```\n\n```python\n\n\n```\n\n```python\ndef FindQualifiedTargets(target, qualified_list):\n  \"\"\"\n  Given a list of qualified targets, return the qualified targets for the\n  specified |target|.\n  \"\"\"\n  return [t for t in qualified_list if ParseQualifiedTarget(t)[1] == target]\ndef ParseQualifiedTarget(target):\n  # Splits a qualified target into a build file, target name and toolset.\n  # NOTE: rsplit is used to disambiguate the Windows drive letter separator.\n  target_split = target.rsplit(':', 1)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ParseQualifiedTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def ParseQualifiedTarget(target):\n  # Splits a qualified target into a build file, target name and toolset.\n  # NOTE: rsplit is used to disambiguate the Windows drive letter separator.\n  target_split = target.rsplit(':', 1)\n  if len(target_split) == 2:\n    [build_file, target] = target_split\n  else:\n    build_file = None\n  target_split = target.rsplit('#', 1)\n  if len(target_split) == 2:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import ParseQualifiedTarget\n```\n\n```python\n\n\n```\n\n```python\ndef ParseQualifiedTarget(target):\n  # Splits a qualified target into a build file, target name and toolset.\n  # NOTE: rsplit is used to disambiguate the Windows drive letter separator.\n  target_split = target.rsplit(':', 1)\n  if len(target_split) == 2:\n    [build_file, target] = target_split\n  else:\n    build_file = None\n  target_split = target.rsplit('#', 1)\n  if len(target_split) == 2:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ResolveTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def ResolveTarget(build_file, target, toolset):\n  # This function resolves a target into a canonical form:\n  # - a fully defined build file, either absolute or relative to the current\n  # directory\n  # - a target name\n  # - a toolset\n  #\n  # build_file is the file relative to which 'target' is defined.\n  # target is the qualified target.\n  # toolset is the default toolset for that target.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import ResolveTarget\n```\n\n```python\n\n\n```\n\n```python\ndef ResolveTarget(build_file, target, toolset):\n  # This function resolves a target into a canonical form:\n  # - a fully defined build file, either absolute or relative to the current\n  # directory\n  # - a target name\n  # - a toolset\n  #\n  # build_file is the file relative to which 'target' is defined.\n  # target is the qualified target.\n  # toolset is the default toolset for that target.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BuildFile",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def BuildFile(fully_qualified_target):\n  # Extracts the build file from the fully qualified target.\n  return ParseQualifiedTarget(fully_qualified_target)[0]\ndef GetEnvironFallback(var_list, default):\n  \"\"\"Look up a key in the environment, with fallback to secondary keys\n  and finally falling back to a default value.\"\"\"\n  for var in var_list:\n    if var in os.environ:\n      return os.environ[var]\n  return default",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import BuildFile\n```\n\n```python\n\n\n```\n\n```python\ndef BuildFile(fully_qualified_target):\n  # Extracts the build file from the fully qualified target.\n  return ParseQualifiedTarget(fully_qualified_target)[0]\ndef GetEnvironFallback(var_list, default):\n  \"\"\"Look up a key in the environment, with fallback to secondary keys\n  and finally falling back to a default value.\"\"\"\n  for var in var_list:\n    if var in os.environ:\n      return os.environ[var]\n  return default\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetEnvironFallback",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def GetEnvironFallback(var_list, default):\n  \"\"\"Look up a key in the environment, with fallback to secondary keys\n  and finally falling back to a default value.\"\"\"\n  for var in var_list:\n    if var in os.environ:\n      return os.environ[var]\n  return default\ndef QualifiedTarget(build_file, target, toolset):\n  # \"Qualified\" means the file that a target was defined in and the target\n  # name, separated by a colon, suffixed by a # and the toolset name:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import GetEnvironFallback\n```\n\n```python\n\n\n```\n\n```python\ndef GetEnvironFallback(var_list, default):\n  \"\"\"Look up a key in the environment, with fallback to secondary keys\n  and finally falling back to a default value.\"\"\"\n  for var in var_list:\n    if var in os.environ:\n      return os.environ[var]\n  return default\ndef QualifiedTarget(build_file, target, toolset):\n  # \"Qualified\" means the file that a target was defined in and the target\n  # name, separated by a colon, suffixed by a # and the toolset name:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "QualifiedTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def QualifiedTarget(build_file, target, toolset):\n  # \"Qualified\" means the file that a target was defined in and the target\n  # name, separated by a colon, suffixed by a # and the toolset name:\n  # /path/to/file.gyp:target_name#toolset\n  fully_qualified = build_file + ':' + target\n  if toolset:\n    fully_qualified = fully_qualified + '#' + toolset\n  return fully_qualified\n@memoize\ndef RelativePath(path, relative_to, follow_path_symlink=True):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import QualifiedTarget\n```\n\n```python\n\n\n```\n\n```python\ndef QualifiedTarget(build_file, target, toolset):\n  # \"Qualified\" means the file that a target was defined in and the target\n  # name, separated by a colon, suffixed by a # and the toolset name:\n  # /path/to/file.gyp:target_name#toolset\n  fully_qualified = build_file + ':' + target\n  if toolset:\n    fully_qualified = fully_qualified + '#' + toolset\n  return fully_qualified\n@memoize\ndef RelativePath(path, relative_to, follow_path_symlink=True):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RelativePath",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def RelativePath(path, relative_to, follow_path_symlink=True):\n  # Assuming both |path| and |relative_to| are relative to the current\n  # directory, returns a relative path that identifies path relative to\n  # relative_to.\n  # If |follow_symlink_path| is true (default) and |path| is a symlink, then\n  # this method returns a path to the real file represented by |path|. If it is\n  # false, this method returns a path to the symlink. If |path| is not a\n  # symlink, this option has no effect.\n  # Convert to normalized (and therefore absolute paths).\n  if follow_path_symlink:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import RelativePath\n```\n\n```python\n\n\n```\n\n```python\ndef RelativePath(path, relative_to, follow_path_symlink=True):\n  # Assuming both |path| and |relative_to| are relative to the current\n  # directory, returns a relative path that identifies path relative to\n  # relative_to.\n  # If |follow_symlink_path| is true (default) and |path| is a symlink, then\n  # this method returns a path to the real file represented by |path|. If it is\n  # false, this method returns a path to the symlink. If |path| is not a\n  # symlink, this option has no effect.\n  # Convert to normalized (and therefore absolute paths).\n  if follow_path_symlink:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "InvertRelativePath",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def InvertRelativePath(path, toplevel_dir=None):\n  \"\"\"Given a path like foo/bar that is relative to toplevel_dir, return\n  the inverse relative path back to the toplevel_dir.\n  E.g. os.path.normpath(os.path.join(path, InvertRelativePath(path)))\n  should always produce the empty string, unless the path contains symlinks.\n  \"\"\"\n  if not path:\n    return path\n  toplevel_dir = '.' if toplevel_dir is None else toplevel_dir\n  return RelativePath(toplevel_dir, os.path.join(toplevel_dir, path))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import InvertRelativePath\n```\n\n```python\n\n\n```\n\n```python\ndef InvertRelativePath(path, toplevel_dir=None):\n  \"\"\"Given a path like foo/bar that is relative to toplevel_dir, return\n  the inverse relative path back to the toplevel_dir.\n  E.g. os.path.normpath(os.path.join(path, InvertRelativePath(path)))\n  should always produce the empty string, unless the path contains symlinks.\n  \"\"\"\n  if not path:\n    return path\n  toplevel_dir = '.' if toplevel_dir is None else toplevel_dir\n  return RelativePath(toplevel_dir, os.path.join(toplevel_dir, path))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FixIfRelativePath",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def FixIfRelativePath(path, relative_to):\n  # Like RelativePath but returns |path| unchanged if it is absolute.\n  if os.path.isabs(path):\n    return path\n  return RelativePath(path, relative_to)\ndef UnrelativePath(path, relative_to):\n  # Assuming that |relative_to| is relative to the current directory, and |path|\n  # is a path relative to the dirname of |relative_to|, returns a path that\n  # identifies |path| relative to the current directory.\n  rel_dir = os.path.dirname(relative_to)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import FixIfRelativePath\n```\n\n```python\n\n\n```\n\n```python\ndef FixIfRelativePath(path, relative_to):\n  # Like RelativePath but returns |path| unchanged if it is absolute.\n  if os.path.isabs(path):\n    return path\n  return RelativePath(path, relative_to)\ndef UnrelativePath(path, relative_to):\n  # Assuming that |relative_to| is relative to the current directory, and |path|\n  # is a path relative to the dirname of |relative_to|, returns a path that\n  # identifies |path| relative to the current directory.\n  rel_dir = os.path.dirname(relative_to)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UnrelativePath",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def UnrelativePath(path, relative_to):\n  # Assuming that |relative_to| is relative to the current directory, and |path|\n  # is a path relative to the dirname of |relative_to|, returns a path that\n  # identifies |path| relative to the current directory.\n  rel_dir = os.path.dirname(relative_to)\n  return os.path.normpath(os.path.join(rel_dir, path))\n# re objects used by EncodePOSIXShellArgument.  See IEEE 1003.1 XCU.2.2 at\n# http://www.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_02\n# and the documentation for various shells.\n# _quote is a pattern that should match any argument that needs to be quoted",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import UnrelativePath\n```\n\n```python\n\n\n```\n\n```python\ndef UnrelativePath(path, relative_to):\n  # Assuming that |relative_to| is relative to the current directory, and |path|\n  # is a path relative to the dirname of |relative_to|, returns a path that\n  # identifies |path| relative to the current directory.\n  rel_dir = os.path.dirname(relative_to)\n  return os.path.normpath(os.path.join(rel_dir, path))\n# re objects used by EncodePOSIXShellArgument.  See IEEE 1003.1 XCU.2.2 at\n# http://www.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_02\n# and the documentation for various shells.\n# _quote is a pattern that should match any argument that needs to be quoted\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EncodePOSIXShellArgument",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def EncodePOSIXShellArgument(argument):\n  \"\"\"Encodes |argument| suitably for consumption by POSIX shells.\n  argument may be quoted and escaped as necessary to ensure that POSIX shells\n  treat the returned value as a literal representing the argument passed to\n  this function.  Parameter (variable) expansions beginning with $ are allowed\n  to remain intact without escaping the $, to allow the argument to contain\n  references to variables to be expanded by the shell.\n  \"\"\"\n  if not isinstance(argument, str):\n    argument = str(argument)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import EncodePOSIXShellArgument\n```\n\n```python\n\n\n```\n\n```python\ndef EncodePOSIXShellArgument(argument):\n  \"\"\"Encodes |argument| suitably for consumption by POSIX shells.\n  argument may be quoted and escaped as necessary to ensure that POSIX shells\n  treat the returned value as a literal representing the argument passed to\n  this function.  Parameter (variable) expansions beginning with $ are allowed\n  to remain intact without escaping the $, to allow the argument to contain\n  references to variables to be expanded by the shell.\n  \"\"\"\n  if not isinstance(argument, str):\n    argument = str(argument)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EncodePOSIXShellList",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def EncodePOSIXShellList(list):\n  \"\"\"Encodes |list| suitably for consumption by POSIX shells.\n  Returns EncodePOSIXShellArgument for each item in list, and joins them\n  together using the space character as an argument separator.\n  \"\"\"\n  encoded_arguments = []\n  for argument in list:\n    encoded_arguments.append(EncodePOSIXShellArgument(argument))\n  return ' '.join(encoded_arguments)\ndef DeepDependencyTargets(target_dicts, roots):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import EncodePOSIXShellList\n```\n\n```python\n\n\n```\n\n```python\ndef EncodePOSIXShellList(list):\n  \"\"\"Encodes |list| suitably for consumption by POSIX shells.\n  Returns EncodePOSIXShellArgument for each item in list, and joins them\n  together using the space character as an argument separator.\n  \"\"\"\n  encoded_arguments = []\n  for argument in list:\n    encoded_arguments.append(EncodePOSIXShellArgument(argument))\n  return ' '.join(encoded_arguments)\ndef DeepDependencyTargets(target_dicts, roots):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DeepDependencyTargets",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def DeepDependencyTargets(target_dicts, roots):\n  \"\"\"Returns the recursive list of target dependencies.\"\"\"\n  dependencies = set()\n  pending = set(roots)\n  while pending:\n    # Pluck out one.\n    r = pending.pop()\n    # Skip if visited already.\n    if r in dependencies:\n      continue",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import DeepDependencyTargets\n```\n\n```python\n\n\n```\n\n```python\ndef DeepDependencyTargets(target_dicts, roots):\n  \"\"\"Returns the recursive list of target dependencies.\"\"\"\n  dependencies = set()\n  pending = set(roots)\n  while pending:\n    # Pluck out one.\n    r = pending.pop()\n    # Skip if visited already.\n    if r in dependencies:\n      continue\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BuildFileTargets",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def BuildFileTargets(target_list, build_file):\n  \"\"\"From a target_list, returns the subset from the specified build_file.\n  \"\"\"\n  return [p for p in target_list if BuildFile(p) == build_file]\ndef AllTargets(target_list, target_dicts, build_file):\n  \"\"\"Returns all targets (direct and dependencies) for the specified build_file.\n  \"\"\"\n  bftargets = BuildFileTargets(target_list, build_file)\n  deptargets = DeepDependencyTargets(target_dicts, bftargets)\n  return bftargets + deptargets",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import BuildFileTargets\n```\n\n```python\n\n\n```\n\n```python\ndef BuildFileTargets(target_list, build_file):\n  \"\"\"From a target_list, returns the subset from the specified build_file.\n  \"\"\"\n  return [p for p in target_list if BuildFile(p) == build_file]\ndef AllTargets(target_list, target_dicts, build_file):\n  \"\"\"Returns all targets (direct and dependencies) for the specified build_file.\n  \"\"\"\n  bftargets = BuildFileTargets(target_list, build_file)\n  deptargets = DeepDependencyTargets(target_dicts, bftargets)\n  return bftargets + deptargets\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AllTargets",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def AllTargets(target_list, target_dicts, build_file):\n  \"\"\"Returns all targets (direct and dependencies) for the specified build_file.\n  \"\"\"\n  bftargets = BuildFileTargets(target_list, build_file)\n  deptargets = DeepDependencyTargets(target_dicts, bftargets)\n  return bftargets + deptargets\ndef WriteOnDiff(filename):\n  \"\"\"Write to a file only if the new contents differ.\n  Arguments:\n    filename: name of the file to potentially write to.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import AllTargets\n```\n\n```python\n\n\n```\n\n```python\ndef AllTargets(target_list, target_dicts, build_file):\n  \"\"\"Returns all targets (direct and dependencies) for the specified build_file.\n  \"\"\"\n  bftargets = BuildFileTargets(target_list, build_file)\n  deptargets = DeepDependencyTargets(target_dicts, bftargets)\n  return bftargets + deptargets\ndef WriteOnDiff(filename):\n  \"\"\"Write to a file only if the new contents differ.\n  Arguments:\n    filename: name of the file to potentially write to.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WriteOnDiff",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def WriteOnDiff(filename):\n  \"\"\"Write to a file only if the new contents differ.\n  Arguments:\n    filename: name of the file to potentially write to.\n  Returns:\n    A file like object which will write to temporary file and only overwrite\n    the target if it differs (on close).\n  \"\"\"\n  class Writer(object):\n    \"\"\"Wrapper around file which only covers the target if it differs.\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import WriteOnDiff\n```\n\n```python\n\n\n```\n\n```python\ndef WriteOnDiff(filename):\n  \"\"\"Write to a file only if the new contents differ.\n  Arguments:\n    filename: name of the file to potentially write to.\n  Returns:\n    A file like object which will write to temporary file and only overwrite\n    the target if it differs (on close).\n  \"\"\"\n  class Writer(object):\n    \"\"\"Wrapper around file which only covers the target if it differs.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EnsureDirExists",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def EnsureDirExists(path):\n  \"\"\"Make sure the directory for |path| exists.\"\"\"\n  try:\n    os.makedirs(os.path.dirname(path))\n  except OSError:\n    pass\ndef GetFlavor(params):\n  \"\"\"Returns |params.flavor| if it's set, the system's default flavor else.\"\"\"\n  flavors = {\n    'cygwin': 'win',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import EnsureDirExists\n```\n\n```python\n\n\n```\n\n```python\ndef EnsureDirExists(path):\n  \"\"\"Make sure the directory for |path| exists.\"\"\"\n  try:\n    os.makedirs(os.path.dirname(path))\n  except OSError:\n    pass\ndef GetFlavor(params):\n  \"\"\"Returns |params.flavor| if it's set, the system's default flavor else.\"\"\"\n  flavors = {\n    'cygwin': 'win',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetFlavor",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def GetFlavor(params):\n  \"\"\"Returns |params.flavor| if it's set, the system's default flavor else.\"\"\"\n  flavors = {\n    'cygwin': 'win',\n    'win32': 'win',\n    'darwin': 'mac',\n  }\n  if 'flavor' in params:\n    return params['flavor']\n  if sys.platform in flavors:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import GetFlavor\n```\n\n```python\n\n\n```\n\n```python\ndef GetFlavor(params):\n  \"\"\"Returns |params.flavor| if it's set, the system's default flavor else.\"\"\"\n  flavors = {\n    'cygwin': 'win',\n    'win32': 'win',\n    'darwin': 'mac',\n  }\n  if 'flavor' in params:\n    return params['flavor']\n  if sys.platform in flavors:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CopyTool",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def CopyTool(flavor, out_path):\n  \"\"\"Finds (flock|mac|win)_tool.gyp in the gyp directory and copies it\n  to |out_path|.\"\"\"\n  # aix and solaris just need flock emulation. mac and win use more complicated\n  # support scripts.\n  prefix = {\n      'aix': 'flock',\n      'solaris': 'flock',\n      'mac': 'mac',\n      'win': 'win'",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import CopyTool\n```\n\n```python\n\n\n```\n\n```python\ndef CopyTool(flavor, out_path):\n  \"\"\"Finds (flock|mac|win)_tool.gyp in the gyp directory and copies it\n  to |out_path|.\"\"\"\n  # aix and solaris just need flock emulation. mac and win use more complicated\n  # support scripts.\n  prefix = {\n      'aix': 'flock',\n      'solaris': 'flock',\n      'mac': 'mac',\n      'win': 'win'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "uniquer",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def uniquer(seq, idfun=None):\n    if idfun is None:\n        idfun = lambda x: x\n    seen = {}\n    result = []\n    for item in seq:\n        marker = idfun(item)\n        if marker in seen: continue\n        seen[marker] = 1\n        result.append(item)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import uniquer\n```\n\n```python\n\n\n```\n\n```python\ndef uniquer(seq, idfun=None):\n    if idfun is None:\n        idfun = lambda x: x\n    seen = {}\n    result = []\n    for item in seq:\n        marker = idfun(item)\n        if marker in seen: continue\n        seen[marker] = 1\n        result.append(item)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TopologicallySorted",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def TopologicallySorted(graph, get_edges):\n  r\"\"\"Topologically sort based on a user provided edge definition.\n  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n    cheaper than repeatedly calling get_edges.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import TopologicallySorted\n```\n\n```python\n\n\n```\n\n```python\ndef TopologicallySorted(graph, get_edges):\n  r\"\"\"Topologically sort based on a user provided edge definition.\n  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n    cheaper than repeatedly calling get_edges.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CrossCompileRequested",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def CrossCompileRequested():\n  # TODO: figure out how to not build extra host objects in the\n  # non-cross-compile case when this is enabled, and enable unconditionally.\n  return (os.environ.get('GYP_CROSSCOMPILE') or\n          os.environ.get('AR_host') or\n          os.environ.get('CC_host') or\n          os.environ.get('CXX_host') or\n          os.environ.get('AR_target') or\n          os.environ.get('CC_target') or\n          os.environ.get('CXX_target'))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import CrossCompileRequested\n```\n\n```python\n\n\n```\n\n```python\ndef CrossCompileRequested():\n  # TODO: figure out how to not build extra host objects in the\n  # non-cross-compile case when this is enabled, and enable unconditionally.\n  return (os.environ.get('GYP_CROSSCOMPILE') or\n          os.environ.get('AR_host') or\n          os.environ.get('CC_host') or\n          os.environ.get('CXX_host') or\n          os.environ.get('AR_target') or\n          os.environ.get('CC_target') or\n          os.environ.get('CXX_target'))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_quote",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "_quote = re.compile('[\\t\\n #$%&\\'()*;<=>?[{|}~]|^$')\n# _escape is a pattern that should match any character that needs to be\n# escaped with a backslash, whether or not the argument matched the _quote\n# pattern.  _escape is used with re.sub to backslash anything in _escape's\n# first match group, hence the (parentheses) in the regular expression.\n#\n# _escape matches the following characters appearing anywhere in an argument:\n#   \"  to prevent POSIX shells from interpreting this character for quoting\n#   \\  to prevent POSIX shells from interpreting this character for escaping\n#   `  to prevent POSIX shells from interpreting this character for command",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import _quote\n```\n\n```python\n\n\n```\n\n```python\n_quote = re.compile('[\\t\\n #$%&\\'()*;<=>?[{|}~]|^$')\n# _escape is a pattern that should match any character that needs to be\n# escaped with a backslash, whether or not the argument matched the _quote\n# pattern.  _escape is used with re.sub to backslash anything in _escape's\n# first match group, hence the (parentheses) in the regular expression.\n#\n# _escape matches the following characters appearing anywhere in an argument:\n#   \"  to prevent POSIX shells from interpreting this character for quoting\n#   \\  to prevent POSIX shells from interpreting this character for escaping\n#   `  to prevent POSIX shells from interpreting this character for command\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_escape",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "_escape = re.compile(r'([\"\\\\`])')\ndef EncodePOSIXShellArgument(argument):\n  \"\"\"Encodes |argument| suitably for consumption by POSIX shells.\n  argument may be quoted and escaped as necessary to ensure that POSIX shells\n  treat the returned value as a literal representing the argument passed to\n  this function.  Parameter (variable) expansions beginning with $ are allowed\n  to remain intact without escaping the $, to allow the argument to contain\n  references to variables to be expanded by the shell.\n  \"\"\"\n  if not isinstance(argument, str):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common import _escape\n```\n\n```python\n\n\n```\n\n```python\n_escape = re.compile(r'([\"\\\\`])')\ndef EncodePOSIXShellArgument(argument):\n  \"\"\"Encodes |argument| suitably for consumption by POSIX shells.\n  argument may be quoted and escaped as necessary to ensure that POSIX shells\n  treat the returned value as a literal representing the argument passed to\n  this function.  Parameter (variable) expansions beginning with $ are allowed\n  to remain intact without escaping the $, to allow the argument to contain\n  references to variables to be expanded by the shell.\n  \"\"\"\n  if not isinstance(argument, str):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestTopologicallySorted",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common_test",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common_test",
        "peekOfCode": "class TestTopologicallySorted(unittest.TestCase):\n  def test_Valid(self):\n    \"\"\"Test that sorting works on a valid graph with one possible order.\"\"\"\n    graph = {\n        'a': ['b', 'c'],\n        'b': [],\n        'c': ['d'],\n        'd': ['b'],\n        }\n    def GetEdge(node):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common_test",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common_test import TestTopologicallySorted\n```\n\n```python\n\n\n```\n\n```python\nclass TestTopologicallySorted(unittest.TestCase):\n  def test_Valid(self):\n    \"\"\"Test that sorting works on a valid graph with one possible order.\"\"\"\n    graph = {\n        'a': ['b', 'c'],\n        'b': [],\n        'c': ['d'],\n        'd': ['b'],\n        }\n    def GetEdge(node):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestGetFlavor",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.common_test",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.common_test",
        "peekOfCode": "class TestGetFlavor(unittest.TestCase):\n  \"\"\"Test that gyp.common.GetFlavor works as intended\"\"\"\n  original_platform = ''\n  def setUp(self):\n    self.original_platform = sys.platform\n  def tearDown(self):\n    sys.platform = self.original_platform\n  def assertFlavor(self, expected, argument, param):\n    sys.platform = argument\n    self.assertEqual(expected, gyp.common.GetFlavor(param))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.common_test",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.common_test import TestGetFlavor\n```\n\n```python\n\n\n```\n\n```python\nclass TestGetFlavor(unittest.TestCase):\n  \"\"\"Test that gyp.common.GetFlavor works as intended\"\"\"\n  original_platform = ''\n  def setUp(self):\n    self.original_platform = sys.platform\n  def tearDown(self):\n    sys.platform = self.original_platform\n  def assertFlavor(self, expected, argument, param):\n    sys.platform = argument\n    self.assertEqual(expected, gyp.common.GetFlavor(param))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XmlToString",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "peekOfCode": "def XmlToString(content, encoding='utf-8', pretty=False):\n  \"\"\" Writes the XML content to disk, touching the file only if it has changed.\n  Visual Studio files have a lot of pre-defined structures.  This function makes\n  it easy to represent these structures as Python data structures, instead of\n  having to create a lot of function calls.\n  Each XML element of the content is represented as a list composed of:\n  1. The name of the element, a string,\n  2. The attributes of the element, a dictionary (optional), and\n  3+. The content of the element, if any.  Strings are simple text nodes and\n      lists are child elements.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.easy_xml import XmlToString\n```\n\n```python\n\n\n```\n\n```python\ndef XmlToString(content, encoding='utf-8', pretty=False):\n  \"\"\" Writes the XML content to disk, touching the file only if it has changed.\n  Visual Studio files have a lot of pre-defined structures.  This function makes\n  it easy to represent these structures as Python data structures, instead of\n  having to create a lot of function calls.\n  Each XML element of the content is represented as a list composed of:\n  1. The name of the element, a string,\n  2. The attributes of the element, a dictionary (optional), and\n  3+. The content of the element, if any.  Strings are simple text nodes and\n      lists are child elements.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WriteXmlIfChanged",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "peekOfCode": "def WriteXmlIfChanged(content, path, encoding='utf-8', pretty=False,\n                      win32=False):\n  \"\"\" Writes the XML content to disk, touching the file only if it has changed.\n  Args:\n    content:  The structured content to be written.\n    path: Location of the file.\n    encoding: The encoding to report on the first line of the XML file.\n    pretty: True if we want pretty printing with indents and new lines.\n  \"\"\"\n  xml_string = XmlToString(content, encoding, pretty)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.easy_xml import WriteXmlIfChanged\n```\n\n```python\n\n\n```\n\n```python\ndef WriteXmlIfChanged(content, path, encoding='utf-8', pretty=False,\n                      win32=False):\n  \"\"\" Writes the XML content to disk, touching the file only if it has changed.\n  Args:\n    content:  The structured content to be written.\n    path: Location of the file.\n    encoding: The encoding to report on the first line of the XML file.\n    pretty: True if we want pretty printing with indents and new lines.\n  \"\"\"\n  xml_string = XmlToString(content, encoding, pretty)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_xml_escape_map",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "peekOfCode": "_xml_escape_map = {\n    '\"': '&quot;',\n    \"'\": '&apos;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\\n': '&#xA;',\n    '\\r': '&#xD;',\n}\n_xml_escape_re = re.compile(",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.easy_xml import _xml_escape_map\n```\n\n```python\n\n\n```\n\n```python\n_xml_escape_map = {\n    '\"': '&quot;',\n    \"'\": '&apos;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\\n': '&#xA;',\n    '\\r': '&#xD;',\n}\n_xml_escape_re = re.compile(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_xml_escape_re",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "peekOfCode": "_xml_escape_re = re.compile(\n    \"(%s)\" % \"|\".join(map(re.escape, _xml_escape_map.keys())))\ndef _XmlEscape(value, attr=False):\n  \"\"\" Escape a string for inclusion in XML.\"\"\"\n  def replace(match):\n    m = match.string[match.start() : match.end()]\n    # don't replace single quotes in attrs\n    if attr and m == \"'\":\n      return m\n    return _xml_escape_map[m]",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.easy_xml import _xml_escape_re\n```\n\n```python\n\n\n```\n\n```python\n_xml_escape_re = re.compile(\n    \"(%s)\" % \"|\".join(map(re.escape, _xml_escape_map.keys())))\ndef _XmlEscape(value, attr=False):\n  \"\"\" Escape a string for inclusion in XML.\"\"\"\n  def replace(match):\n    m = match.string[match.start() : match.end()]\n    # don't replace single quotes in attrs\n    if attr and m == \"'\":\n      return m\n    return _xml_escape_map[m]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestSequenceFunctions",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml_test",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml_test",
        "peekOfCode": "class TestSequenceFunctions(unittest.TestCase):\n  def setUp(self):\n    self.stderr = StringIO.StringIO()\n  def test_EasyXml_simple(self):\n    self.assertEqual(\n      easy_xml.XmlToString(['test']),\n      '<?xml version=\"1.0\" encoding=\"utf-8\"?><test/>')\n    self.assertEqual(\n      easy_xml.XmlToString(['test'], encoding='Windows-1252'),\n      '<?xml version=\"1.0\" encoding=\"Windows-1252\"?><test/>')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.easy_xml_test",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.easy_xml_test import TestSequenceFunctions\n```\n\n```python\n\n\n```\n\n```python\nclass TestSequenceFunctions(unittest.TestCase):\n  def setUp(self):\n    self.stderr = StringIO.StringIO()\n  def test_EasyXml_simple(self):\n    self.assertEqual(\n      easy_xml.XmlToString(['test']),\n      '<?xml version=\"1.0\" encoding=\"utf-8\"?><test/>')\n    self.assertEqual(\n      easy_xml.XmlToString(['test'], encoding='Windows-1252'),\n      '<?xml version=\"1.0\" encoding=\"Windows-1252\"?><test/>')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FlockTool",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.flock_tool",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.flock_tool",
        "peekOfCode": "class FlockTool(object):\n  \"\"\"This class emulates the 'flock' command.\"\"\"\n  def Dispatch(self, args):\n    \"\"\"Dispatches a string command to a method.\"\"\"\n    if len(args) < 1:\n      raise Exception(\"Not enough arguments\")\n    method = \"Exec%s\" % self._CommandifyName(args[0])\n    getattr(self, method)(*args[1:])\n  def _CommandifyName(self, name_string):\n    \"\"\"Transforms a tool name like copy-info-plist to CopyInfoPlist\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.flock_tool",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.flock_tool import FlockTool\n```\n\n```python\n\n\n```\n\n```python\nclass FlockTool(object):\n  \"\"\"This class emulates the 'flock' command.\"\"\"\n  def Dispatch(self, args):\n    \"\"\"Dispatches a string command to a method.\"\"\"\n    if len(args) < 1:\n      raise Exception(\"Not enough arguments\")\n    method = \"Exec%s\" % self._CommandifyName(args[0])\n    getattr(self, method)(*args[1:])\n  def _CommandifyName(self, name_string):\n    \"\"\"Transforms a tool name like copy-info-plist to CopyInfoPlist\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.flock_tool",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.flock_tool",
        "peekOfCode": "def main(args):\n  executor = FlockTool()\n  executor.Dispatch(args)\nclass FlockTool(object):\n  \"\"\"This class emulates the 'flock' command.\"\"\"\n  def Dispatch(self, args):\n    \"\"\"Dispatches a string command to a method.\"\"\"\n    if len(args) < 1:\n      raise Exception(\"Not enough arguments\")\n    method = \"Exec%s\" % self._CommandifyName(args[0])",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.flock_tool",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.flock_tool import main\n```\n\n```python\n\n\n```\n\n```python\ndef main(args):\n  executor = FlockTool()\n  executor.Dispatch(args)\nclass FlockTool(object):\n  \"\"\"This class emulates the 'flock' command.\"\"\"\n  def Dispatch(self, args):\n    \"\"\"Dispatches a string command to a method.\"\"\"\n    if len(args) < 1:\n      raise Exception(\"Not enough arguments\")\n    method = \"Exec%s\" % self._CommandifyName(args[0])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ParallelProcessingError",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "class ParallelProcessingError(Exception):\n  pass\nclass ParallelState(object):\n  \"\"\"Class to keep track of state when processing input files in parallel.\n  If build files are loaded in parallel, use this to keep track of\n  state during farming out and processing parallel jobs. It's stored\n  in a global so that the callback function can have access to it.\n  \"\"\"\n  def __init__(self):\n    # The multiprocessing pool.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ParallelProcessingError\n```\n\n```python\n\n\n```\n\n```python\nclass ParallelProcessingError(Exception):\n  pass\nclass ParallelState(object):\n  \"\"\"Class to keep track of state when processing input files in parallel.\n  If build files are loaded in parallel, use this to keep track of\n  state during farming out and processing parallel jobs. It's stored\n  in a global so that the callback function can have access to it.\n  \"\"\"\n  def __init__(self):\n    # The multiprocessing pool.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ParallelState",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "class ParallelState(object):\n  \"\"\"Class to keep track of state when processing input files in parallel.\n  If build files are loaded in parallel, use this to keep track of\n  state during farming out and processing parallel jobs. It's stored\n  in a global so that the callback function can have access to it.\n  \"\"\"\n  def __init__(self):\n    # The multiprocessing pool.\n    self.pool = None\n    # The condition variable used to protect this object and notify",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ParallelState\n```\n\n```python\n\n\n```\n\n```python\nclass ParallelState(object):\n  \"\"\"Class to keep track of state when processing input files in parallel.\n  If build files are loaded in parallel, use this to keep track of\n  state during farming out and processing parallel jobs. It's stored\n  in a global so that the callback function can have access to it.\n  \"\"\"\n  def __init__(self):\n    # The multiprocessing pool.\n    self.pool = None\n    # The condition variable used to protect this object and notify\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DependencyGraphNode",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "class DependencyGraphNode(object):\n  \"\"\"\n  Attributes:\n    ref: A reference to an object that this DependencyGraphNode represents.\n    dependencies: List of DependencyGraphNodes on which this one depends.\n    dependents: List of DependencyGraphNodes that depend on this one.\n  \"\"\"\n  class CircularException(GypError):\n    pass\n  def __init__(self, ref):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import DependencyGraphNode\n```\n\n```python\n\n\n```\n\n```python\nclass DependencyGraphNode(object):\n  \"\"\"\n  Attributes:\n    ref: A reference to an object that this DependencyGraphNode represents.\n    dependencies: List of DependencyGraphNodes on which this one depends.\n    dependents: List of DependencyGraphNodes that depend on this one.\n  \"\"\"\n  class CircularException(GypError):\n    pass\n  def __init__(self, ref):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IsPathSection",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def IsPathSection(section):\n  # If section ends in one of the '=+?!' characters, it's applied to a section\n  # without the trailing characters.  '/' is notably absent from this list,\n  # because there's no way for a regular expression to be treated as a path.\n  while section and section[-1:] in '=+?!':\n    section = section[:-1]\n  if section in path_sections:\n    return True\n  # Sections mathing the regexp '_(dir|file|path)s?$' are also\n  # considered PathSections. Using manual string matching since that",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import IsPathSection\n```\n\n```python\n\n\n```\n\n```python\ndef IsPathSection(section):\n  # If section ends in one of the '=+?!' characters, it's applied to a section\n  # without the trailing characters.  '/' is notably absent from this list,\n  # because there's no way for a regular expression to be treated as a path.\n  while section and section[-1:] in '=+?!':\n    section = section[:-1]\n  if section in path_sections:\n    return True\n  # Sections mathing the regexp '_(dir|file|path)s?$' are also\n  # considered PathSections. Using manual string matching since that\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetIncludedBuildFiles",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def GetIncludedBuildFiles(build_file_path, aux_data, included=None):\n  \"\"\"Return a list of all build files included into build_file_path.\n  The returned list will contain build_file_path as well as all other files\n  that it included, either directly or indirectly.  Note that the list may\n  contain files that were included into a conditional section that evaluated\n  to false and was not merged into build_file_path's dict.\n  aux_data is a dict containing a key for each build file or included build\n  file.  Those keys provide access to dicts whose \"included\" keys contain\n  lists of all other files included by the build file.\n  included should be left at its default None value by external callers.  It",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import GetIncludedBuildFiles\n```\n\n```python\n\n\n```\n\n```python\ndef GetIncludedBuildFiles(build_file_path, aux_data, included=None):\n  \"\"\"Return a list of all build files included into build_file_path.\n  The returned list will contain build_file_path as well as all other files\n  that it included, either directly or indirectly.  Note that the list may\n  contain files that were included into a conditional section that evaluated\n  to false and was not merged into build_file_path's dict.\n  aux_data is a dict containing a key for each build file or included build\n  file.  Those keys provide access to dicts whose \"included\" keys contain\n  lists of all other files included by the build file.\n  included should be left at its default None value by external callers.  It\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CheckedEval",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def CheckedEval(file_contents):\n  \"\"\"Return the eval of a gyp file.\n  The gyp file is restricted to dictionaries and lists only, and\n  repeated keys are not allowed.\n  Note that this is slower than eval() is.\n  \"\"\"\n  ast = compiler.parse(file_contents)\n  assert isinstance(ast, Module)\n  c1 = ast.getChildren()\n  assert c1[0] is None",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import CheckedEval\n```\n\n```python\n\n\n```\n\n```python\ndef CheckedEval(file_contents):\n  \"\"\"Return the eval of a gyp file.\n  The gyp file is restricted to dictionaries and lists only, and\n  repeated keys are not allowed.\n  Note that this is slower than eval() is.\n  \"\"\"\n  ast = compiler.parse(file_contents)\n  assert isinstance(ast, Module)\n  c1 = ast.getChildren()\n  assert c1[0] is None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CheckNode",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def CheckNode(node, keypath):\n  if isinstance(node, Dict):\n    c = node.getChildren()\n    dict = {}\n    for n in range(0, len(c), 2):\n      assert isinstance(c[n], Const)\n      key = c[n].getChildren()[0]\n      if key in dict:\n        raise GypError(\"Key '\" + key + \"' repeated at level \" +\n              repr(len(keypath) + 1) + \" with key path '\" +",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import CheckNode\n```\n\n```python\n\n\n```\n\n```python\ndef CheckNode(node, keypath):\n  if isinstance(node, Dict):\n    c = node.getChildren()\n    dict = {}\n    for n in range(0, len(c), 2):\n      assert isinstance(c[n], Const)\n      key = c[n].getChildren()[0]\n      if key in dict:\n        raise GypError(\"Key '\" + key + \"' repeated at level \" +\n              repr(len(keypath) + 1) + \" with key path '\" +\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LoadOneBuildFile",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadOneBuildFile(build_file_path, data, aux_data, includes,\n                     is_target, check):\n  if build_file_path in data:\n    return data[build_file_path]\n  if os.path.exists(build_file_path):\n    # Open the build file for read ('r') with universal-newlines mode ('U')\n    # to make sure platform specific newlines ('\\r\\n' or '\\r') are converted to '\\n'\n    # which otherwise will fail eval()\n    if sys.platform == 'zos':\n      # On z/OS, universal-newlines mode treats the file as an ascii file. But since",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import LoadOneBuildFile\n```\n\n```python\n\n\n```\n\n```python\ndef LoadOneBuildFile(build_file_path, data, aux_data, includes,\n                     is_target, check):\n  if build_file_path in data:\n    return data[build_file_path]\n  if os.path.exists(build_file_path):\n    # Open the build file for read ('r') with universal-newlines mode ('U')\n    # to make sure platform specific newlines ('\\r\\n' or '\\r') are converted to '\\n'\n    # which otherwise will fail eval()\n    if sys.platform == 'zos':\n      # On z/OS, universal-newlines mode treats the file as an ascii file. But since\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LoadBuildFileIncludesIntoDict",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadBuildFileIncludesIntoDict(subdict, subdict_path, data, aux_data,\n                                  includes, check):\n  includes_list = []\n  if includes != None:\n    includes_list.extend(includes)\n  if 'includes' in subdict:\n    for include in subdict['includes']:\n      # \"include\" is specified relative to subdict_path, so compute the real\n      # path to include by appending the provided \"include\" to the directory\n      # in which subdict_path resides.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import LoadBuildFileIncludesIntoDict\n```\n\n```python\n\n\n```\n\n```python\ndef LoadBuildFileIncludesIntoDict(subdict, subdict_path, data, aux_data,\n                                  includes, check):\n  includes_list = []\n  if includes != None:\n    includes_list.extend(includes)\n  if 'includes' in subdict:\n    for include in subdict['includes']:\n      # \"include\" is specified relative to subdict_path, so compute the real\n      # path to include by appending the provided \"include\" to the directory\n      # in which subdict_path resides.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LoadBuildFileIncludesIntoList",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadBuildFileIncludesIntoList(sublist, sublist_path, data, aux_data, check):\n  for item in sublist:\n    if type(item) is dict:\n      LoadBuildFileIncludesIntoDict(item, sublist_path, data, aux_data,\n                                    None, check)\n    elif type(item) is list:\n      LoadBuildFileIncludesIntoList(item, sublist_path, data, aux_data, check)\n# Processes toolsets in all the targets. This recurses into condition entries\n# since they can contain toolsets as well.\ndef ProcessToolsetsInDict(data):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import LoadBuildFileIncludesIntoList\n```\n\n```python\n\n\n```\n\n```python\ndef LoadBuildFileIncludesIntoList(sublist, sublist_path, data, aux_data, check):\n  for item in sublist:\n    if type(item) is dict:\n      LoadBuildFileIncludesIntoDict(item, sublist_path, data, aux_data,\n                                    None, check)\n    elif type(item) is list:\n      LoadBuildFileIncludesIntoList(item, sublist_path, data, aux_data, check)\n# Processes toolsets in all the targets. This recurses into condition entries\n# since they can contain toolsets as well.\ndef ProcessToolsetsInDict(data):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ProcessToolsetsInDict",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ProcessToolsetsInDict(data):\n  if 'targets' in data:\n    target_list = data['targets']\n    new_target_list = []\n    for target in target_list:\n      # If this target already has an explicit 'toolset', and no 'toolsets'\n      # list, don't modify it further.\n      if 'toolset' in target and 'toolsets' not in target:\n        new_target_list.append(target)\n        continue",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ProcessToolsetsInDict\n```\n\n```python\n\n\n```\n\n```python\ndef ProcessToolsetsInDict(data):\n  if 'targets' in data:\n    target_list = data['targets']\n    new_target_list = []\n    for target in target_list:\n      # If this target already has an explicit 'toolset', and no 'toolsets'\n      # list, don't modify it further.\n      if 'toolset' in target and 'toolsets' not in target:\n        new_target_list.append(target)\n        continue\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LoadTargetBuildFile",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadTargetBuildFile(build_file_path, data, aux_data, variables, includes,\n                        depth, check, load_dependencies):\n  # If depth is set, predefine the DEPTH variable to be a relative path from\n  # this build file's directory to the directory identified by depth.\n  if depth:\n    # TODO(dglazkov) The backslash/forward-slash replacement at the end is a\n    # temporary measure. This should really be addressed by keeping all paths\n    # in POSIX until actual project generation.\n    d = gyp.common.RelativePath(depth, os.path.dirname(build_file_path))\n    if d == '':",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import LoadTargetBuildFile\n```\n\n```python\n\n\n```\n\n```python\ndef LoadTargetBuildFile(build_file_path, data, aux_data, variables, includes,\n                        depth, check, load_dependencies):\n  # If depth is set, predefine the DEPTH variable to be a relative path from\n  # this build file's directory to the directory identified by depth.\n  if depth:\n    # TODO(dglazkov) The backslash/forward-slash replacement at the end is a\n    # temporary measure. This should really be addressed by keeping all paths\n    # in POSIX until actual project generation.\n    d = gyp.common.RelativePath(depth, os.path.dirname(build_file_path))\n    if d == '':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CallLoadTargetBuildFile",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def CallLoadTargetBuildFile(global_flags,\n                            build_file_path, variables,\n                            includes, depth, check,\n                            generator_input_info):\n  \"\"\"Wrapper around LoadTargetBuildFile for parallel processing.\n     This wrapper is used when LoadTargetBuildFile is executed in\n     a worker process.\n  \"\"\"\n  try:\n    signal.signal(signal.SIGINT, signal.SIG_IGN)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import CallLoadTargetBuildFile\n```\n\n```python\n\n\n```\n\n```python\ndef CallLoadTargetBuildFile(global_flags,\n                            build_file_path, variables,\n                            includes, depth, check,\n                            generator_input_info):\n  \"\"\"Wrapper around LoadTargetBuildFile for parallel processing.\n     This wrapper is used when LoadTargetBuildFile is executed in\n     a worker process.\n  \"\"\"\n  try:\n    signal.signal(signal.SIGINT, signal.SIG_IGN)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LoadTargetBuildFilesParallel",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadTargetBuildFilesParallel(build_files, data, variables, includes, depth,\n                                 check, generator_input_info):\n  parallel_state = ParallelState()\n  parallel_state.condition = threading.Condition()\n  # Make copies of the build_files argument that we can modify while working.\n  parallel_state.dependencies = list(build_files)\n  parallel_state.scheduled = set(build_files)\n  parallel_state.pending = 0\n  parallel_state.data = data\n  try:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import LoadTargetBuildFilesParallel\n```\n\n```python\n\n\n```\n\n```python\ndef LoadTargetBuildFilesParallel(build_files, data, variables, includes, depth,\n                                 check, generator_input_info):\n  parallel_state = ParallelState()\n  parallel_state.condition = threading.Condition()\n  # Make copies of the build_files argument that we can modify while working.\n  parallel_state.dependencies = list(build_files)\n  parallel_state.scheduled = set(build_files)\n  parallel_state.pending = 0\n  parallel_state.data = data\n  try:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FindEnclosingBracketGroup",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def FindEnclosingBracketGroup(input_str):\n  stack = []\n  start = -1\n  for index, char in enumerate(input_str):\n    if char in LBRACKETS:\n      stack.append(char)\n      if start == -1:\n        start = index\n    elif char in BRACKETS:\n      if not stack:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import FindEnclosingBracketGroup\n```\n\n```python\n\n\n```\n\n```python\ndef FindEnclosingBracketGroup(input_str):\n  stack = []\n  start = -1\n  for index, char in enumerate(input_str):\n    if char in LBRACKETS:\n      stack.append(char)\n      if start == -1:\n        start = index\n    elif char in BRACKETS:\n      if not stack:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IsStrCanonicalInt",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def IsStrCanonicalInt(string):\n  \"\"\"Returns True if |string| is in its canonical integer form.\n  The canonical form is such that str(int(string)) == string.\n  \"\"\"\n  if type(string) is str:\n    # This function is called a lot so for maximum performance, avoid\n    # involving regexps which would otherwise make the code much\n    # shorter. Regexps would need twice the time of this function.\n    if string:\n      if string == \"0\":",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import IsStrCanonicalInt\n```\n\n```python\n\n\n```\n\n```python\ndef IsStrCanonicalInt(string):\n  \"\"\"Returns True if |string| is in its canonical integer form.\n  The canonical form is such that str(int(string)) == string.\n  \"\"\"\n  if type(string) is str:\n    # This function is called a lot so for maximum performance, avoid\n    # involving regexps which would otherwise make the code much\n    # shorter. Regexps would need twice the time of this function.\n    if string:\n      if string == \"0\":\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FixupPlatformCommand",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def FixupPlatformCommand(cmd):\n  if sys.platform == 'win32':\n    if type(cmd) is list:\n      cmd = [re.sub('^cat ', 'type ', cmd[0])] + cmd[1:]\n    else:\n      cmd = re.sub('^cat ', 'type ', cmd)\n  return cmd\nPHASE_EARLY = 0\nPHASE_LATE = 1\nPHASE_LATELATE = 2",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import FixupPlatformCommand\n```\n\n```python\n\n\n```\n\n```python\ndef FixupPlatformCommand(cmd):\n  if sys.platform == 'win32':\n    if type(cmd) is list:\n      cmd = [re.sub('^cat ', 'type ', cmd[0])] + cmd[1:]\n    else:\n      cmd = re.sub('^cat ', 'type ', cmd)\n  return cmd\nPHASE_EARLY = 0\nPHASE_LATE = 1\nPHASE_LATELATE = 2\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ExpandVariables",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ExpandVariables(input, phase, variables, build_file):\n  # Look for the pattern that gets expanded into variables\n  if phase == PHASE_EARLY:\n    variable_re = early_variable_re\n    expansion_symbol = '<'\n  elif phase == PHASE_LATE:\n    variable_re = late_variable_re\n    expansion_symbol = '>'\n  elif phase == PHASE_LATELATE:\n    variable_re = latelate_variable_re",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ExpandVariables\n```\n\n```python\n\n\n```\n\n```python\ndef ExpandVariables(input, phase, variables, build_file):\n  # Look for the pattern that gets expanded into variables\n  if phase == PHASE_EARLY:\n    variable_re = early_variable_re\n    expansion_symbol = '<'\n  elif phase == PHASE_LATE:\n    variable_re = late_variable_re\n    expansion_symbol = '>'\n  elif phase == PHASE_LATELATE:\n    variable_re = latelate_variable_re\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EvalCondition",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def EvalCondition(condition, conditions_key, phase, variables, build_file):\n  \"\"\"Returns the dict that should be used or None if the result was\n  that nothing should be used.\"\"\"\n  if type(condition) is not list:\n    raise GypError(conditions_key + ' must be a list')\n  if len(condition) < 2:\n    # It's possible that condition[0] won't work in which case this\n    # attempt will raise its own IndexError.  That's probably fine.\n    raise GypError(conditions_key + ' ' + condition[0] +\n                   ' must be at least length 2, not ' + str(len(condition)))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import EvalCondition\n```\n\n```python\n\n\n```\n\n```python\ndef EvalCondition(condition, conditions_key, phase, variables, build_file):\n  \"\"\"Returns the dict that should be used or None if the result was\n  that nothing should be used.\"\"\"\n  if type(condition) is not list:\n    raise GypError(conditions_key + ' must be a list')\n  if len(condition) < 2:\n    # It's possible that condition[0] won't work in which case this\n    # attempt will raise its own IndexError.  That's probably fine.\n    raise GypError(conditions_key + ' ' + condition[0] +\n                   ' must be at least length 2, not ' + str(len(condition)))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EvalSingleCondition",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def EvalSingleCondition(\n    cond_expr, true_dict, false_dict, phase, variables, build_file):\n  \"\"\"Returns true_dict if cond_expr evaluates to true, and false_dict\n  otherwise.\"\"\"\n  # Do expansions on the condition itself.  Since the conditon can naturally\n  # contain variable references without needing to resort to GYP expansion\n  # syntax, this is of dubious value for variables, but someone might want to\n  # use a command expansion directly inside a condition.\n  cond_expr_expanded = ExpandVariables(cond_expr, phase, variables,\n                                       build_file)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import EvalSingleCondition\n```\n\n```python\n\n\n```\n\n```python\ndef EvalSingleCondition(\n    cond_expr, true_dict, false_dict, phase, variables, build_file):\n  \"\"\"Returns true_dict if cond_expr evaluates to true, and false_dict\n  otherwise.\"\"\"\n  # Do expansions on the condition itself.  Since the conditon can naturally\n  # contain variable references without needing to resort to GYP expansion\n  # syntax, this is of dubious value for variables, but someone might want to\n  # use a command expansion directly inside a condition.\n  cond_expr_expanded = ExpandVariables(cond_expr, phase, variables,\n                                       build_file)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ProcessConditionsInDict",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ProcessConditionsInDict(the_dict, phase, variables, build_file):\n  # Process a 'conditions' or 'target_conditions' section in the_dict,\n  # depending on phase.\n  # early -> conditions\n  # late -> target_conditions\n  # latelate -> no conditions\n  #\n  # Each item in a conditions list consists of cond_expr, a string expression\n  # evaluated as the condition, and true_dict, a dict that will be merged into\n  # the_dict if cond_expr evaluates to true.  Optionally, a third item,",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ProcessConditionsInDict\n```\n\n```python\n\n\n```\n\n```python\ndef ProcessConditionsInDict(the_dict, phase, variables, build_file):\n  # Process a 'conditions' or 'target_conditions' section in the_dict,\n  # depending on phase.\n  # early -> conditions\n  # late -> target_conditions\n  # latelate -> no conditions\n  #\n  # Each item in a conditions list consists of cond_expr, a string expression\n  # evaluated as the condition, and true_dict, a dict that will be merged into\n  # the_dict if cond_expr evaluates to true.  Optionally, a third item,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LoadAutomaticVariablesFromDict",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadAutomaticVariablesFromDict(variables, the_dict):\n  # Any keys with plain string values in the_dict become automatic variables.\n  # The variable name is the key name with a \"_\" character prepended.\n  for key, value in the_dict.iteritems():\n    if type(value) in (str, int, list):\n      variables['_' + key] = value\ndef LoadVariablesFromVariablesDict(variables, the_dict, the_dict_key):\n  # Any keys in the_dict's \"variables\" dict, if it has one, becomes a\n  # variable.  The variable name is the key name in the \"variables\" dict.\n  # Variables that end with the % character are set only if they are unset in",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import LoadAutomaticVariablesFromDict\n```\n\n```python\n\n\n```\n\n```python\ndef LoadAutomaticVariablesFromDict(variables, the_dict):\n  # Any keys with plain string values in the_dict become automatic variables.\n  # The variable name is the key name with a \"_\" character prepended.\n  for key, value in the_dict.iteritems():\n    if type(value) in (str, int, list):\n      variables['_' + key] = value\ndef LoadVariablesFromVariablesDict(variables, the_dict, the_dict_key):\n  # Any keys in the_dict's \"variables\" dict, if it has one, becomes a\n  # variable.  The variable name is the key name in the \"variables\" dict.\n  # Variables that end with the % character are set only if they are unset in\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LoadVariablesFromVariablesDict",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadVariablesFromVariablesDict(variables, the_dict, the_dict_key):\n  # Any keys in the_dict's \"variables\" dict, if it has one, becomes a\n  # variable.  The variable name is the key name in the \"variables\" dict.\n  # Variables that end with the % character are set only if they are unset in\n  # the variables dict.  the_dict_key is the name of the key that accesses\n  # the_dict in the_dict's parent dict.  If the_dict's parent is not a dict\n  # (it could be a list or it could be parentless because it is a root dict),\n  # the_dict_key will be None.\n  for key, value in the_dict.get('variables', {}).iteritems():\n    if type(value) not in (str, int, list):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import LoadVariablesFromVariablesDict\n```\n\n```python\n\n\n```\n\n```python\ndef LoadVariablesFromVariablesDict(variables, the_dict, the_dict_key):\n  # Any keys in the_dict's \"variables\" dict, if it has one, becomes a\n  # variable.  The variable name is the key name in the \"variables\" dict.\n  # Variables that end with the % character are set only if they are unset in\n  # the variables dict.  the_dict_key is the name of the key that accesses\n  # the_dict in the_dict's parent dict.  If the_dict's parent is not a dict\n  # (it could be a list or it could be parentless because it is a root dict),\n  # the_dict_key will be None.\n  for key, value in the_dict.get('variables', {}).iteritems():\n    if type(value) not in (str, int, list):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ProcessVariablesAndConditionsInDict",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ProcessVariablesAndConditionsInDict(the_dict, phase, variables_in,\n                                        build_file, the_dict_key=None):\n  \"\"\"Handle all variable and command expansion and conditional evaluation.\n  This function is the public entry point for all variable expansions and\n  conditional evaluations.  The variables_in dictionary will not be modified\n  by this function.\n  \"\"\"\n  # Make a copy of the variables_in dict that can be modified during the\n  # loading of automatics and the loading of the variables dict.\n  variables = variables_in.copy()",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ProcessVariablesAndConditionsInDict\n```\n\n```python\n\n\n```\n\n```python\ndef ProcessVariablesAndConditionsInDict(the_dict, phase, variables_in,\n                                        build_file, the_dict_key=None):\n  \"\"\"Handle all variable and command expansion and conditional evaluation.\n  This function is the public entry point for all variable expansions and\n  conditional evaluations.  The variables_in dictionary will not be modified\n  by this function.\n  \"\"\"\n  # Make a copy of the variables_in dict that can be modified during the\n  # loading of automatics and the loading of the variables dict.\n  variables = variables_in.copy()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ProcessVariablesAndConditionsInList",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ProcessVariablesAndConditionsInList(the_list, phase, variables,\n                                        build_file):\n  # Iterate using an index so that new values can be assigned into the_list.\n  index = 0\n  while index < len(the_list):\n    item = the_list[index]\n    if type(item) is dict:\n      # Make a copy of the variables dict so that it won't influence anything\n      # outside of its own scope.\n      ProcessVariablesAndConditionsInDict(item, phase, variables, build_file)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ProcessVariablesAndConditionsInList\n```\n\n```python\n\n\n```\n\n```python\ndef ProcessVariablesAndConditionsInList(the_list, phase, variables,\n                                        build_file):\n  # Iterate using an index so that new values can be assigned into the_list.\n  index = 0\n  while index < len(the_list):\n    item = the_list[index]\n    if type(item) is dict:\n      # Make a copy of the variables dict so that it won't influence anything\n      # outside of its own scope.\n      ProcessVariablesAndConditionsInDict(item, phase, variables, build_file)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BuildTargetsDict",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def BuildTargetsDict(data):\n  \"\"\"Builds a dict mapping fully-qualified target names to their target dicts.\n  |data| is a dict mapping loaded build files by pathname relative to the\n  current directory.  Values in |data| are build file contents.  For each\n  |data| value with a \"targets\" key, the value of the \"targets\" key is taken\n  as a list containing target dicts.  Each target's fully-qualified name is\n  constructed from the pathname of the build file (|data| key) and its\n  \"target_name\" property.  These fully-qualified names are used as the keys\n  in the returned dict.  These keys provide access to the target dicts,\n  the dicts in the \"targets\" lists.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import BuildTargetsDict\n```\n\n```python\n\n\n```\n\n```python\ndef BuildTargetsDict(data):\n  \"\"\"Builds a dict mapping fully-qualified target names to their target dicts.\n  |data| is a dict mapping loaded build files by pathname relative to the\n  current directory.  Values in |data| are build file contents.  For each\n  |data| value with a \"targets\" key, the value of the \"targets\" key is taken\n  as a list containing target dicts.  Each target's fully-qualified name is\n  constructed from the pathname of the build file (|data| key) and its\n  \"target_name\" property.  These fully-qualified names are used as the keys\n  in the returned dict.  These keys provide access to the target dicts,\n  the dicts in the \"targets\" lists.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "QualifyDependencies",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def QualifyDependencies(targets):\n  \"\"\"Make dependency links fully-qualified relative to the current directory.\n  |targets| is a dict mapping fully-qualified target names to their target\n  dicts.  For each target in this dict, keys known to contain dependency\n  links are examined, and any dependencies referenced will be rewritten\n  so that they are fully-qualified and relative to the current directory.\n  All rewritten dependencies are suitable for use as keys to |targets| or a\n  similar dict.\n  \"\"\"\n  all_dependency_sections = [dep + op",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import QualifyDependencies\n```\n\n```python\n\n\n```\n\n```python\ndef QualifyDependencies(targets):\n  \"\"\"Make dependency links fully-qualified relative to the current directory.\n  |targets| is a dict mapping fully-qualified target names to their target\n  dicts.  For each target in this dict, keys known to contain dependency\n  links are examined, and any dependencies referenced will be rewritten\n  so that they are fully-qualified and relative to the current directory.\n  All rewritten dependencies are suitable for use as keys to |targets| or a\n  similar dict.\n  \"\"\"\n  all_dependency_sections = [dep + op\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ExpandWildcardDependencies",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ExpandWildcardDependencies(targets, data):\n  \"\"\"Expands dependencies specified as build_file:*.\n  For each target in |targets|, examines sections containing links to other\n  targets.  If any such section contains a link of the form build_file:*, it\n  is taken as a wildcard link, and is expanded to list each target in\n  build_file.  The |data| dict provides access to build file dicts.\n  Any target that does not wish to be included by wildcard can provide an\n  optional \"suppress_wildcard\" key in its target dict.  When present and\n  true, a wildcard dependency link will not include such targets.\n  All dependency names, including the keys to |targets| and the values in each",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ExpandWildcardDependencies\n```\n\n```python\n\n\n```\n\n```python\ndef ExpandWildcardDependencies(targets, data):\n  \"\"\"Expands dependencies specified as build_file:*.\n  For each target in |targets|, examines sections containing links to other\n  targets.  If any such section contains a link of the form build_file:*, it\n  is taken as a wildcard link, and is expanded to list each target in\n  build_file.  The |data| dict provides access to build file dicts.\n  Any target that does not wish to be included by wildcard can provide an\n  optional \"suppress_wildcard\" key in its target dict.  When present and\n  true, a wildcard dependency link will not include such targets.\n  All dependency names, including the keys to |targets| and the values in each\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Unify",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def Unify(l):\n  \"\"\"Removes duplicate elements from l, keeping the first element.\"\"\"\n  seen = {}\n  return [seen.setdefault(e, e) for e in l if e not in seen]\ndef RemoveDuplicateDependencies(targets):\n  \"\"\"Makes sure every dependency appears only once in all targets's dependency\n  lists.\"\"\"\n  for target_name, target_dict in targets.iteritems():\n    for dependency_key in dependency_sections:\n      dependencies = target_dict.get(dependency_key, [])",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import Unify\n```\n\n```python\n\n\n```\n\n```python\ndef Unify(l):\n  \"\"\"Removes duplicate elements from l, keeping the first element.\"\"\"\n  seen = {}\n  return [seen.setdefault(e, e) for e in l if e not in seen]\ndef RemoveDuplicateDependencies(targets):\n  \"\"\"Makes sure every dependency appears only once in all targets's dependency\n  lists.\"\"\"\n  for target_name, target_dict in targets.iteritems():\n    for dependency_key in dependency_sections:\n      dependencies = target_dict.get(dependency_key, [])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RemoveDuplicateDependencies",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def RemoveDuplicateDependencies(targets):\n  \"\"\"Makes sure every dependency appears only once in all targets's dependency\n  lists.\"\"\"\n  for target_name, target_dict in targets.iteritems():\n    for dependency_key in dependency_sections:\n      dependencies = target_dict.get(dependency_key, [])\n      if dependencies:\n        target_dict[dependency_key] = Unify(dependencies)\ndef Filter(l, item):\n  \"\"\"Removes item from l.\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import RemoveDuplicateDependencies\n```\n\n```python\n\n\n```\n\n```python\ndef RemoveDuplicateDependencies(targets):\n  \"\"\"Makes sure every dependency appears only once in all targets's dependency\n  lists.\"\"\"\n  for target_name, target_dict in targets.iteritems():\n    for dependency_key in dependency_sections:\n      dependencies = target_dict.get(dependency_key, [])\n      if dependencies:\n        target_dict[dependency_key] = Unify(dependencies)\ndef Filter(l, item):\n  \"\"\"Removes item from l.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Filter",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def Filter(l, item):\n  \"\"\"Removes item from l.\"\"\"\n  res = {}\n  return [res.setdefault(e, e) for e in l if e != item]\ndef RemoveSelfDependencies(targets):\n  \"\"\"Remove self dependencies from targets that have the prune_self_dependency\n  variable set.\"\"\"\n  for target_name, target_dict in targets.iteritems():\n    for dependency_key in dependency_sections:\n      dependencies = target_dict.get(dependency_key, [])",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import Filter\n```\n\n```python\n\n\n```\n\n```python\ndef Filter(l, item):\n  \"\"\"Removes item from l.\"\"\"\n  res = {}\n  return [res.setdefault(e, e) for e in l if e != item]\ndef RemoveSelfDependencies(targets):\n  \"\"\"Remove self dependencies from targets that have the prune_self_dependency\n  variable set.\"\"\"\n  for target_name, target_dict in targets.iteritems():\n    for dependency_key in dependency_sections:\n      dependencies = target_dict.get(dependency_key, [])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RemoveSelfDependencies",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def RemoveSelfDependencies(targets):\n  \"\"\"Remove self dependencies from targets that have the prune_self_dependency\n  variable set.\"\"\"\n  for target_name, target_dict in targets.iteritems():\n    for dependency_key in dependency_sections:\n      dependencies = target_dict.get(dependency_key, [])\n      if dependencies:\n        for t in dependencies:\n          if t == target_name:\n            if targets[t].get('variables', {}).get('prune_self_dependency', 0):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import RemoveSelfDependencies\n```\n\n```python\n\n\n```\n\n```python\ndef RemoveSelfDependencies(targets):\n  \"\"\"Remove self dependencies from targets that have the prune_self_dependency\n  variable set.\"\"\"\n  for target_name, target_dict in targets.iteritems():\n    for dependency_key in dependency_sections:\n      dependencies = target_dict.get(dependency_key, [])\n      if dependencies:\n        for t in dependencies:\n          if t == target_name:\n            if targets[t].get('variables', {}).get('prune_self_dependency', 0):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RemoveLinkDependenciesFromNoneTargets",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def RemoveLinkDependenciesFromNoneTargets(targets):\n  \"\"\"Remove dependencies having the 'link_dependency' attribute from the 'none'\n  targets.\"\"\"\n  for target_name, target_dict in targets.iteritems():\n    for dependency_key in dependency_sections:\n      dependencies = target_dict.get(dependency_key, [])\n      if dependencies:\n        for t in dependencies:\n          if target_dict.get('type', None) == 'none':\n            if targets[t].get('variables', {}).get('link_dependency', 0):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import RemoveLinkDependenciesFromNoneTargets\n```\n\n```python\n\n\n```\n\n```python\ndef RemoveLinkDependenciesFromNoneTargets(targets):\n  \"\"\"Remove dependencies having the 'link_dependency' attribute from the 'none'\n  targets.\"\"\"\n  for target_name, target_dict in targets.iteritems():\n    for dependency_key in dependency_sections:\n      dependencies = target_dict.get(dependency_key, [])\n      if dependencies:\n        for t in dependencies:\n          if target_dict.get('type', None) == 'none':\n            if targets[t].get('variables', {}).get('link_dependency', 0):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BuildDependencyList",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def BuildDependencyList(targets):\n  # Create a DependencyGraphNode for each target.  Put it into a dict for easy\n  # access.\n  dependency_nodes = {}\n  for target, spec in targets.iteritems():\n    if target not in dependency_nodes:\n      dependency_nodes[target] = DependencyGraphNode(target)\n  # Set up the dependency links.  Targets that have no dependencies are treated\n  # as dependent on root_node.\n  root_node = DependencyGraphNode(None)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import BuildDependencyList\n```\n\n```python\n\n\n```\n\n```python\ndef BuildDependencyList(targets):\n  # Create a DependencyGraphNode for each target.  Put it into a dict for easy\n  # access.\n  dependency_nodes = {}\n  for target, spec in targets.iteritems():\n    if target not in dependency_nodes:\n      dependency_nodes[target] = DependencyGraphNode(target)\n  # Set up the dependency links.  Targets that have no dependencies are treated\n  # as dependent on root_node.\n  root_node = DependencyGraphNode(None)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "VerifyNoGYPFileCircularDependencies",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def VerifyNoGYPFileCircularDependencies(targets):\n  # Create a DependencyGraphNode for each gyp file containing a target.  Put\n  # it into a dict for easy access.\n  dependency_nodes = {}\n  for target in targets.iterkeys():\n    build_file = gyp.common.BuildFile(target)\n    if not build_file in dependency_nodes:\n      dependency_nodes[build_file] = DependencyGraphNode(build_file)\n  # Set up the dependency links.\n  for target, spec in targets.iteritems():",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import VerifyNoGYPFileCircularDependencies\n```\n\n```python\n\n\n```\n\n```python\ndef VerifyNoGYPFileCircularDependencies(targets):\n  # Create a DependencyGraphNode for each gyp file containing a target.  Put\n  # it into a dict for easy access.\n  dependency_nodes = {}\n  for target in targets.iterkeys():\n    build_file = gyp.common.BuildFile(target)\n    if not build_file in dependency_nodes:\n      dependency_nodes[build_file] = DependencyGraphNode(build_file)\n  # Set up the dependency links.\n  for target, spec in targets.iteritems():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DoDependentSettings",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def DoDependentSettings(key, flat_list, targets, dependency_nodes):\n  # key should be one of all_dependent_settings, direct_dependent_settings,\n  # or link_settings.\n  for target in flat_list:\n    target_dict = targets[target]\n    build_file = gyp.common.BuildFile(target)\n    if key == 'all_dependent_settings':\n      dependencies = dependency_nodes[target].DeepDependencies()\n    elif key == 'direct_dependent_settings':\n      dependencies = \\",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import DoDependentSettings\n```\n\n```python\n\n\n```\n\n```python\ndef DoDependentSettings(key, flat_list, targets, dependency_nodes):\n  # key should be one of all_dependent_settings, direct_dependent_settings,\n  # or link_settings.\n  for target in flat_list:\n    target_dict = targets[target]\n    build_file = gyp.common.BuildFile(target)\n    if key == 'all_dependent_settings':\n      dependencies = dependency_nodes[target].DeepDependencies()\n    elif key == 'direct_dependent_settings':\n      dependencies = \\\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AdjustStaticLibraryDependencies",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def AdjustStaticLibraryDependencies(flat_list, targets, dependency_nodes,\n                                    sort_dependencies):\n  # Recompute target \"dependencies\" properties.  For each static library\n  # target, remove \"dependencies\" entries referring to other static libraries,\n  # unless the dependency has the \"hard_dependency\" attribute set.  For each\n  # linkable target, add a \"dependencies\" entry referring to all of the\n  # target's computed list of link dependencies (including static libraries\n  # if no such entry is already present.\n  for target in flat_list:\n    target_dict = targets[target]",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import AdjustStaticLibraryDependencies\n```\n\n```python\n\n\n```\n\n```python\ndef AdjustStaticLibraryDependencies(flat_list, targets, dependency_nodes,\n                                    sort_dependencies):\n  # Recompute target \"dependencies\" properties.  For each static library\n  # target, remove \"dependencies\" entries referring to other static libraries,\n  # unless the dependency has the \"hard_dependency\" attribute set.  For each\n  # linkable target, add a \"dependencies\" entry referring to all of the\n  # target's computed list of link dependencies (including static libraries\n  # if no such entry is already present.\n  for target in flat_list:\n    target_dict = targets[target]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MakePathRelative",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def MakePathRelative(to_file, fro_file, item):\n  # If item is a relative path, it's relative to the build file dict that it's\n  # coming from.  Fix it up to make it relative to the build file dict that\n  # it's going into.\n  # Exception: any |item| that begins with these special characters is\n  # returned without modification.\n  #   /   Used when a path is already absolute (shortcut optimization;\n  #       such paths would be returned as absolute anyway)\n  #   $   Used for build environment variables\n  #   -   Used for some build environment flags (such as -lapr-1 in a",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import MakePathRelative\n```\n\n```python\n\n\n```\n\n```python\ndef MakePathRelative(to_file, fro_file, item):\n  # If item is a relative path, it's relative to the build file dict that it's\n  # coming from.  Fix it up to make it relative to the build file dict that\n  # it's going into.\n  # Exception: any |item| that begins with these special characters is\n  # returned without modification.\n  #   /   Used when a path is already absolute (shortcut optimization;\n  #       such paths would be returned as absolute anyway)\n  #   $   Used for build environment variables\n  #   -   Used for some build environment flags (such as -lapr-1 in a\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MergeLists",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def MergeLists(to, fro, to_file, fro_file, is_paths=False, append=True):\n  # Python documentation recommends objects which do not support hash\n  # set this value to None. Python library objects follow this rule.\n  is_hashable = lambda val: val.__hash__\n  # If x is hashable, returns whether x is in s. Else returns whether x is in l.\n  def is_in_set_or_list(x, s, l):\n    if is_hashable(x):\n      return x in s\n    return x in l\n  prepend_index = 0",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import MergeLists\n```\n\n```python\n\n\n```\n\n```python\ndef MergeLists(to, fro, to_file, fro_file, is_paths=False, append=True):\n  # Python documentation recommends objects which do not support hash\n  # set this value to None. Python library objects follow this rule.\n  is_hashable = lambda val: val.__hash__\n  # If x is hashable, returns whether x is in s. Else returns whether x is in l.\n  def is_in_set_or_list(x, s, l):\n    if is_hashable(x):\n      return x in s\n    return x in l\n  prepend_index = 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MergeDicts",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def MergeDicts(to, fro, to_file, fro_file):\n  # I wanted to name the parameter \"from\" but it's a Python keyword...\n  for k, v in fro.iteritems():\n    # It would be nice to do \"if not k in to: to[k] = v\" but that wouldn't give\n    # copy semantics.  Something else may want to merge from the |fro| dict\n    # later, and having the same dict ref pointed to twice in the tree isn't\n    # what anyone wants considering that the dicts may subsequently be\n    # modified.\n    if k in to:\n      bad_merge = False",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import MergeDicts\n```\n\n```python\n\n\n```\n\n```python\ndef MergeDicts(to, fro, to_file, fro_file):\n  # I wanted to name the parameter \"from\" but it's a Python keyword...\n  for k, v in fro.iteritems():\n    # It would be nice to do \"if not k in to: to[k] = v\" but that wouldn't give\n    # copy semantics.  Something else may want to merge from the |fro| dict\n    # later, and having the same dict ref pointed to twice in the tree isn't\n    # what anyone wants considering that the dicts may subsequently be\n    # modified.\n    if k in to:\n      bad_merge = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MergeConfigWithInheritance",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def MergeConfigWithInheritance(new_configuration_dict, build_file,\n                               target_dict, configuration, visited):\n  # Skip if previously visted.\n  if configuration in visited:\n    return\n  # Look at this configuration.\n  configuration_dict = target_dict['configurations'][configuration]\n  # Merge in parents.\n  for parent in configuration_dict.get('inherit_from', []):\n    MergeConfigWithInheritance(new_configuration_dict, build_file,",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import MergeConfigWithInheritance\n```\n\n```python\n\n\n```\n\n```python\ndef MergeConfigWithInheritance(new_configuration_dict, build_file,\n                               target_dict, configuration, visited):\n  # Skip if previously visted.\n  if configuration in visited:\n    return\n  # Look at this configuration.\n  configuration_dict = target_dict['configurations'][configuration]\n  # Merge in parents.\n  for parent in configuration_dict.get('inherit_from', []):\n    MergeConfigWithInheritance(new_configuration_dict, build_file,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SetUpConfigurations",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def SetUpConfigurations(target, target_dict):\n  # key_suffixes is a list of key suffixes that might appear on key names.\n  # These suffixes are handled in conditional evaluations (for =, +, and ?)\n  # and rules/exclude processing (for ! and /).  Keys with these suffixes\n  # should be treated the same as keys without.\n  key_suffixes = ['=', '+', '?', '!', '/']\n  build_file = gyp.common.BuildFile(target)\n  # Provide a single configuration by default if none exists.\n  # TODO(mark): Signal an error if default_configurations exists but\n  # configurations does not.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import SetUpConfigurations\n```\n\n```python\n\n\n```\n\n```python\ndef SetUpConfigurations(target, target_dict):\n  # key_suffixes is a list of key suffixes that might appear on key names.\n  # These suffixes are handled in conditional evaluations (for =, +, and ?)\n  # and rules/exclude processing (for ! and /).  Keys with these suffixes\n  # should be treated the same as keys without.\n  key_suffixes = ['=', '+', '?', '!', '/']\n  build_file = gyp.common.BuildFile(target)\n  # Provide a single configuration by default if none exists.\n  # TODO(mark): Signal an error if default_configurations exists but\n  # configurations does not.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ProcessListFiltersInDict",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ProcessListFiltersInDict(name, the_dict):\n  \"\"\"Process regular expression and exclusion-based filters on lists.\n  An exclusion list is in a dict key named with a trailing \"!\", like\n  \"sources!\".  Every item in such a list is removed from the associated\n  main list, which in this example, would be \"sources\".  Removed items are\n  placed into a \"sources_excluded\" list in the dict.\n  Regular expression (regex) filters are contained in dict keys named with a\n  trailing \"/\", such as \"sources/\" to operate on the \"sources\" list.  Regex\n  filters in a dict take the form:\n    'sources/': [ ['exclude', '_(linux|mac|win)\\\\.cc$'],",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ProcessListFiltersInDict\n```\n\n```python\n\n\n```\n\n```python\ndef ProcessListFiltersInDict(name, the_dict):\n  \"\"\"Process regular expression and exclusion-based filters on lists.\n  An exclusion list is in a dict key named with a trailing \"!\", like\n  \"sources!\".  Every item in such a list is removed from the associated\n  main list, which in this example, would be \"sources\".  Removed items are\n  placed into a \"sources_excluded\" list in the dict.\n  Regular expression (regex) filters are contained in dict keys named with a\n  trailing \"/\", such as \"sources/\" to operate on the \"sources\" list.  Regex\n  filters in a dict take the form:\n    'sources/': [ ['exclude', '_(linux|mac|win)\\\\.cc$'],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ProcessListFiltersInList",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ProcessListFiltersInList(name, the_list):\n  for item in the_list:\n    if type(item) is dict:\n      ProcessListFiltersInDict(name, item)\n    elif type(item) is list:\n      ProcessListFiltersInList(name, item)\ndef ValidateTargetType(target, target_dict):\n  \"\"\"Ensures the 'type' field on the target is one of the known types.\n  Arguments:\n    target: string, name of target.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ProcessListFiltersInList\n```\n\n```python\n\n\n```\n\n```python\ndef ProcessListFiltersInList(name, the_list):\n  for item in the_list:\n    if type(item) is dict:\n      ProcessListFiltersInDict(name, item)\n    elif type(item) is list:\n      ProcessListFiltersInList(name, item)\ndef ValidateTargetType(target, target_dict):\n  \"\"\"Ensures the 'type' field on the target is one of the known types.\n  Arguments:\n    target: string, name of target.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ValidateTargetType",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ValidateTargetType(target, target_dict):\n  \"\"\"Ensures the 'type' field on the target is one of the known types.\n  Arguments:\n    target: string, name of target.\n    target_dict: dict, target spec.\n  Raises an exception on error.\n  \"\"\"\n  VALID_TARGET_TYPES = ('executable', 'loadable_module',\n                        'static_library', 'shared_library',\n                        'mac_kernel_extension', 'none')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ValidateTargetType\n```\n\n```python\n\n\n```\n\n```python\ndef ValidateTargetType(target, target_dict):\n  \"\"\"Ensures the 'type' field on the target is one of the known types.\n  Arguments:\n    target: string, name of target.\n    target_dict: dict, target spec.\n  Raises an exception on error.\n  \"\"\"\n  VALID_TARGET_TYPES = ('executable', 'loadable_module',\n                        'static_library', 'shared_library',\n                        'mac_kernel_extension', 'none')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ValidateSourcesInTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ValidateSourcesInTarget(target, target_dict, build_file,\n                            duplicate_basename_check):\n  if not duplicate_basename_check:\n    return\n  if target_dict.get('type', None) != 'static_library':\n    return\n  sources = target_dict.get('sources', [])\n  basenames = {}\n  for source in sources:\n    name, ext = os.path.splitext(source)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ValidateSourcesInTarget\n```\n\n```python\n\n\n```\n\n```python\ndef ValidateSourcesInTarget(target, target_dict, build_file,\n                            duplicate_basename_check):\n  if not duplicate_basename_check:\n    return\n  if target_dict.get('type', None) != 'static_library':\n    return\n  sources = target_dict.get('sources', [])\n  basenames = {}\n  for source in sources:\n    name, ext = os.path.splitext(source)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ValidateRulesInTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ValidateRulesInTarget(target, target_dict, extra_sources_for_rules):\n  \"\"\"Ensures that the rules sections in target_dict are valid and consistent,\n  and determines which sources they apply to.\n  Arguments:\n    target: string, name of target.\n    target_dict: dict, target spec containing \"rules\" and \"sources\" lists.\n    extra_sources_for_rules: a list of keys to scan for rule matches in\n        addition to 'sources'.\n  \"\"\"\n  # Dicts to map between values found in rules' 'rule_name' and 'extension'",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ValidateRulesInTarget\n```\n\n```python\n\n\n```\n\n```python\ndef ValidateRulesInTarget(target, target_dict, extra_sources_for_rules):\n  \"\"\"Ensures that the rules sections in target_dict are valid and consistent,\n  and determines which sources they apply to.\n  Arguments:\n    target: string, name of target.\n    target_dict: dict, target spec containing \"rules\" and \"sources\" lists.\n    extra_sources_for_rules: a list of keys to scan for rule matches in\n        addition to 'sources'.\n  \"\"\"\n  # Dicts to map between values found in rules' 'rule_name' and 'extension'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ValidateRunAsInTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ValidateRunAsInTarget(target, target_dict, build_file):\n  target_name = target_dict.get('target_name')\n  run_as = target_dict.get('run_as')\n  if not run_as:\n    return\n  if type(run_as) is not dict:\n    raise GypError(\"The 'run_as' in target %s from file %s should be a \"\n                   \"dictionary.\" %\n                   (target_name, build_file))\n  action = run_as.get('action')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ValidateRunAsInTarget\n```\n\n```python\n\n\n```\n\n```python\ndef ValidateRunAsInTarget(target, target_dict, build_file):\n  target_name = target_dict.get('target_name')\n  run_as = target_dict.get('run_as')\n  if not run_as:\n    return\n  if type(run_as) is not dict:\n    raise GypError(\"The 'run_as' in target %s from file %s should be a \"\n                   \"dictionary.\" %\n                   (target_name, build_file))\n  action = run_as.get('action')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ValidateActionsInTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ValidateActionsInTarget(target, target_dict, build_file):\n  '''Validates the inputs to the actions in a target.'''\n  target_name = target_dict.get('target_name')\n  actions = target_dict.get('actions', [])\n  for action in actions:\n    action_name = action.get('action_name')\n    if not action_name:\n      raise GypError(\"Anonymous action in target %s.  \"\n                     \"An action must have an 'action_name' field.\" %\n                     target_name)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import ValidateActionsInTarget\n```\n\n```python\n\n\n```\n\n```python\ndef ValidateActionsInTarget(target, target_dict, build_file):\n  '''Validates the inputs to the actions in a target.'''\n  target_name = target_dict.get('target_name')\n  actions = target_dict.get('actions', [])\n  for action in actions:\n    action_name = action.get('action_name')\n    if not action_name:\n      raise GypError(\"Anonymous action in target %s.  \"\n                     \"An action must have an 'action_name' field.\" %\n                     target_name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TurnIntIntoStrInDict",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def TurnIntIntoStrInDict(the_dict):\n  \"\"\"Given dict the_dict, recursively converts all integers into strings.\n  \"\"\"\n  # Use items instead of iteritems because there's no need to try to look at\n  # reinserted keys and their associated values.\n  for k, v in the_dict.items():\n    if type(v) is int:\n      v = str(v)\n      the_dict[k] = v\n    elif type(v) is dict:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import TurnIntIntoStrInDict\n```\n\n```python\n\n\n```\n\n```python\ndef TurnIntIntoStrInDict(the_dict):\n  \"\"\"Given dict the_dict, recursively converts all integers into strings.\n  \"\"\"\n  # Use items instead of iteritems because there's no need to try to look at\n  # reinserted keys and their associated values.\n  for k, v in the_dict.items():\n    if type(v) is int:\n      v = str(v)\n      the_dict[k] = v\n    elif type(v) is dict:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TurnIntIntoStrInList",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def TurnIntIntoStrInList(the_list):\n  \"\"\"Given list the_list, recursively converts all integers into strings.\n  \"\"\"\n  for index in xrange(0, len(the_list)):\n    item = the_list[index]\n    if type(item) is int:\n      the_list[index] = str(item)\n    elif type(item) is dict:\n      TurnIntIntoStrInDict(item)\n    elif type(item) is list:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import TurnIntIntoStrInList\n```\n\n```python\n\n\n```\n\n```python\ndef TurnIntIntoStrInList(the_list):\n  \"\"\"Given list the_list, recursively converts all integers into strings.\n  \"\"\"\n  for index in xrange(0, len(the_list)):\n    item = the_list[index]\n    if type(item) is int:\n      the_list[index] = str(item)\n    elif type(item) is dict:\n      TurnIntIntoStrInDict(item)\n    elif type(item) is list:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PruneUnwantedTargets",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def PruneUnwantedTargets(targets, flat_list, dependency_nodes, root_targets,\n                         data):\n  \"\"\"Return only the targets that are deep dependencies of |root_targets|.\"\"\"\n  qualified_root_targets = []\n  for target in root_targets:\n    target = target.strip()\n    qualified_targets = gyp.common.FindQualifiedTargets(target, flat_list)\n    if not qualified_targets:\n      raise GypError(\"Could not find target %s\" % target)\n    qualified_root_targets.extend(qualified_targets)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import PruneUnwantedTargets\n```\n\n```python\n\n\n```\n\n```python\ndef PruneUnwantedTargets(targets, flat_list, dependency_nodes, root_targets,\n                         data):\n  \"\"\"Return only the targets that are deep dependencies of |root_targets|.\"\"\"\n  qualified_root_targets = []\n  for target in root_targets:\n    target = target.strip()\n    qualified_targets = gyp.common.FindQualifiedTargets(target, flat_list)\n    if not qualified_targets:\n      raise GypError(\"Could not find target %s\" % target)\n    qualified_root_targets.extend(qualified_targets)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "VerifyNoCollidingTargets",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def VerifyNoCollidingTargets(targets):\n  \"\"\"Verify that no two targets in the same directory share the same name.\n  Arguments:\n    targets: A list of targets in the form 'path/to/file.gyp:target_name'.\n  \"\"\"\n  # Keep a dict going from 'subdirectory:target_name' to 'foo.gyp'.\n  used = {}\n  for target in targets:\n    # Separate out 'path/to/file.gyp, 'target_name' from\n    # 'path/to/file.gyp:target_name'.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import VerifyNoCollidingTargets\n```\n\n```python\n\n\n```\n\n```python\ndef VerifyNoCollidingTargets(targets):\n  \"\"\"Verify that no two targets in the same directory share the same name.\n  Arguments:\n    targets: A list of targets in the form 'path/to/file.gyp:target_name'.\n  \"\"\"\n  # Keep a dict going from 'subdirectory:target_name' to 'foo.gyp'.\n  used = {}\n  for target in targets:\n    # Separate out 'path/to/file.gyp, 'target_name' from\n    # 'path/to/file.gyp:target_name'.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SetGeneratorGlobals",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def SetGeneratorGlobals(generator_input_info):\n  # Set up path_sections and non_configuration_keys with the default data plus\n  # the generator-specific data.\n  global path_sections\n  path_sections = set(base_path_sections)\n  path_sections.update(generator_input_info['path_sections'])\n  global non_configuration_keys\n  non_configuration_keys = base_non_configuration_keys[:]\n  non_configuration_keys.extend(generator_input_info['non_configuration_keys'])\n  global multiple_toolsets",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import SetGeneratorGlobals\n```\n\n```python\n\n\n```\n\n```python\ndef SetGeneratorGlobals(generator_input_info):\n  # Set up path_sections and non_configuration_keys with the default data plus\n  # the generator-specific data.\n  global path_sections\n  path_sections = set(base_path_sections)\n  path_sections.update(generator_input_info['path_sections'])\n  global non_configuration_keys\n  non_configuration_keys = base_non_configuration_keys[:]\n  non_configuration_keys.extend(generator_input_info['non_configuration_keys'])\n  global multiple_toolsets\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Load",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def Load(build_files, variables, includes, depth, generator_input_info, check,\n         circular_check, duplicate_basename_check, parallel, root_targets):\n  SetGeneratorGlobals(generator_input_info)\n  # A generator can have other lists (in addition to sources) be processed\n  # for rules.\n  extra_sources_for_rules = generator_input_info['extra_sources_for_rules']\n  # Load build files.  This loads every target-containing build file into\n  # the |data| dictionary such that the keys to |data| are build file names,\n  # and the values are the entire build file contents after \"early\" or \"pre\"\n  # processing has been done and includes have been resolved.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import Load\n```\n\n```python\n\n\n```\n\n```python\ndef Load(build_files, variables, includes, depth, generator_input_info, check,\n         circular_check, duplicate_basename_check, parallel, root_targets):\n  SetGeneratorGlobals(generator_input_info)\n  # A generator can have other lists (in addition to sources) be processed\n  # for rules.\n  extra_sources_for_rules = generator_input_info['extra_sources_for_rules']\n  # Load build files.  This loads every target-containing build file into\n  # the |data| dictionary such that the keys to |data| are build file names,\n  # and the values are the entire build file contents after \"early\" or \"pre\"\n  # processing has been done and includes have been resolved.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "linkable_types",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "linkable_types = [\n  'executable',\n  'shared_library',\n  'loadable_module',\n  'mac_kernel_extension',\n]\n# A list of sections that contain links to other targets.\ndependency_sections = ['dependencies', 'export_dependent_settings']\n# base_path_sections is a list of sections defined by GYP that contain\n# pathnames.  The generators can provide more keys, the two lists are merged",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import linkable_types\n```\n\n```python\n\n\n```\n\n```python\nlinkable_types = [\n  'executable',\n  'shared_library',\n  'loadable_module',\n  'mac_kernel_extension',\n]\n# A list of sections that contain links to other targets.\ndependency_sections = ['dependencies', 'export_dependent_settings']\n# base_path_sections is a list of sections defined by GYP that contain\n# pathnames.  The generators can provide more keys, the two lists are merged\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dependency_sections",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "dependency_sections = ['dependencies', 'export_dependent_settings']\n# base_path_sections is a list of sections defined by GYP that contain\n# pathnames.  The generators can provide more keys, the two lists are merged\n# into path_sections, but you should call IsPathSection instead of using either\n# list directly.\nbase_path_sections = [\n  'destination',\n  'files',\n  'include_dirs',\n  'inputs',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import dependency_sections\n```\n\n```python\n\n\n```\n\n```python\ndependency_sections = ['dependencies', 'export_dependent_settings']\n# base_path_sections is a list of sections defined by GYP that contain\n# pathnames.  The generators can provide more keys, the two lists are merged\n# into path_sections, but you should call IsPathSection instead of using either\n# list directly.\nbase_path_sections = [\n  'destination',\n  'files',\n  'include_dirs',\n  'inputs',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "base_path_sections",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "base_path_sections = [\n  'destination',\n  'files',\n  'include_dirs',\n  'inputs',\n  'libraries',\n  'outputs',\n  'sources',\n]\npath_sections = set()",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import base_path_sections\n```\n\n```python\n\n\n```\n\n```python\nbase_path_sections = [\n  'destination',\n  'files',\n  'include_dirs',\n  'inputs',\n  'libraries',\n  'outputs',\n  'sources',\n]\npath_sections = set()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "path_sections",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "path_sections = set()\n# These per-process dictionaries are used to cache build file data when loading\n# in parallel mode.\nper_process_data = {}\nper_process_aux_data = {}\ndef IsPathSection(section):\n  # If section ends in one of the '=+?!' characters, it's applied to a section\n  # without the trailing characters.  '/' is notably absent from this list,\n  # because there's no way for a regular expression to be treated as a path.\n  while section and section[-1:] in '=+?!':",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import path_sections\n```\n\n```python\n\n\n```\n\n```python\npath_sections = set()\n# These per-process dictionaries are used to cache build file data when loading\n# in parallel mode.\nper_process_data = {}\nper_process_aux_data = {}\ndef IsPathSection(section):\n  # If section ends in one of the '=+?!' characters, it's applied to a section\n  # without the trailing characters.  '/' is notably absent from this list,\n  # because there's no way for a regular expression to be treated as a path.\n  while section and section[-1:] in '=+?!':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "per_process_data",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "per_process_data = {}\nper_process_aux_data = {}\ndef IsPathSection(section):\n  # If section ends in one of the '=+?!' characters, it's applied to a section\n  # without the trailing characters.  '/' is notably absent from this list,\n  # because there's no way for a regular expression to be treated as a path.\n  while section and section[-1:] in '=+?!':\n    section = section[:-1]\n  if section in path_sections:\n    return True",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import per_process_data\n```\n\n```python\n\n\n```\n\n```python\nper_process_data = {}\nper_process_aux_data = {}\ndef IsPathSection(section):\n  # If section ends in one of the '=+?!' characters, it's applied to a section\n  # without the trailing characters.  '/' is notably absent from this list,\n  # because there's no way for a regular expression to be treated as a path.\n  while section and section[-1:] in '=+?!':\n    section = section[:-1]\n  if section in path_sections:\n    return True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "per_process_aux_data",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "per_process_aux_data = {}\ndef IsPathSection(section):\n  # If section ends in one of the '=+?!' characters, it's applied to a section\n  # without the trailing characters.  '/' is notably absent from this list,\n  # because there's no way for a regular expression to be treated as a path.\n  while section and section[-1:] in '=+?!':\n    section = section[:-1]\n  if section in path_sections:\n    return True\n  # Sections mathing the regexp '_(dir|file|path)s?$' are also",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import per_process_aux_data\n```\n\n```python\n\n\n```\n\n```python\nper_process_aux_data = {}\ndef IsPathSection(section):\n  # If section ends in one of the '=+?!' characters, it's applied to a section\n  # without the trailing characters.  '/' is notably absent from this list,\n  # because there's no way for a regular expression to be treated as a path.\n  while section and section[-1:] in '=+?!':\n    section = section[:-1]\n  if section in path_sections:\n    return True\n  # Sections mathing the regexp '_(dir|file|path)s?$' are also\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "base_non_configuration_keys",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "base_non_configuration_keys = [\n  # Sections that must exist inside targets and not configurations.\n  'actions',\n  'configurations',\n  'copies',\n  'default_configuration',\n  'dependencies',\n  'dependencies_original',\n  'libraries',\n  'postbuilds',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import base_non_configuration_keys\n```\n\n```python\n\n\n```\n\n```python\nbase_non_configuration_keys = [\n  # Sections that must exist inside targets and not configurations.\n  'actions',\n  'configurations',\n  'copies',\n  'default_configuration',\n  'dependencies',\n  'dependencies_original',\n  'libraries',\n  'postbuilds',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "non_configuration_keys",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "non_configuration_keys = []\n# Keys that do not belong inside a configuration dictionary.\ninvalid_configuration_keys = [\n  'actions',\n  'all_dependent_settings',\n  'configurations',\n  'dependencies',\n  'direct_dependent_settings',\n  'libraries',\n  'link_settings',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import non_configuration_keys\n```\n\n```python\n\n\n```\n\n```python\nnon_configuration_keys = []\n# Keys that do not belong inside a configuration dictionary.\ninvalid_configuration_keys = [\n  'actions',\n  'all_dependent_settings',\n  'configurations',\n  'dependencies',\n  'direct_dependent_settings',\n  'libraries',\n  'link_settings',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "invalid_configuration_keys",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "invalid_configuration_keys = [\n  'actions',\n  'all_dependent_settings',\n  'configurations',\n  'dependencies',\n  'direct_dependent_settings',\n  'libraries',\n  'link_settings',\n  'sources',\n  'standalone_static_library',",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import invalid_configuration_keys\n```\n\n```python\n\n\n```\n\n```python\ninvalid_configuration_keys = [\n  'actions',\n  'all_dependent_settings',\n  'configurations',\n  'dependencies',\n  'direct_dependent_settings',\n  'libraries',\n  'link_settings',\n  'sources',\n  'standalone_static_library',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "multiple_toolsets",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "multiple_toolsets = False\n# Paths for converting filelist paths to output paths: {\n#   toplevel,\n#   qualified_output_dir,\n# }\ngenerator_filelist_paths = None\ndef GetIncludedBuildFiles(build_file_path, aux_data, included=None):\n  \"\"\"Return a list of all build files included into build_file_path.\n  The returned list will contain build_file_path as well as all other files\n  that it included, either directly or indirectly.  Note that the list may",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import multiple_toolsets\n```\n\n```python\n\n\n```\n\n```python\nmultiple_toolsets = False\n# Paths for converting filelist paths to output paths: {\n#   toplevel,\n#   qualified_output_dir,\n# }\ngenerator_filelist_paths = None\ndef GetIncludedBuildFiles(build_file_path, aux_data, included=None):\n  \"\"\"Return a list of all build files included into build_file_path.\n  The returned list will contain build_file_path as well as all other files\n  that it included, either directly or indirectly.  Note that the list may\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "generator_filelist_paths = None\ndef GetIncludedBuildFiles(build_file_path, aux_data, included=None):\n  \"\"\"Return a list of all build files included into build_file_path.\n  The returned list will contain build_file_path as well as all other files\n  that it included, either directly or indirectly.  Note that the list may\n  contain files that were included into a conditional section that evaluated\n  to false and was not merged into build_file_path's dict.\n  aux_data is a dict containing a key for each build file or included build\n  file.  Those keys provide access to dicts whose \"included\" keys contain\n  lists of all other files included by the build file.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import generator_filelist_paths\n```\n\n```python\n\n\n```\n\n```python\ngenerator_filelist_paths = None\ndef GetIncludedBuildFiles(build_file_path, aux_data, included=None):\n  \"\"\"Return a list of all build files included into build_file_path.\n  The returned list will contain build_file_path as well as all other files\n  that it included, either directly or indirectly.  Note that the list may\n  contain files that were included into a conditional section that evaluated\n  to false and was not merged into build_file_path's dict.\n  aux_data is a dict containing a key for each build file or included build\n  file.  Those keys provide access to dicts whose \"included\" keys contain\n  lists of all other files included by the build file.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BRACKETS",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "BRACKETS = {'}': '{', ']': '[', ')': '('}\ndef FindEnclosingBracketGroup(input_str):\n  stack = []\n  start = -1\n  for index, char in enumerate(input_str):\n    if char in LBRACKETS:\n      stack.append(char)\n      if start == -1:\n        start = index\n    elif char in BRACKETS:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import BRACKETS\n```\n\n```python\n\n\n```\n\n```python\nBRACKETS = {'}': '{', ']': '[', ')': '('}\ndef FindEnclosingBracketGroup(input_str):\n  stack = []\n  start = -1\n  for index, char in enumerate(input_str):\n    if char in LBRACKETS:\n      stack.append(char)\n      if start == -1:\n        start = index\n    elif char in BRACKETS:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "early_variable_re",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "early_variable_re = re.compile(\n    r'(?P<replace>(?P<type><(?:(?:!?@?)|\\|)?)'\n    r'(?P<command_string>[-a-zA-Z0-9_.]+)?'\n    r'\\((?P<is_array>\\s*\\[?)'\n    r'(?P<content>.*?)(\\]?)\\))')\n# This matches the same as early_variable_re, but with '>' instead of '<'.\nlate_variable_re = re.compile(\n    r'(?P<replace>(?P<type>>(?:(?:!?@?)|\\|)?)'\n    r'(?P<command_string>[-a-zA-Z0-9_.]+)?'\n    r'\\((?P<is_array>\\s*\\[?)'",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import early_variable_re\n```\n\n```python\n\n\n```\n\n```python\nearly_variable_re = re.compile(\n    r'(?P<replace>(?P<type><(?:(?:!?@?)|\\|)?)'\n    r'(?P<command_string>[-a-zA-Z0-9_.]+)?'\n    r'\\((?P<is_array>\\s*\\[?)'\n    r'(?P<content>.*?)(\\]?)\\))')\n# This matches the same as early_variable_re, but with '>' instead of '<'.\nlate_variable_re = re.compile(\n    r'(?P<replace>(?P<type>>(?:(?:!?@?)|\\|)?)'\n    r'(?P<command_string>[-a-zA-Z0-9_.]+)?'\n    r'\\((?P<is_array>\\s*\\[?)'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "late_variable_re",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "late_variable_re = re.compile(\n    r'(?P<replace>(?P<type>>(?:(?:!?@?)|\\|)?)'\n    r'(?P<command_string>[-a-zA-Z0-9_.]+)?'\n    r'\\((?P<is_array>\\s*\\[?)'\n    r'(?P<content>.*?)(\\]?)\\))')\n# This matches the same as early_variable_re, but with '^' instead of '<'.\nlatelate_variable_re = re.compile(\n    r'(?P<replace>(?P<type>[\\^](?:(?:!?@?)|\\|)?)'\n    r'(?P<command_string>[-a-zA-Z0-9_.]+)?'\n    r'\\((?P<is_array>\\s*\\[?)'",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import late_variable_re\n```\n\n```python\n\n\n```\n\n```python\nlate_variable_re = re.compile(\n    r'(?P<replace>(?P<type>>(?:(?:!?@?)|\\|)?)'\n    r'(?P<command_string>[-a-zA-Z0-9_.]+)?'\n    r'\\((?P<is_array>\\s*\\[?)'\n    r'(?P<content>.*?)(\\]?)\\))')\n# This matches the same as early_variable_re, but with '^' instead of '<'.\nlatelate_variable_re = re.compile(\n    r'(?P<replace>(?P<type>[\\^](?:(?:!?@?)|\\|)?)'\n    r'(?P<command_string>[-a-zA-Z0-9_.]+)?'\n    r'\\((?P<is_array>\\s*\\[?)'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "latelate_variable_re",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "latelate_variable_re = re.compile(\n    r'(?P<replace>(?P<type>[\\^](?:(?:!?@?)|\\|)?)'\n    r'(?P<command_string>[-a-zA-Z0-9_.]+)?'\n    r'\\((?P<is_array>\\s*\\[?)'\n    r'(?P<content>.*?)(\\]?)\\))')\n# Global cache of results from running commands so they don't have to be run\n# more then once.\ncached_command_results = {}\ndef FixupPlatformCommand(cmd):\n  if sys.platform == 'win32':",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import latelate_variable_re\n```\n\n```python\n\n\n```\n\n```python\nlatelate_variable_re = re.compile(\n    r'(?P<replace>(?P<type>[\\^](?:(?:!?@?)|\\|)?)'\n    r'(?P<command_string>[-a-zA-Z0-9_.]+)?'\n    r'\\((?P<is_array>\\s*\\[?)'\n    r'(?P<content>.*?)(\\]?)\\))')\n# Global cache of results from running commands so they don't have to be run\n# more then once.\ncached_command_results = {}\ndef FixupPlatformCommand(cmd):\n  if sys.platform == 'win32':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cached_command_results",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "cached_command_results = {}\ndef FixupPlatformCommand(cmd):\n  if sys.platform == 'win32':\n    if type(cmd) is list:\n      cmd = [re.sub('^cat ', 'type ', cmd[0])] + cmd[1:]\n    else:\n      cmd = re.sub('^cat ', 'type ', cmd)\n  return cmd\nPHASE_EARLY = 0\nPHASE_LATE = 1",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import cached_command_results\n```\n\n```python\n\n\n```\n\n```python\ncached_command_results = {}\ndef FixupPlatformCommand(cmd):\n  if sys.platform == 'win32':\n    if type(cmd) is list:\n      cmd = [re.sub('^cat ', 'type ', cmd[0])] + cmd[1:]\n    else:\n      cmd = re.sub('^cat ', 'type ', cmd)\n  return cmd\nPHASE_EARLY = 0\nPHASE_LATE = 1\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PHASE_EARLY",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "PHASE_EARLY = 0\nPHASE_LATE = 1\nPHASE_LATELATE = 2\ndef ExpandVariables(input, phase, variables, build_file):\n  # Look for the pattern that gets expanded into variables\n  if phase == PHASE_EARLY:\n    variable_re = early_variable_re\n    expansion_symbol = '<'\n  elif phase == PHASE_LATE:\n    variable_re = late_variable_re",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import PHASE_EARLY\n```\n\n```python\n\n\n```\n\n```python\nPHASE_EARLY = 0\nPHASE_LATE = 1\nPHASE_LATELATE = 2\ndef ExpandVariables(input, phase, variables, build_file):\n  # Look for the pattern that gets expanded into variables\n  if phase == PHASE_EARLY:\n    variable_re = early_variable_re\n    expansion_symbol = '<'\n  elif phase == PHASE_LATE:\n    variable_re = late_variable_re\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PHASE_LATE",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "PHASE_LATE = 1\nPHASE_LATELATE = 2\ndef ExpandVariables(input, phase, variables, build_file):\n  # Look for the pattern that gets expanded into variables\n  if phase == PHASE_EARLY:\n    variable_re = early_variable_re\n    expansion_symbol = '<'\n  elif phase == PHASE_LATE:\n    variable_re = late_variable_re\n    expansion_symbol = '>'",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import PHASE_LATE\n```\n\n```python\n\n\n```\n\n```python\nPHASE_LATE = 1\nPHASE_LATELATE = 2\ndef ExpandVariables(input, phase, variables, build_file):\n  # Look for the pattern that gets expanded into variables\n  if phase == PHASE_EARLY:\n    variable_re = early_variable_re\n    expansion_symbol = '<'\n  elif phase == PHASE_LATE:\n    variable_re = late_variable_re\n    expansion_symbol = '>'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PHASE_LATELATE",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "PHASE_LATELATE = 2\ndef ExpandVariables(input, phase, variables, build_file):\n  # Look for the pattern that gets expanded into variables\n  if phase == PHASE_EARLY:\n    variable_re = early_variable_re\n    expansion_symbol = '<'\n  elif phase == PHASE_LATE:\n    variable_re = late_variable_re\n    expansion_symbol = '>'\n  elif phase == PHASE_LATELATE:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import PHASE_LATELATE\n```\n\n```python\n\n\n```\n\n```python\nPHASE_LATELATE = 2\ndef ExpandVariables(input, phase, variables, build_file):\n  # Look for the pattern that gets expanded into variables\n  if phase == PHASE_EARLY:\n    variable_re = early_variable_re\n    expansion_symbol = '<'\n  elif phase == PHASE_LATE:\n    variable_re = late_variable_re\n    expansion_symbol = '>'\n  elif phase == PHASE_LATELATE:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cached_conditions_asts",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "cached_conditions_asts = {}\ndef EvalCondition(condition, conditions_key, phase, variables, build_file):\n  \"\"\"Returns the dict that should be used or None if the result was\n  that nothing should be used.\"\"\"\n  if type(condition) is not list:\n    raise GypError(conditions_key + ' must be a list')\n  if len(condition) < 2:\n    # It's possible that condition[0] won't work in which case this\n    # attempt will raise its own IndexError.  That's probably fine.\n    raise GypError(conditions_key + ' ' + condition[0] +",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import cached_conditions_asts\n```\n\n```python\n\n\n```\n\n```python\ncached_conditions_asts = {}\ndef EvalCondition(condition, conditions_key, phase, variables, build_file):\n  \"\"\"Returns the dict that should be used or None if the result was\n  that nothing should be used.\"\"\"\n  if type(condition) is not list:\n    raise GypError(conditions_key + ' must be a list')\n  if len(condition) < 2:\n    # It's possible that condition[0] won't work in which case this\n    # attempt will raise its own IndexError.  That's probably fine.\n    raise GypError(conditions_key + ' ' + condition[0] +\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "exception_re",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "exception_re = re.compile(r'''[\"']?[-/$<>^]''')\ndef MakePathRelative(to_file, fro_file, item):\n  # If item is a relative path, it's relative to the build file dict that it's\n  # coming from.  Fix it up to make it relative to the build file dict that\n  # it's going into.\n  # Exception: any |item| that begins with these special characters is\n  # returned without modification.\n  #   /   Used when a path is already absolute (shortcut optimization;\n  #       such paths would be returned as absolute anyway)\n  #   $   Used for build environment variables",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input import exception_re\n```\n\n```python\n\n\n```\n\n```python\nexception_re = re.compile(r'''[\"']?[-/$<>^]''')\ndef MakePathRelative(to_file, fro_file, item):\n  # If item is a relative path, it's relative to the build file dict that it's\n  # coming from.  Fix it up to make it relative to the build file dict that\n  # it's going into.\n  # Exception: any |item| that begins with these special characters is\n  # returned without modification.\n  #   /   Used when a path is already absolute (shortcut optimization;\n  #       such paths would be returned as absolute anyway)\n  #   $   Used for build environment variables\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestFindCycles",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.input_test",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.input_test",
        "peekOfCode": "class TestFindCycles(unittest.TestCase):\n  def setUp(self):\n    self.nodes = {}\n    for x in ('a', 'b', 'c', 'd', 'e'):\n      self.nodes[x] = gyp.input.DependencyGraphNode(x)\n  def _create_dependency(self, dependent, dependency):\n    dependent.dependencies.append(dependency)\n    dependency.dependents.append(dependent)\n  def test_no_cycle_empty_graph(self):\n    for label, node in self.nodes.iteritems():",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.input_test",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.input_test import TestFindCycles\n```\n\n```python\n\n\n```\n\n```python\nclass TestFindCycles(unittest.TestCase):\n  def setUp(self):\n    self.nodes = {}\n    for x in ('a', 'b', 'c', 'd', 'e'):\n      self.nodes[x] = gyp.input.DependencyGraphNode(x)\n  def _create_dependency(self, dependent, dependency):\n    dependent.dependencies.append(dependency)\n    dependency.dependents.append(dependent)\n  def test_no_cycle_empty_graph(self):\n    for label, node in self.nodes.iteritems():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MacTool",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "peekOfCode": "class MacTool(object):\n  \"\"\"This class performs all the Mac tooling steps. The methods can either be\n  executed directly, or dispatched from an argument list.\"\"\"\n  def Dispatch(self, args):\n    \"\"\"Dispatches a string command to a method.\"\"\"\n    if len(args) < 1:\n      raise Exception(\"Not enough arguments\")\n    method = \"Exec%s\" % self._CommandifyName(args[0])\n    return getattr(self, method)(*args[1:])\n  def _CommandifyName(self, name_string):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.mac_tool import MacTool\n```\n\n```python\n\n\n```\n\n```python\nclass MacTool(object):\n  \"\"\"This class performs all the Mac tooling steps. The methods can either be\n  executed directly, or dispatched from an argument list.\"\"\"\n  def Dispatch(self, args):\n    \"\"\"Dispatches a string command to a method.\"\"\"\n    if len(args) < 1:\n      raise Exception(\"Not enough arguments\")\n    method = \"Exec%s\" % self._CommandifyName(args[0])\n    return getattr(self, method)(*args[1:])\n  def _CommandifyName(self, name_string):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "peekOfCode": "def main(args):\n  executor = MacTool()\n  exit_code = executor.Dispatch(args)\n  if exit_code is not None:\n    sys.exit(exit_code)\nclass MacTool(object):\n  \"\"\"This class performs all the Mac tooling steps. The methods can either be\n  executed directly, or dispatched from an argument list.\"\"\"\n  def Dispatch(self, args):\n    \"\"\"Dispatches a string command to a method.\"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.mac_tool import main\n```\n\n```python\n\n\n```\n\n```python\ndef main(args):\n  executor = MacTool()\n  exit_code = executor.Dispatch(args)\n  if exit_code is not None:\n    sys.exit(exit_code)\nclass MacTool(object):\n  \"\"\"This class performs all the Mac tooling steps. The methods can either be\n  executed directly, or dispatched from an argument list.\"\"\"\n  def Dispatch(self, args):\n    \"\"\"Dispatches a string command to a method.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MsvsSettings",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "class MsvsSettings(object):\n  \"\"\"A class that understands the gyp 'msvs_...' values (especially the\n  msvs_settings field). They largely correpond to the VS2008 IDE DOM. This\n  class helps map those settings to command line options.\"\"\"\n  def __init__(self, spec, generator_flags):\n    self.spec = spec\n    self.vs_version = GetVSVersion(generator_flags)\n    supported_fields = [\n        ('msvs_configuration_attributes', dict),\n        ('msvs_settings', dict),",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import MsvsSettings\n```\n\n```python\n\n\n```\n\n```python\nclass MsvsSettings(object):\n  \"\"\"A class that understands the gyp 'msvs_...' values (especially the\n  msvs_settings field). They largely correpond to the VS2008 IDE DOM. This\n  class helps map those settings to command line options.\"\"\"\n  def __init__(self, spec, generator_flags):\n    self.spec = spec\n    self.vs_version = GetVSVersion(generator_flags)\n    supported_fields = [\n        ('msvs_configuration_attributes', dict),\n        ('msvs_settings', dict),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PrecompiledHeader",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "class PrecompiledHeader(object):\n  \"\"\"Helper to generate dependencies and build rules to handle generation of\n  precompiled headers. Interface matches the GCH handler in xcode_emulation.py.\n  \"\"\"\n  def __init__(\n      self, settings, config, gyp_to_build_path, gyp_to_unique_output, obj_ext):\n    self.settings = settings\n    self.config = config\n    pch_source = self.settings.msvs_precompiled_source[self.config]\n    self.pch_source = gyp_to_build_path(pch_source)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import PrecompiledHeader\n```\n\n```python\n\n\n```\n\n```python\nclass PrecompiledHeader(object):\n  \"\"\"Helper to generate dependencies and build rules to handle generation of\n  precompiled headers. Interface matches the GCH handler in xcode_emulation.py.\n  \"\"\"\n  def __init__(\n      self, settings, config, gyp_to_build_path, gyp_to_unique_output, obj_ext):\n    self.settings = settings\n    self.config = config\n    pch_source = self.settings.msvs_precompiled_source[self.config]\n    self.pch_source = gyp_to_build_path(pch_source)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "QuoteForRspFile",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def QuoteForRspFile(arg):\n  \"\"\"Quote a command line argument so that it appears as one argument when\n  processed via cmd.exe and parsed by CommandLineToArgvW (as is typical for\n  Windows programs).\"\"\"\n  # See http://goo.gl/cuFbX and http://goo.gl/dhPnp including the comment\n  # threads. This is actually the quoting rules for CommandLineToArgvW, not\n  # for the shell, because the shell doesn't do anything in Windows. This\n  # works more or less because most programs (including the compiler, etc.)\n  # use that function to handle command line arguments.\n  # For a literal quote, CommandLineToArgvW requires 2n+1 backslashes",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import QuoteForRspFile\n```\n\n```python\n\n\n```\n\n```python\ndef QuoteForRspFile(arg):\n  \"\"\"Quote a command line argument so that it appears as one argument when\n  processed via cmd.exe and parsed by CommandLineToArgvW (as is typical for\n  Windows programs).\"\"\"\n  # See http://goo.gl/cuFbX and http://goo.gl/dhPnp including the comment\n  # threads. This is actually the quoting rules for CommandLineToArgvW, not\n  # for the shell, because the shell doesn't do anything in Windows. This\n  # works more or less because most programs (including the compiler, etc.)\n  # use that function to handle command line arguments.\n  # For a literal quote, CommandLineToArgvW requires 2n+1 backslashes\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EncodeRspFileList",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def EncodeRspFileList(args):\n  \"\"\"Process a list of arguments using QuoteCmdExeArgument.\"\"\"\n  # Note that the first argument is assumed to be the command. Don't add\n  # quotes around it because then built-ins like 'echo', etc. won't work.\n  # Take care to normpath only the path in the case of 'call ../x.bat' because\n  # otherwise the whole thing is incorrectly interpreted as a path and not\n  # normalized correctly.\n  if not args: return ''\n  if args[0].startswith('call '):\n    call, program = args[0].split(' ', 1)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import EncodeRspFileList\n```\n\n```python\n\n\n```\n\n```python\ndef EncodeRspFileList(args):\n  \"\"\"Process a list of arguments using QuoteCmdExeArgument.\"\"\"\n  # Note that the first argument is assumed to be the command. Don't add\n  # quotes around it because then built-ins like 'echo', etc. won't work.\n  # Take care to normpath only the path in the case of 'call ../x.bat' because\n  # otherwise the whole thing is incorrectly interpreted as a path and not\n  # normalized correctly.\n  if not args: return ''\n  if args[0].startswith('call '):\n    call, program = args[0].split(' ', 1)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetGlobalVSMacroEnv",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def GetGlobalVSMacroEnv(vs_version):\n  \"\"\"Get a dict of variables mapping internal VS macro names to their gyp\n  equivalents. Returns all variables that are independent of the target.\"\"\"\n  env = {}\n  # '$(VSInstallDir)' and '$(VCInstallDir)' are available when and only when\n  # Visual Studio is actually installed.\n  if vs_version.Path():\n    env['$(VSInstallDir)'] = vs_version.Path()\n    env['$(VCInstallDir)'] = os.path.join(vs_version.Path(), 'VC') + '\\\\'\n  # Chromium uses DXSDK_DIR in include/lib paths, but it may or may not be",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import GetGlobalVSMacroEnv\n```\n\n```python\n\n\n```\n\n```python\ndef GetGlobalVSMacroEnv(vs_version):\n  \"\"\"Get a dict of variables mapping internal VS macro names to their gyp\n  equivalents. Returns all variables that are independent of the target.\"\"\"\n  env = {}\n  # '$(VSInstallDir)' and '$(VCInstallDir)' are available when and only when\n  # Visual Studio is actually installed.\n  if vs_version.Path():\n    env['$(VSInstallDir)'] = vs_version.Path()\n    env['$(VCInstallDir)'] = os.path.join(vs_version.Path(), 'VC') + '\\\\'\n  # Chromium uses DXSDK_DIR in include/lib paths, but it may or may not be\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ExtractSharedMSVSSystemIncludes",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def ExtractSharedMSVSSystemIncludes(configs, generator_flags):\n  \"\"\"Finds msvs_system_include_dirs that are common to all targets, removes\n  them from all targets, and returns an OrderedSet containing them.\"\"\"\n  all_system_includes = OrderedSet(\n      configs[0].get('msvs_system_include_dirs', []))\n  for config in configs[1:]:\n    system_includes = config.get('msvs_system_include_dirs', [])\n    all_system_includes = all_system_includes & OrderedSet(system_includes)\n  if not all_system_includes:\n    return None",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import ExtractSharedMSVSSystemIncludes\n```\n\n```python\n\n\n```\n\n```python\ndef ExtractSharedMSVSSystemIncludes(configs, generator_flags):\n  \"\"\"Finds msvs_system_include_dirs that are common to all targets, removes\n  them from all targets, and returns an OrderedSet containing them.\"\"\"\n  all_system_includes = OrderedSet(\n      configs[0].get('msvs_system_include_dirs', []))\n  for config in configs[1:]:\n    system_includes = config.get('msvs_system_include_dirs', [])\n    all_system_includes = all_system_includes & OrderedSet(system_includes)\n  if not all_system_includes:\n    return None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetVSVersion",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def GetVSVersion(generator_flags):\n  global vs_version\n  if not vs_version:\n    vs_version = gyp.MSVSVersion.SelectVisualStudioVersion(\n        generator_flags.get('msvs_version', 'auto'),\n        allow_fallback=False)\n  return vs_version\ndef _GetVsvarsSetupArgs(generator_flags, arch):\n  vs = GetVSVersion(generator_flags)\n  return vs.SetupScript()",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import GetVSVersion\n```\n\n```python\n\n\n```\n\n```python\ndef GetVSVersion(generator_flags):\n  global vs_version\n  if not vs_version:\n    vs_version = gyp.MSVSVersion.SelectVisualStudioVersion(\n        generator_flags.get('msvs_version', 'auto'),\n        allow_fallback=False)\n  return vs_version\ndef _GetVsvarsSetupArgs(generator_flags, arch):\n  vs = GetVSVersion(generator_flags)\n  return vs.SetupScript()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ExpandMacros",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def ExpandMacros(string, expansions):\n  \"\"\"Expand $(Variable) per expansions dict. See MsvsSettings.GetVSMacroEnv\n  for the canonical way to retrieve a suitable dict.\"\"\"\n  if '$' in string:\n    for old, new in expansions.iteritems():\n      assert '$(' not in new, new\n      string = string.replace(old, new)\n  return string\ndef _ExtractImportantEnvironment(output_of_set):\n  \"\"\"Extracts environment variables required for the toolchain to run from",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import ExpandMacros\n```\n\n```python\n\n\n```\n\n```python\ndef ExpandMacros(string, expansions):\n  \"\"\"Expand $(Variable) per expansions dict. See MsvsSettings.GetVSMacroEnv\n  for the canonical way to retrieve a suitable dict.\"\"\"\n  if '$' in string:\n    for old, new in expansions.iteritems():\n      assert '$(' not in new, new\n      string = string.replace(old, new)\n  return string\ndef _ExtractImportantEnvironment(output_of_set):\n  \"\"\"Extracts environment variables required for the toolchain to run from\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateEnvironmentFiles",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def GenerateEnvironmentFiles(toplevel_build_dir, generator_flags,\n                             system_includes, open_out):\n  \"\"\"It's not sufficient to have the absolute path to the compiler, linker,\n  etc. on Windows, as those tools rely on .dlls being in the PATH. We also\n  need to support both x86 and x64 compilers within the same build (to support\n  msvs_target_platform hackery). Different architectures require a different\n  compiler binary, and different supporting environment variables (INCLUDE,\n  LIB, LIBPATH). So, we extract the environment here, wrap all invocations\n  of compiler tools (cl, link, lib, rc, midl, etc.) via win_tool.py which\n  sets up the environment, and then we do not prefix the compiler with",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import GenerateEnvironmentFiles\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateEnvironmentFiles(toplevel_build_dir, generator_flags,\n                             system_includes, open_out):\n  \"\"\"It's not sufficient to have the absolute path to the compiler, linker,\n  etc. on Windows, as those tools rely on .dlls being in the PATH. We also\n  need to support both x86 and x64 compilers within the same build (to support\n  msvs_target_platform hackery). Different architectures require a different\n  compiler binary, and different supporting environment variables (INCLUDE,\n  LIB, LIBPATH). So, we extract the environment here, wrap all invocations\n  of compiler tools (cl, link, lib, rc, midl, etc.) via win_tool.py which\n  sets up the environment, and then we do not prefix the compiler with\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "VerifyMissingSources",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def VerifyMissingSources(sources, build_dir, generator_flags, gyp_to_ninja):\n  \"\"\"Emulate behavior of msvs_error_on_missing_sources present in the msvs\n  generator: Check that all regular source files, i.e. not created at run time,\n  exist on disk. Missing files cause needless recompilation when building via\n  VS, and we want this check to match for people/bots that build using ninja,\n  so they're not surprised when the VS build fails.\"\"\"\n  if int(generator_flags.get('msvs_error_on_missing_sources', 0)):\n    no_specials = filter(lambda x: '$' not in x, sources)\n    relative = [os.path.join(build_dir, gyp_to_ninja(s)) for s in no_specials]\n    missing = filter(lambda x: not os.path.exists(x), relative)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import VerifyMissingSources\n```\n\n```python\n\n\n```\n\n```python\ndef VerifyMissingSources(sources, build_dir, generator_flags, gyp_to_ninja):\n  \"\"\"Emulate behavior of msvs_error_on_missing_sources present in the msvs\n  generator: Check that all regular source files, i.e. not created at run time,\n  exist on disk. Missing files cause needless recompilation when building via\n  VS, and we want this check to match for people/bots that build using ninja,\n  so they're not surprised when the VS build fails.\"\"\"\n  if int(generator_flags.get('msvs_error_on_missing_sources', 0)):\n    no_specials = filter(lambda x: '$' not in x, sources)\n    relative = [os.path.join(build_dir, gyp_to_ninja(s)) for s in no_specials]\n    missing = filter(lambda x: not os.path.exists(x), relative)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateCommonVariables",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def CalculateCommonVariables(default_variables, params):\n  generator_flags = params.get('generator_flags', {})\n  # Set a variable so conditions can be based on msvs_version.\n  msvs_version = gyp.msvs_emulation.GetVSVersion(generator_flags)\n  default_variables['MSVS_VERSION'] = msvs_version.ShortName()\n  # To determine processor word size on Windows, in addition to checking\n  # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n  # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n  # contains the actual word size of the system when running thru WOW64).\n  if ('64' in os.environ.get('PROCESSOR_ARCHITECTURE', '') or",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import CalculateCommonVariables\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateCommonVariables(default_variables, params):\n  generator_flags = params.get('generator_flags', {})\n  # Set a variable so conditions can be based on msvs_version.\n  msvs_version = gyp.msvs_emulation.GetVSVersion(generator_flags)\n  default_variables['MSVS_VERSION'] = msvs_version.ShortName()\n  # To determine processor word size on Windows, in addition to checking\n  # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n  # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n  # contains the actual word size of the system when running thru WOW64).\n  if ('64' in os.environ.get('PROCESSOR_ARCHITECTURE', '') or\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "windows_quoter_regex",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "windows_quoter_regex = re.compile(r'(\\\\*)\"')\ndef QuoteForRspFile(arg):\n  \"\"\"Quote a command line argument so that it appears as one argument when\n  processed via cmd.exe and parsed by CommandLineToArgvW (as is typical for\n  Windows programs).\"\"\"\n  # See http://goo.gl/cuFbX and http://goo.gl/dhPnp including the comment\n  # threads. This is actually the quoting rules for CommandLineToArgvW, not\n  # for the shell, because the shell doesn't do anything in Windows. This\n  # works more or less because most programs (including the compiler, etc.)\n  # use that function to handle command line arguments.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import windows_quoter_regex\n```\n\n```python\n\n\n```\n\n```python\nwindows_quoter_regex = re.compile(r'(\\\\*)\"')\ndef QuoteForRspFile(arg):\n  \"\"\"Quote a command line argument so that it appears as one argument when\n  processed via cmd.exe and parsed by CommandLineToArgvW (as is typical for\n  Windows programs).\"\"\"\n  # See http://goo.gl/cuFbX and http://goo.gl/dhPnp including the comment\n  # threads. This is actually the quoting rules for CommandLineToArgvW, not\n  # for the shell, because the shell doesn't do anything in Windows. This\n  # works more or less because most programs (including the compiler, etc.)\n  # use that function to handle command line arguments.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "vs_version",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "vs_version = None\ndef GetVSVersion(generator_flags):\n  global vs_version\n  if not vs_version:\n    vs_version = gyp.MSVSVersion.SelectVisualStudioVersion(\n        generator_flags.get('msvs_version', 'auto'),\n        allow_fallback=False)\n  return vs_version\ndef _GetVsvarsSetupArgs(generator_flags, arch):\n  vs = GetVSVersion(generator_flags)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation import vs_version\n```\n\n```python\n\n\n```\n\n```python\nvs_version = None\ndef GetVSVersion(generator_flags):\n  global vs_version\n  if not vs_version:\n    vs_version = gyp.MSVSVersion.SelectVisualStudioVersion(\n        generator_flags.get('msvs_version', 'auto'),\n        allow_fallback=False)\n  return vs_version\ndef _GetVsvarsSetupArgs(generator_flags, arch):\n  vs = GetVSVersion(generator_flags)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Writer",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "peekOfCode": "class Writer(object):\n    def __init__(self, output, width=78):\n        self.output = output\n        self.width = width\n    def newline(self):\n        self.output.write('\\n')\n    def comment(self, text):\n        for line in textwrap.wrap(text, self.width - 2):\n            self.output.write('# ' + line + '\\n')\n    def variable(self, key, value, indent=0):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax import Writer\n```\n\n```python\n\n\n```\n\n```python\nclass Writer(object):\n    def __init__(self, output, width=78):\n        self.output = output\n        self.width = width\n    def newline(self):\n        self.output.write('\\n')\n    def comment(self, text):\n        for line in textwrap.wrap(text, self.width - 2):\n            self.output.write('# ' + line + '\\n')\n    def variable(self, key, value, indent=0):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "escape_path",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "peekOfCode": "def escape_path(word):\n    return word.replace('$ ','$$ ').replace(' ','$ ').replace(':', '$:')\nclass Writer(object):\n    def __init__(self, output, width=78):\n        self.output = output\n        self.width = width\n    def newline(self):\n        self.output.write('\\n')\n    def comment(self, text):\n        for line in textwrap.wrap(text, self.width - 2):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax import escape_path\n```\n\n```python\n\n\n```\n\n```python\ndef escape_path(word):\n    return word.replace('$ ','$$ ').replace(' ','$ ').replace(':', '$:')\nclass Writer(object):\n    def __init__(self, output, width=78):\n        self.output = output\n        self.width = width\n    def newline(self):\n        self.output.write('\\n')\n    def comment(self, text):\n        for line in textwrap.wrap(text, self.width - 2):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "escape",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "peekOfCode": "def escape(string):\n    \"\"\"Escape a string such that it can be embedded into a Ninja file without\n    further interpretation.\"\"\"\n    assert '\\n' not in string, 'Ninja syntax does not allow newlines'\n    # We only have one special metacharacter: '$'.\n    return string.replace('$', '$$')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax import escape\n```\n\n```python\n\n\n```\n\n```python\ndef escape(string):\n    \"\"\"Escape a string such that it can be embedded into a Ninja file without\n    further interpretation.\"\"\"\n    assert '\\n' not in string, 'Ninja syntax does not allow newlines'\n    # We only have one special metacharacter: '$'.\n    return string.replace('$', '$$')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OrderedDict",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.ordered_dict",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.ordered_dict",
        "peekOfCode": "class OrderedDict(dict):\n    'Dictionary that remembers insertion order'\n    # An inherited dict maps keys to values.\n    # The inherited dict provides __getitem__, __len__, __contains__, and get.\n    # The remaining methods are order-aware.\n    # Big-O running times for all methods are the same as for regular dictionaries.\n    # The internal self.__map dictionary maps keys to links in a doubly linked list.\n    # The circular doubly linked list starts and ends with a sentinel element.\n    # The sentinel element never gets deleted (this simplifies the algorithm).\n    # Each link is stored as a list of length three:  [PREV, NEXT, KEY].",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.ordered_dict",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.ordered_dict import OrderedDict\n```\n\n```python\n\n\n```\n\n```python\nclass OrderedDict(dict):\n    'Dictionary that remembers insertion order'\n    # An inherited dict maps keys to values.\n    # The inherited dict provides __getitem__, __len__, __contains__, and get.\n    # The remaining methods are order-aware.\n    # Big-O running times for all methods are the same as for regular dictionaries.\n    # The internal self.__map dictionary maps keys to links in a doubly linked list.\n    # The circular doubly linked list starts and ends with a sentinel element.\n    # The sentinel element never gets deleted (this simplifies the algorithm).\n    # Each link is stored as a list of length three:  [PREV, NEXT, KEY].\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Error",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "class Error(Exception):\n  pass\n__all__ = [\"Error\", \"deepcopy\"]\ndef deepcopy(x):\n  \"\"\"Deep copy operation on gyp objects such as strings, ints, dicts\n  and lists. More than twice as fast as copy.deepcopy but much less\n  generic.\"\"\"\n  try:\n    return _deepcopy_dispatch[type(x)](x)\n  except KeyError:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.simple_copy import Error\n```\n\n```python\n\n\n```\n\n```python\nclass Error(Exception):\n  pass\n__all__ = [\"Error\", \"deepcopy\"]\ndef deepcopy(x):\n  \"\"\"Deep copy operation on gyp objects such as strings, ints, dicts\n  and lists. More than twice as fast as copy.deepcopy but much less\n  generic.\"\"\"\n  try:\n    return _deepcopy_dispatch[type(x)](x)\n  except KeyError:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "deepcopy",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "def deepcopy(x):\n  \"\"\"Deep copy operation on gyp objects such as strings, ints, dicts\n  and lists. More than twice as fast as copy.deepcopy but much less\n  generic.\"\"\"\n  try:\n    return _deepcopy_dispatch[type(x)](x)\n  except KeyError:\n    raise Error('Unsupported type %s for deepcopy. Use copy.deepcopy ' +\n                'or expand simple_copy support.' % type(x))\n_deepcopy_dispatch = d = {}",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.simple_copy import deepcopy\n```\n\n```python\n\n\n```\n\n```python\ndef deepcopy(x):\n  \"\"\"Deep copy operation on gyp objects such as strings, ints, dicts\n  and lists. More than twice as fast as copy.deepcopy but much less\n  generic.\"\"\"\n  try:\n    return _deepcopy_dispatch[type(x)](x)\n  except KeyError:\n    raise Error('Unsupported type %s for deepcopy. Use copy.deepcopy ' +\n                'or expand simple_copy support.' % type(x))\n_deepcopy_dispatch = d = {}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "__all__ = [\"Error\", \"deepcopy\"]\ndef deepcopy(x):\n  \"\"\"Deep copy operation on gyp objects such as strings, ints, dicts\n  and lists. More than twice as fast as copy.deepcopy but much less\n  generic.\"\"\"\n  try:\n    return _deepcopy_dispatch[type(x)](x)\n  except KeyError:\n    raise Error('Unsupported type %s for deepcopy. Use copy.deepcopy ' +\n                'or expand simple_copy support.' % type(x))",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.simple_copy import __all__\n```\n\n```python\n\n\n```\n\n```python\n__all__ = [\"Error\", \"deepcopy\"]\ndef deepcopy(x):\n  \"\"\"Deep copy operation on gyp objects such as strings, ints, dicts\n  and lists. More than twice as fast as copy.deepcopy but much less\n  generic.\"\"\"\n  try:\n    return _deepcopy_dispatch[type(x)](x)\n  except KeyError:\n    raise Error('Unsupported type %s for deepcopy. Use copy.deepcopy ' +\n                'or expand simple_copy support.' % type(x))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_deepcopy_dispatch",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "_deepcopy_dispatch = d = {}\ndef _deepcopy_atomic(x):\n  return x\nfor x in (type(None), int, long, float,\n          bool, str, unicode, type):\n  d[x] = _deepcopy_atomic\ndef _deepcopy_list(x):\n  return [deepcopy(a) for a in x]\nd[list] = _deepcopy_list\ndef _deepcopy_dict(x):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.simple_copy import _deepcopy_dispatch\n```\n\n```python\n\n\n```\n\n```python\n_deepcopy_dispatch = d = {}\ndef _deepcopy_atomic(x):\n  return x\nfor x in (type(None), int, long, float,\n          bool, str, unicode, type):\n  d[x] = _deepcopy_atomic\ndef _deepcopy_list(x):\n  return [deepcopy(a) for a in x]\nd[list] = _deepcopy_list\ndef _deepcopy_dict(x):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[list]",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "d[list] = _deepcopy_list\ndef _deepcopy_dict(x):\n  y = {}\n  for key, value in x.iteritems():\n    y[deepcopy(key)] = deepcopy(value)\n  return y\nd[dict] = _deepcopy_dict\ndel d",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.simple_copy import d[list]\n```\n\n```python\n\n\n```\n\n```python\nd[list] = _deepcopy_list\ndef _deepcopy_dict(x):\n  y = {}\n  for key, value in x.iteritems():\n    y[deepcopy(key)] = deepcopy(value)\n  return y\nd[dict] = _deepcopy_dict\ndel d\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "d[dict]",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "d[dict] = _deepcopy_dict\ndel d",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.simple_copy import d[dict]\n```\n\n```python\n\n\n```\n\n```python\nd[dict] = _deepcopy_dict\ndel d\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WinTool",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "peekOfCode": "class WinTool(object):\n  \"\"\"This class performs all the Windows tooling steps. The methods can either\n  be executed directly, or dispatched from an argument list.\"\"\"\n  def _UseSeparateMspdbsrv(self, env, args):\n    \"\"\"Allows to use a unique instance of mspdbsrv.exe per linker instead of a\n    shared one.\"\"\"\n    if len(args) < 1:\n      raise Exception(\"Not enough arguments\")\n    if args[0] != 'link.exe':\n      return",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.win_tool import WinTool\n```\n\n```python\n\n\n```\n\n```python\nclass WinTool(object):\n  \"\"\"This class performs all the Windows tooling steps. The methods can either\n  be executed directly, or dispatched from an argument list.\"\"\"\n  def _UseSeparateMspdbsrv(self, env, args):\n    \"\"\"Allows to use a unique instance of mspdbsrv.exe per linker instead of a\n    shared one.\"\"\"\n    if len(args) < 1:\n      raise Exception(\"Not enough arguments\")\n    if args[0] != 'link.exe':\n      return\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "peekOfCode": "def main(args):\n  executor = WinTool()\n  exit_code = executor.Dispatch(args)\n  if exit_code is not None:\n    sys.exit(exit_code)\nclass WinTool(object):\n  \"\"\"This class performs all the Windows tooling steps. The methods can either\n  be executed directly, or dispatched from an argument list.\"\"\"\n  def _UseSeparateMspdbsrv(self, env, args):\n    \"\"\"Allows to use a unique instance of mspdbsrv.exe per linker instead of a",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.win_tool import main\n```\n\n```python\n\n\n```\n\n```python\ndef main(args):\n  executor = WinTool()\n  exit_code = executor.Dispatch(args)\n  if exit_code is not None:\n    sys.exit(exit_code)\nclass WinTool(object):\n  \"\"\"This class performs all the Windows tooling steps. The methods can either\n  be executed directly, or dispatched from an argument list.\"\"\"\n  def _UseSeparateMspdbsrv(self, env, args):\n    \"\"\"Allows to use a unique instance of mspdbsrv.exe per linker instead of a\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.abspath(__file__))\n# A regex matching an argument corresponding to the output filename passed to\n# link.exe.\n_LINK_EXE_OUT_ARG = re.compile('/OUT:(?P<out>.+)$', re.IGNORECASE)\ndef main(args):\n  executor = WinTool()\n  exit_code = executor.Dispatch(args)\n  if exit_code is not None:\n    sys.exit(exit_code)\nclass WinTool(object):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.win_tool import BASE_DIR\n```\n\n```python\n\n\n```\n\n```python\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\n# A regex matching an argument corresponding to the output filename passed to\n# link.exe.\n_LINK_EXE_OUT_ARG = re.compile('/OUT:(?P<out>.+)$', re.IGNORECASE)\ndef main(args):\n  executor = WinTool()\n  exit_code = executor.Dispatch(args)\n  if exit_code is not None:\n    sys.exit(exit_code)\nclass WinTool(object):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_LINK_EXE_OUT_ARG",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "peekOfCode": "_LINK_EXE_OUT_ARG = re.compile('/OUT:(?P<out>.+)$', re.IGNORECASE)\ndef main(args):\n  executor = WinTool()\n  exit_code = executor.Dispatch(args)\n  if exit_code is not None:\n    sys.exit(exit_code)\nclass WinTool(object):\n  \"\"\"This class performs all the Windows tooling steps. The methods can either\n  be executed directly, or dispatched from an argument list.\"\"\"\n  def _UseSeparateMspdbsrv(self, env, args):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.win_tool import _LINK_EXE_OUT_ARG\n```\n\n```python\n\n\n```\n\n```python\n_LINK_EXE_OUT_ARG = re.compile('/OUT:(?P<out>.+)$', re.IGNORECASE)\ndef main(args):\n  executor = WinTool()\n  exit_code = executor.Dispatch(args)\n  if exit_code is not None:\n    sys.exit(exit_code)\nclass WinTool(object):\n  \"\"\"This class performs all the Windows tooling steps. The methods can either\n  be executed directly, or dispatched from an argument list.\"\"\"\n  def _UseSeparateMspdbsrv(self, env, args):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XcodeArchsDefault",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "class XcodeArchsDefault(object):\n  \"\"\"A class to resolve ARCHS variable from xcode_settings, resolving Xcode\n  macros and implementing filtering by VALID_ARCHS. The expansion of macros\n  depends on the SDKROOT used (\"macosx\", \"iphoneos\", \"iphonesimulator\") and\n  on the version of Xcode.\n  \"\"\"\n  # Match variable like $(ARCHS_STANDARD).\n  variable_pattern = re.compile(r'\\$\\([a-zA-Z_][a-zA-Z0-9_]*\\)$')\n  def __init__(self, default, mac, iphonesimulator, iphoneos):\n    self._default = (default,)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import XcodeArchsDefault\n```\n\n```python\n\n\n```\n\n```python\nclass XcodeArchsDefault(object):\n  \"\"\"A class to resolve ARCHS variable from xcode_settings, resolving Xcode\n  macros and implementing filtering by VALID_ARCHS. The expansion of macros\n  depends on the SDKROOT used (\"macosx\", \"iphoneos\", \"iphonesimulator\") and\n  on the version of Xcode.\n  \"\"\"\n  # Match variable like $(ARCHS_STANDARD).\n  variable_pattern = re.compile(r'\\$\\([a-zA-Z_][a-zA-Z0-9_]*\\)$')\n  def __init__(self, default, mac, iphonesimulator, iphoneos):\n    self._default = (default,)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XcodeSettings",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "class XcodeSettings(object):\n  \"\"\"A class that understands the gyp 'xcode_settings' object.\"\"\"\n  # Populated lazily by _SdkPath(). Shared by all XcodeSettings, so cached\n  # at class-level for efficiency.\n  _sdk_path_cache = {}\n  _sdk_root_cache = {}\n  # Populated lazily by GetExtraPlistItems(). Shared by all XcodeSettings, so\n  # cached at class-level for efficiency.\n  _plist_cache = {}\n  # Populated lazily by GetIOSPostbuilds.  Shared by all XcodeSettings, so",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import XcodeSettings\n```\n\n```python\n\n\n```\n\n```python\nclass XcodeSettings(object):\n  \"\"\"A class that understands the gyp 'xcode_settings' object.\"\"\"\n  # Populated lazily by _SdkPath(). Shared by all XcodeSettings, so cached\n  # at class-level for efficiency.\n  _sdk_path_cache = {}\n  _sdk_root_cache = {}\n  # Populated lazily by GetExtraPlistItems(). Shared by all XcodeSettings, so\n  # cached at class-level for efficiency.\n  _plist_cache = {}\n  # Populated lazily by GetIOSPostbuilds.  Shared by all XcodeSettings, so\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MacPrefixHeader",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "class MacPrefixHeader(object):\n  \"\"\"A class that helps with emulating Xcode's GCC_PREFIX_HEADER feature.\n  This feature consists of several pieces:\n  * If GCC_PREFIX_HEADER is present, all compilations in that project get an\n    additional |-include path_to_prefix_header| cflag.\n  * If GCC_PRECOMPILE_PREFIX_HEADER is present too, then the prefix header is\n    instead compiled, and all other compilations in the project get an\n    additional |-include path_to_compiled_header| instead.\n    + Compiled prefix headers have the extension gch. There is one gch file for\n      every language used in the project (c, cc, m, mm), since gch files for",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import MacPrefixHeader\n```\n\n```python\n\n\n```\n\n```python\nclass MacPrefixHeader(object):\n  \"\"\"A class that helps with emulating Xcode's GCC_PREFIX_HEADER feature.\n  This feature consists of several pieces:\n  * If GCC_PREFIX_HEADER is present, all compilations in that project get an\n    additional |-include path_to_prefix_header| cflag.\n  * If GCC_PRECOMPILE_PREFIX_HEADER is present too, then the prefix header is\n    instead compiled, and all other compilations in the project get an\n    additional |-include path_to_compiled_header| instead.\n    + Compiled prefix headers have the extension gch. There is one gch file for\n      every language used in the project (c, cc, m, mm), since gch files for\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XcodeArchsVariableMapping",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def XcodeArchsVariableMapping(archs, archs_including_64_bit=None):\n  \"\"\"Constructs a dictionary with expansion for $(ARCHS_STANDARD) variable,\n  and optionally for $(ARCHS_STANDARD_INCLUDING_64_BIT).\"\"\"\n  mapping = {'$(ARCHS_STANDARD)': archs}\n  if archs_including_64_bit:\n    mapping['$(ARCHS_STANDARD_INCLUDING_64_BIT)'] = archs_including_64_bit\n  return mapping\nclass XcodeArchsDefault(object):\n  \"\"\"A class to resolve ARCHS variable from xcode_settings, resolving Xcode\n  macros and implementing filtering by VALID_ARCHS. The expansion of macros",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import XcodeArchsVariableMapping\n```\n\n```python\n\n\n```\n\n```python\ndef XcodeArchsVariableMapping(archs, archs_including_64_bit=None):\n  \"\"\"Constructs a dictionary with expansion for $(ARCHS_STANDARD) variable,\n  and optionally for $(ARCHS_STANDARD_INCLUDING_64_BIT).\"\"\"\n  mapping = {'$(ARCHS_STANDARD)': archs}\n  if archs_including_64_bit:\n    mapping['$(ARCHS_STANDARD_INCLUDING_64_BIT)'] = archs_including_64_bit\n  return mapping\nclass XcodeArchsDefault(object):\n  \"\"\"A class to resolve ARCHS variable from xcode_settings, resolving Xcode\n  macros and implementing filtering by VALID_ARCHS. The expansion of macros\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetXcodeArchsDefault",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetXcodeArchsDefault():\n  \"\"\"Returns the |XcodeArchsDefault| object to use to expand ARCHS for the\n  installed version of Xcode. The default values used by Xcode for ARCHS\n  and the expansion of the variables depends on the version of Xcode used.\n  For all version anterior to Xcode 5.0 or posterior to Xcode 5.1 included\n  uses $(ARCHS_STANDARD) if ARCHS is unset, while Xcode 5.0 to 5.0.2 uses\n  $(ARCHS_STANDARD_INCLUDING_64_BIT). This variable was added to Xcode 5.0\n  and deprecated with Xcode 5.1.\n  For \"macosx\" SDKROOT, all version starting with Xcode 5.0 includes 64-bit\n  architecture as part of $(ARCHS_STANDARD) and default to only building it.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import GetXcodeArchsDefault\n```\n\n```python\n\n\n```\n\n```python\ndef GetXcodeArchsDefault():\n  \"\"\"Returns the |XcodeArchsDefault| object to use to expand ARCHS for the\n  installed version of Xcode. The default values used by Xcode for ARCHS\n  and the expansion of the variables depends on the version of Xcode used.\n  For all version anterior to Xcode 5.0 or posterior to Xcode 5.1 included\n  uses $(ARCHS_STANDARD) if ARCHS is unset, while Xcode 5.0 to 5.0.2 uses\n  $(ARCHS_STANDARD_INCLUDING_64_BIT). This variable was added to Xcode 5.0\n  and deprecated with Xcode 5.1.\n  For \"macosx\" SDKROOT, all version starting with Xcode 5.0 includes 64-bit\n  architecture as part of $(ARCHS_STANDARD) and default to only building it.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XcodeVersion",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def XcodeVersion():\n  \"\"\"Returns a tuple of version and build version of installed Xcode.\"\"\"\n  # `xcodebuild -version` output looks like\n  #    Xcode 4.6.3\n  #    Build version 4H1503\n  # or like\n  #    Xcode 3.2.6\n  #    Component versions: DevToolsCore-1809.0; DevToolsSupport-1806.0\n  #    BuildVersion: 10M2518\n  # Convert that to '0463', '4H1503'.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import XcodeVersion\n```\n\n```python\n\n\n```\n\n```python\ndef XcodeVersion():\n  \"\"\"Returns a tuple of version and build version of installed Xcode.\"\"\"\n  # `xcodebuild -version` output looks like\n  #    Xcode 4.6.3\n  #    Build version 4H1503\n  # or like\n  #    Xcode 3.2.6\n  #    Component versions: DevToolsCore-1809.0; DevToolsSupport-1806.0\n  #    BuildVersion: 10M2518\n  # Convert that to '0463', '4H1503'.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CLTVersion",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def CLTVersion():\n  \"\"\"Returns the version of command-line tools from pkgutil.\"\"\"\n  # pkgutil output looks like\n  #   package-id: com.apple.pkg.CLTools_Executables\n  #   version: 5.0.1.0.1.1382131676\n  #   volume: /\n  #   location: /\n  #   install-time: 1382544035\n  #   groups: com.apple.FindSystemFiles.pkg-group com.apple.DevToolsBoth.pkg-group com.apple.DevToolsNonRelocatableShared.pkg-group\n  STANDALONE_PKG_ID = \"com.apple.pkg.DeveloperToolsCLILeo\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import CLTVersion\n```\n\n```python\n\n\n```\n\n```python\ndef CLTVersion():\n  \"\"\"Returns the version of command-line tools from pkgutil.\"\"\"\n  # pkgutil output looks like\n  #   package-id: com.apple.pkg.CLTools_Executables\n  #   version: 5.0.1.0.1.1382131676\n  #   volume: /\n  #   location: /\n  #   install-time: 1382544035\n  #   groups: com.apple.FindSystemFiles.pkg-group com.apple.DevToolsBoth.pkg-group com.apple.DevToolsNonRelocatableShared.pkg-group\n  STANDALONE_PKG_ID = \"com.apple.pkg.DeveloperToolsCLILeo\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetStdoutQuiet",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetStdoutQuiet(cmdlist):\n  \"\"\"Returns the content of standard output returned by invoking |cmdlist|.\n  Ignores the stderr.\n  Raises |GypError| if the command return with a non-zero return code.\"\"\"\n  job = subprocess.Popen(cmdlist, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n  out = job.communicate()[0]\n  if job.returncode != 0:\n    raise GypError('Error %d running %s' % (job.returncode, cmdlist[0]))\n  return out.rstrip('\\n')\ndef GetStdout(cmdlist):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import GetStdoutQuiet\n```\n\n```python\n\n\n```\n\n```python\ndef GetStdoutQuiet(cmdlist):\n  \"\"\"Returns the content of standard output returned by invoking |cmdlist|.\n  Ignores the stderr.\n  Raises |GypError| if the command return with a non-zero return code.\"\"\"\n  job = subprocess.Popen(cmdlist, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n  out = job.communicate()[0]\n  if job.returncode != 0:\n    raise GypError('Error %d running %s' % (job.returncode, cmdlist[0]))\n  return out.rstrip('\\n')\ndef GetStdout(cmdlist):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetStdout",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetStdout(cmdlist):\n  \"\"\"Returns the content of standard output returned by invoking |cmdlist|.\n  Raises |GypError| if the command return with a non-zero return code.\"\"\"\n  job = subprocess.Popen(cmdlist, stdout=subprocess.PIPE)\n  out = job.communicate()[0]\n  if job.returncode != 0:\n    sys.stderr.write(out + '\\n')\n    raise GypError('Error %d running %s' % (job.returncode, cmdlist[0]))\n  return out.rstrip('\\n')\ndef MergeGlobalXcodeSettingsToSpec(global_dict, spec):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import GetStdout\n```\n\n```python\n\n\n```\n\n```python\ndef GetStdout(cmdlist):\n  \"\"\"Returns the content of standard output returned by invoking |cmdlist|.\n  Raises |GypError| if the command return with a non-zero return code.\"\"\"\n  job = subprocess.Popen(cmdlist, stdout=subprocess.PIPE)\n  out = job.communicate()[0]\n  if job.returncode != 0:\n    sys.stderr.write(out + '\\n')\n    raise GypError('Error %d running %s' % (job.returncode, cmdlist[0]))\n  return out.rstrip('\\n')\ndef MergeGlobalXcodeSettingsToSpec(global_dict, spec):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MergeGlobalXcodeSettingsToSpec",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def MergeGlobalXcodeSettingsToSpec(global_dict, spec):\n  \"\"\"Merges the global xcode_settings dictionary into each configuration of the\n  target represented by spec. For keys that are both in the global and the local\n  xcode_settings dict, the local key gets precendence.\n  \"\"\"\n  # The xcode generator special-cases global xcode_settings and does something\n  # that amounts to merging in the global xcode_settings into each local\n  # xcode_settings dict.\n  global_xcode_settings = global_dict.get('xcode_settings', {})\n  for config in spec['configurations'].values():",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import MergeGlobalXcodeSettingsToSpec\n```\n\n```python\n\n\n```\n\n```python\ndef MergeGlobalXcodeSettingsToSpec(global_dict, spec):\n  \"\"\"Merges the global xcode_settings dictionary into each configuration of the\n  target represented by spec. For keys that are both in the global and the local\n  xcode_settings dict, the local key gets precendence.\n  \"\"\"\n  # The xcode generator special-cases global xcode_settings and does something\n  # that amounts to merging in the global xcode_settings into each local\n  # xcode_settings dict.\n  global_xcode_settings = global_dict.get('xcode_settings', {})\n  for config in spec['configurations'].values():\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IsMacBundle",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def IsMacBundle(flavor, spec):\n  \"\"\"Returns if |spec| should be treated as a bundle.\n  Bundles are directories with a certain subdirectory structure, instead of\n  just a single file. Bundle rules do not produce a binary but also package\n  resources into that directory.\"\"\"\n  is_mac_bundle = (int(spec.get('mac_bundle', 0)) != 0 and flavor == 'mac')\n  if is_mac_bundle:\n    assert spec['type'] != 'none', (\n        'mac_bundle targets cannot have type none (target \"%s\")' %\n        spec['target_name'])",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import IsMacBundle\n```\n\n```python\n\n\n```\n\n```python\ndef IsMacBundle(flavor, spec):\n  \"\"\"Returns if |spec| should be treated as a bundle.\n  Bundles are directories with a certain subdirectory structure, instead of\n  just a single file. Bundle rules do not produce a binary but also package\n  resources into that directory.\"\"\"\n  is_mac_bundle = (int(spec.get('mac_bundle', 0)) != 0 and flavor == 'mac')\n  if is_mac_bundle:\n    assert spec['type'] != 'none', (\n        'mac_bundle targets cannot have type none (target \"%s\")' %\n        spec['target_name'])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetMacBundleResources",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetMacBundleResources(product_dir, xcode_settings, resources):\n  \"\"\"Yields (output, resource) pairs for every resource in |resources|.\n  Only call this for mac bundle targets.\n  Args:\n      product_dir: Path to the directory containing the output bundle,\n          relative to the build directory.\n      xcode_settings: The XcodeSettings of the current target.\n      resources: A list of bundle resources, relative to the build directory.\n  \"\"\"\n  dest = os.path.join(product_dir,",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import GetMacBundleResources\n```\n\n```python\n\n\n```\n\n```python\ndef GetMacBundleResources(product_dir, xcode_settings, resources):\n  \"\"\"Yields (output, resource) pairs for every resource in |resources|.\n  Only call this for mac bundle targets.\n  Args:\n      product_dir: Path to the directory containing the output bundle,\n          relative to the build directory.\n      xcode_settings: The XcodeSettings of the current target.\n      resources: A list of bundle resources, relative to the build directory.\n  \"\"\"\n  dest = os.path.join(product_dir,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetMacInfoPlist",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetMacInfoPlist(product_dir, xcode_settings, gyp_path_to_build_path):\n  \"\"\"Returns (info_plist, dest_plist, defines, extra_env), where:\n  * |info_plist| is the source plist path, relative to the\n    build directory,\n  * |dest_plist| is the destination plist path, relative to the\n    build directory,\n  * |defines| is a list of preprocessor defines (empty if the plist\n    shouldn't be preprocessed,\n  * |extra_env| is a dict of env variables that should be exported when\n    invoking |mac_tool copy-info-plist|.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import GetMacInfoPlist\n```\n\n```python\n\n\n```\n\n```python\ndef GetMacInfoPlist(product_dir, xcode_settings, gyp_path_to_build_path):\n  \"\"\"Returns (info_plist, dest_plist, defines, extra_env), where:\n  * |info_plist| is the source plist path, relative to the\n    build directory,\n  * |dest_plist| is the destination plist path, relative to the\n    build directory,\n  * |defines| is a list of preprocessor defines (empty if the plist\n    shouldn't be preprocessed,\n  * |extra_env| is a dict of env variables that should be exported when\n    invoking |mac_tool copy-info-plist|.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ExpandEnvVars",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def ExpandEnvVars(string, expansions):\n  \"\"\"Expands ${VARIABLES}, $(VARIABLES), and $VARIABLES in string per the\n  expansions list. If the variable expands to something that references\n  another variable, this variable is expanded as well if it's in env --\n  until no variables present in env are left.\"\"\"\n  for k, v in reversed(expansions):\n    string = string.replace('${' + k + '}', v)\n    string = string.replace('$(' + k + ')', v)\n    string = string.replace('$' + k, v)\n  return string",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import ExpandEnvVars\n```\n\n```python\n\n\n```\n\n```python\ndef ExpandEnvVars(string, expansions):\n  \"\"\"Expands ${VARIABLES}, $(VARIABLES), and $VARIABLES in string per the\n  expansions list. If the variable expands to something that references\n  another variable, this variable is expanded as well if it's in env --\n  until no variables present in env are left.\"\"\"\n  for k, v in reversed(expansions):\n    string = string.replace('${' + k + '}', v)\n    string = string.replace('$(' + k + ')', v)\n    string = string.replace('$' + k, v)\n  return string\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetSortedXcodeEnv",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetSortedXcodeEnv(xcode_settings, built_products_dir, srcroot,\n                      configuration, additional_settings=None):\n  env = _GetXcodeEnv(xcode_settings, built_products_dir, srcroot, configuration,\n                    additional_settings)\n  return [(key, env[key]) for key in _TopologicallySortedEnvVarKeys(env)]\ndef GetSpecPostbuildCommands(spec, quiet=False):\n  \"\"\"Returns the list of postbuilds explicitly defined on |spec|, in a form\n  executable by a shell.\"\"\"\n  postbuilds = []\n  for postbuild in spec.get('postbuilds', []):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import GetSortedXcodeEnv\n```\n\n```python\n\n\n```\n\n```python\ndef GetSortedXcodeEnv(xcode_settings, built_products_dir, srcroot,\n                      configuration, additional_settings=None):\n  env = _GetXcodeEnv(xcode_settings, built_products_dir, srcroot, configuration,\n                    additional_settings)\n  return [(key, env[key]) for key in _TopologicallySortedEnvVarKeys(env)]\ndef GetSpecPostbuildCommands(spec, quiet=False):\n  \"\"\"Returns the list of postbuilds explicitly defined on |spec|, in a form\n  executable by a shell.\"\"\"\n  postbuilds = []\n  for postbuild in spec.get('postbuilds', []):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetSpecPostbuildCommands",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetSpecPostbuildCommands(spec, quiet=False):\n  \"\"\"Returns the list of postbuilds explicitly defined on |spec|, in a form\n  executable by a shell.\"\"\"\n  postbuilds = []\n  for postbuild in spec.get('postbuilds', []):\n    if not quiet:\n      postbuilds.append('echo POSTBUILD\\\\(%s\\\\) %s' % (\n            spec['target_name'], postbuild['postbuild_name']))\n    postbuilds.append(gyp.common.EncodePOSIXShellList(postbuild['action']))\n  return postbuilds",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import GetSpecPostbuildCommands\n```\n\n```python\n\n\n```\n\n```python\ndef GetSpecPostbuildCommands(spec, quiet=False):\n  \"\"\"Returns the list of postbuilds explicitly defined on |spec|, in a form\n  executable by a shell.\"\"\"\n  postbuilds = []\n  for postbuild in spec.get('postbuilds', []):\n    if not quiet:\n      postbuilds.append('echo POSTBUILD\\\\(%s\\\\) %s' % (\n            spec['target_name'], postbuild['postbuild_name']))\n    postbuilds.append(gyp.common.EncodePOSIXShellList(postbuild['action']))\n  return postbuilds\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CloneConfigurationForDeviceAndEmulator",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def CloneConfigurationForDeviceAndEmulator(target_dicts):\n  \"\"\"If |target_dicts| contains any iOS targets, automatically create -iphoneos\n  targets for iOS device builds.\"\"\"\n  if _HasIOSTarget(target_dicts):\n    return _AddIOSDeviceConfigurations(target_dicts)\n  return target_dicts",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import CloneConfigurationForDeviceAndEmulator\n```\n\n```python\n\n\n```\n\n```python\ndef CloneConfigurationForDeviceAndEmulator(target_dicts):\n  \"\"\"If |target_dicts| contains any iOS targets, automatically create -iphoneos\n  targets for iOS device builds.\"\"\"\n  if _HasIOSTarget(target_dicts):\n    return _AddIOSDeviceConfigurations(target_dicts)\n  return target_dicts\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XCODE_VERSION_CACHE",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "XCODE_VERSION_CACHE = None\n# Populated lazily by GetXcodeArchsDefault, to an |XcodeArchsDefault| instance\n# corresponding to the installed version of Xcode.\nXCODE_ARCHS_DEFAULT_CACHE = None\ndef XcodeArchsVariableMapping(archs, archs_including_64_bit=None):\n  \"\"\"Constructs a dictionary with expansion for $(ARCHS_STANDARD) variable,\n  and optionally for $(ARCHS_STANDARD_INCLUDING_64_BIT).\"\"\"\n  mapping = {'$(ARCHS_STANDARD)': archs}\n  if archs_including_64_bit:\n    mapping['$(ARCHS_STANDARD_INCLUDING_64_BIT)'] = archs_including_64_bit",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import XCODE_VERSION_CACHE\n```\n\n```python\n\n\n```\n\n```python\nXCODE_VERSION_CACHE = None\n# Populated lazily by GetXcodeArchsDefault, to an |XcodeArchsDefault| instance\n# corresponding to the installed version of Xcode.\nXCODE_ARCHS_DEFAULT_CACHE = None\ndef XcodeArchsVariableMapping(archs, archs_including_64_bit=None):\n  \"\"\"Constructs a dictionary with expansion for $(ARCHS_STANDARD) variable,\n  and optionally for $(ARCHS_STANDARD_INCLUDING_64_BIT).\"\"\"\n  mapping = {'$(ARCHS_STANDARD)': archs}\n  if archs_including_64_bit:\n    mapping['$(ARCHS_STANDARD_INCLUDING_64_BIT)'] = archs_including_64_bit\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XCODE_ARCHS_DEFAULT_CACHE",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "XCODE_ARCHS_DEFAULT_CACHE = None\ndef XcodeArchsVariableMapping(archs, archs_including_64_bit=None):\n  \"\"\"Constructs a dictionary with expansion for $(ARCHS_STANDARD) variable,\n  and optionally for $(ARCHS_STANDARD_INCLUDING_64_BIT).\"\"\"\n  mapping = {'$(ARCHS_STANDARD)': archs}\n  if archs_including_64_bit:\n    mapping['$(ARCHS_STANDARD_INCLUDING_64_BIT)'] = archs_including_64_bit\n  return mapping\nclass XcodeArchsDefault(object):\n  \"\"\"A class to resolve ARCHS variable from xcode_settings, resolving Xcode",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation import XCODE_ARCHS_DEFAULT_CACHE\n```\n\n```python\n\n\n```\n\n```python\nXCODE_ARCHS_DEFAULT_CACHE = None\ndef XcodeArchsVariableMapping(archs, archs_including_64_bit=None):\n  \"\"\"Constructs a dictionary with expansion for $(ARCHS_STANDARD) variable,\n  and optionally for $(ARCHS_STANDARD_INCLUDING_64_BIT).\"\"\"\n  mapping = {'$(ARCHS_STANDARD)': archs}\n  if archs_including_64_bit:\n    mapping['$(ARCHS_STANDARD_INCLUDING_64_BIT)'] = archs_including_64_bit\n  return mapping\nclass XcodeArchsDefault(object):\n  \"\"\"A class to resolve ARCHS variable from xcode_settings, resolving Xcode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IsValidTargetForWrapper",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja",
        "peekOfCode": "def IsValidTargetForWrapper(target_extras, executable_target_pattern, spec):\n  \"\"\"Limit targets for Xcode wrapper.\n  Xcode sometimes performs poorly with too many targets, so only include\n  proper executable targets, with filters to customize.\n  Arguments:\n    target_extras: Regular expression to always add, matching any target.\n    executable_target_pattern: Regular expression limiting executable targets.\n    spec: Specifications for target.\n  \"\"\"\n  target_name = spec.get('target_name')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja import IsValidTargetForWrapper\n```\n\n```python\n\n\n```\n\n```python\ndef IsValidTargetForWrapper(target_extras, executable_target_pattern, spec):\n  \"\"\"Limit targets for Xcode wrapper.\n  Xcode sometimes performs poorly with too many targets, so only include\n  proper executable targets, with filters to customize.\n  Arguments:\n    target_extras: Regular expression to always add, matching any target.\n    executable_target_pattern: Regular expression limiting executable targets.\n    spec: Specifications for target.\n  \"\"\"\n  target_name = spec.get('target_name')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CreateWrapper",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja",
        "peekOfCode": "def CreateWrapper(target_list, target_dicts, data, params):\n  \"\"\"Initialize targets for the ninja wrapper.\n  This sets up the necessary variables in the targets to generate Xcode projects\n  that use ninja as an external builder.\n  Arguments:\n    target_list: List of target pairs: 'base/base.gyp:base'.\n    target_dicts: Dict of target properties keyed on target pair.\n    data: Dict of flattened build files keyed on gyp path.\n    params: Dict of global options for gyp.\n  \"\"\"",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja import CreateWrapper\n```\n\n```python\n\n\n```\n\n```python\ndef CreateWrapper(target_list, target_dicts, data, params):\n  \"\"\"Initialize targets for the ninja wrapper.\n  This sets up the necessary variables in the targets to generate Xcode projects\n  that use ninja as an external builder.\n  Arguments:\n    target_list: List of target pairs: 'base/base.gyp:base'.\n    target_dicts: Dict of target properties keyed on target pair.\n    data: Dict of flattened build files keyed on gyp path.\n    params: Dict of global options for gyp.\n  \"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XCObject",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCObject(object):\n  \"\"\"The abstract base of all class types used in Xcode project files.\n  Class variables:\n    _schema: A dictionary defining the properties of this class.  The keys to\n             _schema are string property keys as used in project files.  Values\n             are a list of four or five elements:\n             [ is_list, property_type, is_strong, is_required, default ]\n             is_list: True if the property described is a list, as opposed\n                      to a single element.\n             property_type: The type to use as the value of the property,",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import XCObject\n```\n\n```python\n\n\n```\n\n```python\nclass XCObject(object):\n  \"\"\"The abstract base of all class types used in Xcode project files.\n  Class variables:\n    _schema: A dictionary defining the properties of this class.  The keys to\n             _schema are string property keys as used in project files.  Values\n             are a list of four or five elements:\n             [ is_list, property_type, is_strong, is_required, default ]\n             is_list: True if the property described is a list, as opposed\n                      to a single element.\n             property_type: The type to use as the value of the property,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XCHierarchicalElement",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCHierarchicalElement(XCObject):\n  \"\"\"Abstract base for PBXGroup and PBXFileReference.  Not represented in a\n  project file.\"\"\"\n  # TODO(mark): Do name and path belong here?  Probably so.\n  # If path is set and name is not, name may have a default value.  Name will\n  # be set to the basename of path, if the basename of path is different from\n  # the full value of path.  If path is already just a leaf name, name will\n  # not be set.\n  _schema = XCObject._schema.copy()\n  _schema.update({",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import XCHierarchicalElement\n```\n\n```python\n\n\n```\n\n```python\nclass XCHierarchicalElement(XCObject):\n  \"\"\"Abstract base for PBXGroup and PBXFileReference.  Not represented in a\n  project file.\"\"\"\n  # TODO(mark): Do name and path belong here?  Probably so.\n  # If path is set and name is not, name may have a default value.  Name will\n  # be set to the basename of path, if the basename of path is different from\n  # the full value of path.  If path is already just a leaf name, name will\n  # not be set.\n  _schema = XCObject._schema.copy()\n  _schema.update({\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXGroup",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXGroup(XCHierarchicalElement):\n  \"\"\"\n  Attributes:\n    _children_by_path: Maps pathnames of children of this PBXGroup to the\n      actual child XCHierarchicalElement objects.\n    _variant_children_by_name_and_path: Maps (name, path) tuples of\n      PBXVariantGroup children to the actual child PBXVariantGroup objects.\n  \"\"\"\n  _schema = XCHierarchicalElement._schema.copy()\n  _schema.update({",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXGroup\n```\n\n```python\n\n\n```\n\n```python\nclass PBXGroup(XCHierarchicalElement):\n  \"\"\"\n  Attributes:\n    _children_by_path: Maps pathnames of children of this PBXGroup to the\n      actual child XCHierarchicalElement objects.\n    _variant_children_by_name_and_path: Maps (name, path) tuples of\n      PBXVariantGroup children to the actual child PBXVariantGroup objects.\n  \"\"\"\n  _schema = XCHierarchicalElement._schema.copy()\n  _schema.update({\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XCFileLikeElement",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCFileLikeElement(XCHierarchicalElement):\n  # Abstract base for objects that can be used as the fileRef property of\n  # PBXBuildFile.\n  def PathHashables(self):\n    # A PBXBuildFile that refers to this object will call this method to\n    # obtain additional hashables specific to this XCFileLikeElement.  Don't\n    # just use this object's hashables, they're not specific and unique enough\n    # on their own (without access to the parent hashables.)  Instead, provide\n    # hashables that identify this object by path by getting its hashables as\n    # well as the hashables of ancestor XCHierarchicalElement objects.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import XCFileLikeElement\n```\n\n```python\n\n\n```\n\n```python\nclass XCFileLikeElement(XCHierarchicalElement):\n  # Abstract base for objects that can be used as the fileRef property of\n  # PBXBuildFile.\n  def PathHashables(self):\n    # A PBXBuildFile that refers to this object will call this method to\n    # obtain additional hashables specific to this XCFileLikeElement.  Don't\n    # just use this object's hashables, they're not specific and unique enough\n    # on their own (without access to the parent hashables.)  Instead, provide\n    # hashables that identify this object by path by getting its hashables as\n    # well as the hashables of ancestor XCHierarchicalElement objects.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XCContainerPortal",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCContainerPortal(XCObject):\n  # Abstract base for objects that can be used as the containerPortal property\n  # of PBXContainerItemProxy.\n  pass\nclass XCRemoteObject(XCObject):\n  # Abstract base for objects that can be used as the remoteGlobalIDString\n  # property of PBXContainerItemProxy.\n  pass\nclass PBXFileReference(XCFileLikeElement, XCContainerPortal, XCRemoteObject):\n  _schema = XCFileLikeElement._schema.copy()",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import XCContainerPortal\n```\n\n```python\n\n\n```\n\n```python\nclass XCContainerPortal(XCObject):\n  # Abstract base for objects that can be used as the containerPortal property\n  # of PBXContainerItemProxy.\n  pass\nclass XCRemoteObject(XCObject):\n  # Abstract base for objects that can be used as the remoteGlobalIDString\n  # property of PBXContainerItemProxy.\n  pass\nclass PBXFileReference(XCFileLikeElement, XCContainerPortal, XCRemoteObject):\n  _schema = XCFileLikeElement._schema.copy()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XCRemoteObject",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCRemoteObject(XCObject):\n  # Abstract base for objects that can be used as the remoteGlobalIDString\n  # property of PBXContainerItemProxy.\n  pass\nclass PBXFileReference(XCFileLikeElement, XCContainerPortal, XCRemoteObject):\n  _schema = XCFileLikeElement._schema.copy()\n  _schema.update({\n    'explicitFileType':  [0, str, 0, 0],\n    'lastKnownFileType': [0, str, 0, 0],\n    'name':              [0, str, 0, 0],",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import XCRemoteObject\n```\n\n```python\n\n\n```\n\n```python\nclass XCRemoteObject(XCObject):\n  # Abstract base for objects that can be used as the remoteGlobalIDString\n  # property of PBXContainerItemProxy.\n  pass\nclass PBXFileReference(XCFileLikeElement, XCContainerPortal, XCRemoteObject):\n  _schema = XCFileLikeElement._schema.copy()\n  _schema.update({\n    'explicitFileType':  [0, str, 0, 0],\n    'lastKnownFileType': [0, str, 0, 0],\n    'name':              [0, str, 0, 0],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXFileReference",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXFileReference(XCFileLikeElement, XCContainerPortal, XCRemoteObject):\n  _schema = XCFileLikeElement._schema.copy()\n  _schema.update({\n    'explicitFileType':  [0, str, 0, 0],\n    'lastKnownFileType': [0, str, 0, 0],\n    'name':              [0, str, 0, 0],\n    'path':              [0, str, 0, 1],\n  })\n  # Weird output rules for PBXFileReference.\n  _should_print_single_line = True",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXFileReference\n```\n\n```python\n\n\n```\n\n```python\nclass PBXFileReference(XCFileLikeElement, XCContainerPortal, XCRemoteObject):\n  _schema = XCFileLikeElement._schema.copy()\n  _schema.update({\n    'explicitFileType':  [0, str, 0, 0],\n    'lastKnownFileType': [0, str, 0, 0],\n    'name':              [0, str, 0, 0],\n    'path':              [0, str, 0, 1],\n  })\n  # Weird output rules for PBXFileReference.\n  _should_print_single_line = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXVariantGroup",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXVariantGroup(PBXGroup, XCFileLikeElement):\n  \"\"\"PBXVariantGroup is used by Xcode to represent localizations.\"\"\"\n  # No additions to the schema relative to PBXGroup.\n  pass\n# PBXReferenceProxy is also an XCFileLikeElement subclass.  It is defined below\n# because it uses PBXContainerItemProxy, defined below.\nclass XCBuildConfiguration(XCObject):\n  _schema = XCObject._schema.copy()\n  _schema.update({\n    'baseConfigurationReference': [0, PBXFileReference, 0, 0],",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXVariantGroup\n```\n\n```python\n\n\n```\n\n```python\nclass PBXVariantGroup(PBXGroup, XCFileLikeElement):\n  \"\"\"PBXVariantGroup is used by Xcode to represent localizations.\"\"\"\n  # No additions to the schema relative to PBXGroup.\n  pass\n# PBXReferenceProxy is also an XCFileLikeElement subclass.  It is defined below\n# because it uses PBXContainerItemProxy, defined below.\nclass XCBuildConfiguration(XCObject):\n  _schema = XCObject._schema.copy()\n  _schema.update({\n    'baseConfigurationReference': [0, PBXFileReference, 0, 0],\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XCBuildConfiguration",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCBuildConfiguration(XCObject):\n  _schema = XCObject._schema.copy()\n  _schema.update({\n    'baseConfigurationReference': [0, PBXFileReference, 0, 0],\n    'buildSettings':              [0, dict, 0, 1, {}],\n    'name':                       [0, str,  0, 1],\n  })\n  def HasBuildSetting(self, key):\n    return key in self._properties['buildSettings']\n  def GetBuildSetting(self, key):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import XCBuildConfiguration\n```\n\n```python\n\n\n```\n\n```python\nclass XCBuildConfiguration(XCObject):\n  _schema = XCObject._schema.copy()\n  _schema.update({\n    'baseConfigurationReference': [0, PBXFileReference, 0, 0],\n    'buildSettings':              [0, dict, 0, 1, {}],\n    'name':                       [0, str,  0, 1],\n  })\n  def HasBuildSetting(self, key):\n    return key in self._properties['buildSettings']\n  def GetBuildSetting(self, key):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XCConfigurationList",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCConfigurationList(XCObject):\n  # _configs is the default list of configurations.\n  _configs = [ XCBuildConfiguration({'name': 'Debug'}),\n               XCBuildConfiguration({'name': 'Release'}) ]\n  _schema = XCObject._schema.copy()\n  _schema.update({\n    'buildConfigurations':           [1, XCBuildConfiguration, 1, 1, _configs],\n    'defaultConfigurationIsVisible': [0, int,                  0, 1, 1],\n    'defaultConfigurationName':      [0, str,                  0, 1, 'Release'],\n  })",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import XCConfigurationList\n```\n\n```python\n\n\n```\n\n```python\nclass XCConfigurationList(XCObject):\n  # _configs is the default list of configurations.\n  _configs = [ XCBuildConfiguration({'name': 'Debug'}),\n               XCBuildConfiguration({'name': 'Release'}) ]\n  _schema = XCObject._schema.copy()\n  _schema.update({\n    'buildConfigurations':           [1, XCBuildConfiguration, 1, 1, _configs],\n    'defaultConfigurationIsVisible': [0, int,                  0, 1, 1],\n    'defaultConfigurationName':      [0, str,                  0, 1, 'Release'],\n  })\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXBuildFile",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXBuildFile(XCObject):\n  _schema = XCObject._schema.copy()\n  _schema.update({\n    'fileRef':  [0, XCFileLikeElement, 0, 1],\n    'settings': [0, str,               0, 0],  # hack, it's a dict\n  })\n  # Weird output rules for PBXBuildFile.\n  _should_print_single_line = True\n  _encode_transforms = XCObject._alternate_encode_transforms\n  def Name(self):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXBuildFile\n```\n\n```python\n\n\n```\n\n```python\nclass PBXBuildFile(XCObject):\n  _schema = XCObject._schema.copy()\n  _schema.update({\n    'fileRef':  [0, XCFileLikeElement, 0, 1],\n    'settings': [0, str,               0, 0],  # hack, it's a dict\n  })\n  # Weird output rules for PBXBuildFile.\n  _should_print_single_line = True\n  _encode_transforms = XCObject._alternate_encode_transforms\n  def Name(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XCBuildPhase",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCBuildPhase(XCObject):\n  \"\"\"Abstract base for build phase classes.  Not represented in a project\n  file.\n  Attributes:\n    _files_by_path: A dict mapping each path of a child in the files list by\n      path (keys) to the corresponding PBXBuildFile children (values).\n    _files_by_xcfilelikeelement: A dict mapping each XCFileLikeElement (keys)\n      to the corresponding PBXBuildFile children (values).\n  \"\"\"\n  # TODO(mark): Some build phase types, like PBXShellScriptBuildPhase, don't",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import XCBuildPhase\n```\n\n```python\n\n\n```\n\n```python\nclass XCBuildPhase(XCObject):\n  \"\"\"Abstract base for build phase classes.  Not represented in a project\n  file.\n  Attributes:\n    _files_by_path: A dict mapping each path of a child in the files list by\n      path (keys) to the corresponding PBXBuildFile children (values).\n    _files_by_xcfilelikeelement: A dict mapping each XCFileLikeElement (keys)\n      to the corresponding PBXBuildFile children (values).\n  \"\"\"\n  # TODO(mark): Some build phase types, like PBXShellScriptBuildPhase, don't\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXHeadersBuildPhase",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXHeadersBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Headers'\n  def FileGroup(self, path):\n    return self.PBXProjectAncestor().RootGroupForPath(path)\nclass PBXResourcesBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Resources'",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXHeadersBuildPhase\n```\n\n```python\n\n\n```\n\n```python\nclass PBXHeadersBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Headers'\n  def FileGroup(self, path):\n    return self.PBXProjectAncestor().RootGroupForPath(path)\nclass PBXResourcesBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Resources'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXResourcesBuildPhase",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXResourcesBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Resources'\n  def FileGroup(self, path):\n    return self.PBXProjectAncestor().RootGroupForPath(path)\nclass PBXSourcesBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Sources'",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXResourcesBuildPhase\n```\n\n```python\n\n\n```\n\n```python\nclass PBXResourcesBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Resources'\n  def FileGroup(self, path):\n    return self.PBXProjectAncestor().RootGroupForPath(path)\nclass PBXSourcesBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Sources'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXSourcesBuildPhase",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXSourcesBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Sources'\n  def FileGroup(self, path):\n    return self.PBXProjectAncestor().RootGroupForPath(path)\nclass PBXFrameworksBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Frameworks'",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXSourcesBuildPhase\n```\n\n```python\n\n\n```\n\n```python\nclass PBXSourcesBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Sources'\n  def FileGroup(self, path):\n    return self.PBXProjectAncestor().RootGroupForPath(path)\nclass PBXFrameworksBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Frameworks'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXFrameworksBuildPhase",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXFrameworksBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Frameworks'\n  def FileGroup(self, path):\n    (root, ext) = posixpath.splitext(path)\n    if ext != '':\n      ext = ext[1:].lower()\n    if ext == 'o':\n      # .o files are added to Xcode Frameworks phases, but conceptually aren't",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXFrameworksBuildPhase\n```\n\n```python\n\n\n```\n\n```python\nclass PBXFrameworksBuildPhase(XCBuildPhase):\n  # No additions to the schema relative to XCBuildPhase.\n  def Name(self):\n    return 'Frameworks'\n  def FileGroup(self, path):\n    (root, ext) = posixpath.splitext(path)\n    if ext != '':\n      ext = ext[1:].lower()\n    if ext == 'o':\n      # .o files are added to Xcode Frameworks phases, but conceptually aren't\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXShellScriptBuildPhase",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXShellScriptBuildPhase(XCBuildPhase):\n  _schema = XCBuildPhase._schema.copy()\n  _schema.update({\n    'inputPaths':       [1, str, 0, 1, []],\n    'name':             [0, str, 0, 0],\n    'outputPaths':      [1, str, 0, 1, []],\n    'shellPath':        [0, str, 0, 1, '/bin/sh'],\n    'shellScript':      [0, str, 0, 1],\n    'showEnvVarsInLog': [0, int, 0, 0],\n  })",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXShellScriptBuildPhase\n```\n\n```python\n\n\n```\n\n```python\nclass PBXShellScriptBuildPhase(XCBuildPhase):\n  _schema = XCBuildPhase._schema.copy()\n  _schema.update({\n    'inputPaths':       [1, str, 0, 1, []],\n    'name':             [0, str, 0, 0],\n    'outputPaths':      [1, str, 0, 1, []],\n    'shellPath':        [0, str, 0, 1, '/bin/sh'],\n    'shellScript':      [0, str, 0, 1],\n    'showEnvVarsInLog': [0, int, 0, 0],\n  })\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXCopyFilesBuildPhase",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXCopyFilesBuildPhase(XCBuildPhase):\n  _schema = XCBuildPhase._schema.copy()\n  _schema.update({\n    'dstPath':          [0, str, 0, 1],\n    'dstSubfolderSpec': [0, int, 0, 1],\n    'name':             [0, str, 0, 0],\n  })\n  # path_tree_re matches \"$(DIR)/path\" or just \"$(DIR)\".  Match group 1 is\n  # \"DIR\", match group 3 is \"path\" or None.\n  path_tree_re = re.compile('^\\\\$\\\\((.*)\\\\)(/(.*)|)$')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXCopyFilesBuildPhase\n```\n\n```python\n\n\n```\n\n```python\nclass PBXCopyFilesBuildPhase(XCBuildPhase):\n  _schema = XCBuildPhase._schema.copy()\n  _schema.update({\n    'dstPath':          [0, str, 0, 1],\n    'dstSubfolderSpec': [0, int, 0, 1],\n    'name':             [0, str, 0, 0],\n  })\n  # path_tree_re matches \"$(DIR)/path\" or just \"$(DIR)\".  Match group 1 is\n  # \"DIR\", match group 3 is \"path\" or None.\n  path_tree_re = re.compile('^\\\\$\\\\((.*)\\\\)(/(.*)|)$')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXBuildRule",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXBuildRule(XCObject):\n  _schema = XCObject._schema.copy()\n  _schema.update({\n    'compilerSpec': [0, str, 0, 1],\n    'filePatterns': [0, str, 0, 0],\n    'fileType':     [0, str, 0, 1],\n    'isEditable':   [0, int, 0, 1, 1],\n    'outputFiles':  [1, str, 0, 1, []],\n    'script':       [0, str, 0, 0],\n  })",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXBuildRule\n```\n\n```python\n\n\n```\n\n```python\nclass PBXBuildRule(XCObject):\n  _schema = XCObject._schema.copy()\n  _schema.update({\n    'compilerSpec': [0, str, 0, 1],\n    'filePatterns': [0, str, 0, 0],\n    'fileType':     [0, str, 0, 1],\n    'isEditable':   [0, int, 0, 1, 1],\n    'outputFiles':  [1, str, 0, 1, []],\n    'script':       [0, str, 0, 0],\n  })\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXContainerItemProxy",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXContainerItemProxy(XCObject):\n  # When referencing an item in this project file, containerPortal is the\n  # PBXProject root object of this project file.  When referencing an item in\n  # another project file, containerPortal is a PBXFileReference identifying\n  # the other project file.\n  #\n  # When serving as a proxy to an XCTarget (in this project file or another),\n  # proxyType is 1.  When serving as a proxy to a PBXFileReference (in another\n  # project file), proxyType is 2.  Type 2 is used for references to the\n  # producs of the other project file's targets.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXContainerItemProxy\n```\n\n```python\n\n\n```\n\n```python\nclass PBXContainerItemProxy(XCObject):\n  # When referencing an item in this project file, containerPortal is the\n  # PBXProject root object of this project file.  When referencing an item in\n  # another project file, containerPortal is a PBXFileReference identifying\n  # the other project file.\n  #\n  # When serving as a proxy to an XCTarget (in this project file or another),\n  # proxyType is 1.  When serving as a proxy to a PBXFileReference (in another\n  # project file), proxyType is 2.  Type 2 is used for references to the\n  # producs of the other project file's targets.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXTargetDependency",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXTargetDependency(XCObject):\n  # The \"target\" property accepts an XCTarget object, and obviously not\n  # NoneType.  But XCTarget is defined below, so it can't be put into the\n  # schema yet.  The definition of PBXTargetDependency can't be moved below\n  # XCTarget because XCTarget's own schema references PBXTargetDependency.\n  # Python doesn't deal well with this circular relationship, and doesn't have\n  # a real way to do forward declarations.  To work around, the type of\n  # the \"target\" property is reset below, after XCTarget is defined.\n  #\n  # At least one of \"name\" and \"target\" is required.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXTargetDependency\n```\n\n```python\n\n\n```\n\n```python\nclass PBXTargetDependency(XCObject):\n  # The \"target\" property accepts an XCTarget object, and obviously not\n  # NoneType.  But XCTarget is defined below, so it can't be put into the\n  # schema yet.  The definition of PBXTargetDependency can't be moved below\n  # XCTarget because XCTarget's own schema references PBXTargetDependency.\n  # Python doesn't deal well with this circular relationship, and doesn't have\n  # a real way to do forward declarations.  To work around, the type of\n  # the \"target\" property is reset below, after XCTarget is defined.\n  #\n  # At least one of \"name\" and \"target\" is required.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXReferenceProxy",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXReferenceProxy(XCFileLikeElement):\n  _schema = XCFileLikeElement._schema.copy()\n  _schema.update({\n    'fileType':  [0, str,                   0, 1],\n    'path':      [0, str,                   0, 1],\n    'remoteRef': [0, PBXContainerItemProxy, 1, 1],\n  })\nclass XCTarget(XCRemoteObject):\n  # An XCTarget is really just an XCObject, the XCRemoteObject thing is just\n  # to allow PBXProject to be used in the remoteGlobalIDString property of",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXReferenceProxy\n```\n\n```python\n\n\n```\n\n```python\nclass PBXReferenceProxy(XCFileLikeElement):\n  _schema = XCFileLikeElement._schema.copy()\n  _schema.update({\n    'fileType':  [0, str,                   0, 1],\n    'path':      [0, str,                   0, 1],\n    'remoteRef': [0, PBXContainerItemProxy, 1, 1],\n  })\nclass XCTarget(XCRemoteObject):\n  # An XCTarget is really just an XCObject, the XCRemoteObject thing is just\n  # to allow PBXProject to be used in the remoteGlobalIDString property of\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XCTarget",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCTarget(XCRemoteObject):\n  # An XCTarget is really just an XCObject, the XCRemoteObject thing is just\n  # to allow PBXProject to be used in the remoteGlobalIDString property of\n  # PBXContainerItemProxy.\n  #\n  # Setting a \"name\" property at instantiation may also affect \"productName\",\n  # which may in turn affect the \"PRODUCT_NAME\" build setting in children of\n  # \"buildConfigurationList\".  See __init__ below.\n  _schema = XCRemoteObject._schema.copy()\n  _schema.update({",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import XCTarget\n```\n\n```python\n\n\n```\n\n```python\nclass XCTarget(XCRemoteObject):\n  # An XCTarget is really just an XCObject, the XCRemoteObject thing is just\n  # to allow PBXProject to be used in the remoteGlobalIDString property of\n  # PBXContainerItemProxy.\n  #\n  # Setting a \"name\" property at instantiation may also affect \"productName\",\n  # which may in turn affect the \"PRODUCT_NAME\" build setting in children of\n  # \"buildConfigurationList\".  See __init__ below.\n  _schema = XCRemoteObject._schema.copy()\n  _schema.update({\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXNativeTarget",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXNativeTarget(XCTarget):\n  # buildPhases is overridden in the schema to be able to set defaults.\n  #\n  # NOTE: Contrary to most objects, it is advisable to set parent when\n  # constructing PBXNativeTarget.  A parent of an XCTarget must be a PBXProject\n  # object.  A parent reference is required for a PBXNativeTarget during\n  # construction to be able to set up the target defaults for productReference,\n  # because a PBXBuildFile object must be created for the target and it must\n  # be added to the PBXProject's mainGroup hierarchy.\n  _schema = XCTarget._schema.copy()",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXNativeTarget\n```\n\n```python\n\n\n```\n\n```python\nclass PBXNativeTarget(XCTarget):\n  # buildPhases is overridden in the schema to be able to set defaults.\n  #\n  # NOTE: Contrary to most objects, it is advisable to set parent when\n  # constructing PBXNativeTarget.  A parent of an XCTarget must be a PBXProject\n  # object.  A parent reference is required for a PBXNativeTarget during\n  # construction to be able to set up the target defaults for productReference,\n  # because a PBXBuildFile object must be created for the target and it must\n  # be added to the PBXProject's mainGroup hierarchy.\n  _schema = XCTarget._schema.copy()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXAggregateTarget",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXAggregateTarget(XCTarget):\n  pass\nclass PBXProject(XCContainerPortal):\n  # A PBXProject is really just an XCObject, the XCContainerPortal thing is\n  # just to allow PBXProject to be used in the containerPortal property of\n  # PBXContainerItemProxy.\n  \"\"\"\n  Attributes:\n    path: \"sample.xcodeproj\".  TODO(mark) Document me!\n    _other_pbxprojects: A dictionary, keyed by other PBXProject objects.  Each",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXAggregateTarget\n```\n\n```python\n\n\n```\n\n```python\nclass PBXAggregateTarget(XCTarget):\n  pass\nclass PBXProject(XCContainerPortal):\n  # A PBXProject is really just an XCObject, the XCContainerPortal thing is\n  # just to allow PBXProject to be used in the containerPortal property of\n  # PBXContainerItemProxy.\n  \"\"\"\n  Attributes:\n    path: \"sample.xcodeproj\".  TODO(mark) Document me!\n    _other_pbxprojects: A dictionary, keyed by other PBXProject objects.  Each\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXProject",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXProject(XCContainerPortal):\n  # A PBXProject is really just an XCObject, the XCContainerPortal thing is\n  # just to allow PBXProject to be used in the containerPortal property of\n  # PBXContainerItemProxy.\n  \"\"\"\n  Attributes:\n    path: \"sample.xcodeproj\".  TODO(mark) Document me!\n    _other_pbxprojects: A dictionary, keyed by other PBXProject objects.  Each\n                        value is a reference to the dict in the\n                        projectReferences list associated with the keyed",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXProject\n```\n\n```python\n\n\n```\n\n```python\nclass PBXProject(XCContainerPortal):\n  # A PBXProject is really just an XCObject, the XCContainerPortal thing is\n  # just to allow PBXProject to be used in the containerPortal property of\n  # PBXContainerItemProxy.\n  \"\"\"\n  Attributes:\n    path: \"sample.xcodeproj\".  TODO(mark) Document me!\n    _other_pbxprojects: A dictionary, keyed by other PBXProject objects.  Each\n                        value is a reference to the dict in the\n                        projectReferences list associated with the keyed\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XCProjectFile",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCProjectFile(XCObject):\n  _schema = XCObject._schema.copy()\n  _schema.update({\n    'archiveVersion': [0, int,        0, 1, 1],\n    'classes':        [0, dict,       0, 1, {}],\n    'objectVersion':  [0, int,        0, 1, 46],\n    'rootObject':     [0, PBXProject, 1, 1],\n  })\n  def ComputeIDs(self, recursive=True, overwrite=True, hash=None):\n    # Although XCProjectFile is implemented here as an XCObject, it's not a",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import XCProjectFile\n```\n\n```python\n\n\n```\n\n```python\nclass XCProjectFile(XCObject):\n  _schema = XCObject._schema.copy()\n  _schema.update({\n    'archiveVersion': [0, int,        0, 1, 1],\n    'classes':        [0, dict,       0, 1, {}],\n    'objectVersion':  [0, int,        0, 1, 46],\n    'rootObject':     [0, PBXProject, 1, 1],\n  })\n  def ComputeIDs(self, recursive=True, overwrite=True, hash=None):\n    # Although XCProjectFile is implemented here as an XCObject, it's not a\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SourceTreeAndPathFromPath",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "def SourceTreeAndPathFromPath(input_path):\n  \"\"\"Given input_path, returns a tuple with sourceTree and path values.\n  Examples:\n    input_path     (source_tree, output_path)\n    '$(VAR)/path'  ('VAR', 'path')\n    '$(VAR)'       ('VAR', None)\n    'path'         (None, 'path')\n  \"\"\"\n  source_group_match = _path_leading_variable.match(input_path)\n  if source_group_match:",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import SourceTreeAndPathFromPath\n```\n\n```python\n\n\n```\n\n```python\ndef SourceTreeAndPathFromPath(input_path):\n  \"\"\"Given input_path, returns a tuple with sourceTree and path values.\n  Examples:\n    input_path     (source_tree, output_path)\n    '$(VAR)/path'  ('VAR', 'path')\n    '$(VAR)'       ('VAR', None)\n    'path'         (None, 'path')\n  \"\"\"\n  source_group_match = _path_leading_variable.match(input_path)\n  if source_group_match:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ConvertVariablesToShellSyntax",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "def ConvertVariablesToShellSyntax(input_string):\n  return re.sub(r'\\$\\((.*?)\\)', '${\\\\1}', input_string)\nclass XCObject(object):\n  \"\"\"The abstract base of all class types used in Xcode project files.\n  Class variables:\n    _schema: A dictionary defining the properties of this class.  The keys to\n             _schema are string property keys as used in project files.  Values\n             are a list of four or five elements:\n             [ is_list, property_type, is_strong, is_required, default ]\n             is_list: True if the property described is a list, as opposed",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import ConvertVariablesToShellSyntax\n```\n\n```python\n\n\n```\n\n```python\ndef ConvertVariablesToShellSyntax(input_string):\n  return re.sub(r'\\$\\((.*?)\\)', '${\\\\1}', input_string)\nclass XCObject(object):\n  \"\"\"The abstract base of all class types used in Xcode project files.\n  Class variables:\n    _schema: A dictionary defining the properties of this class.  The keys to\n             _schema are string property keys as used in project files.  Values\n             are a list of four or five elements:\n             [ is_list, property_type, is_strong, is_required, default ]\n             is_list: True if the property described is a list, as opposed\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_unquoted",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "_unquoted = re.compile('^[A-Za-z0-9$./_]+$')\n# Strings that match this pattern are quoted regardless of what _unquoted says.\n# Oddly, Xcode will quote any string with a run of three or more underscores.\n_quoted = re.compile('___')\n# This pattern should match any character that needs to be escaped by\n# XCObject._EncodeString.  See that function.\n_escaped = re.compile('[\\\\\\\\\"]|[\\x00-\\x1f]')\n# Used by SourceTreeAndPathFromPath\n_path_leading_variable = re.compile(r'^\\$\\((.*?)\\)(/(.*))?$')\ndef SourceTreeAndPathFromPath(input_path):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import _unquoted\n```\n\n```python\n\n\n```\n\n```python\n_unquoted = re.compile('^[A-Za-z0-9$./_]+$')\n# Strings that match this pattern are quoted regardless of what _unquoted says.\n# Oddly, Xcode will quote any string with a run of three or more underscores.\n_quoted = re.compile('___')\n# This pattern should match any character that needs to be escaped by\n# XCObject._EncodeString.  See that function.\n_escaped = re.compile('[\\\\\\\\\"]|[\\x00-\\x1f]')\n# Used by SourceTreeAndPathFromPath\n_path_leading_variable = re.compile(r'^\\$\\((.*?)\\)(/(.*))?$')\ndef SourceTreeAndPathFromPath(input_path):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_quoted",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "_quoted = re.compile('___')\n# This pattern should match any character that needs to be escaped by\n# XCObject._EncodeString.  See that function.\n_escaped = re.compile('[\\\\\\\\\"]|[\\x00-\\x1f]')\n# Used by SourceTreeAndPathFromPath\n_path_leading_variable = re.compile(r'^\\$\\((.*?)\\)(/(.*))?$')\ndef SourceTreeAndPathFromPath(input_path):\n  \"\"\"Given input_path, returns a tuple with sourceTree and path values.\n  Examples:\n    input_path     (source_tree, output_path)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import _quoted\n```\n\n```python\n\n\n```\n\n```python\n_quoted = re.compile('___')\n# This pattern should match any character that needs to be escaped by\n# XCObject._EncodeString.  See that function.\n_escaped = re.compile('[\\\\\\\\\"]|[\\x00-\\x1f]')\n# Used by SourceTreeAndPathFromPath\n_path_leading_variable = re.compile(r'^\\$\\((.*?)\\)(/(.*))?$')\ndef SourceTreeAndPathFromPath(input_path):\n  \"\"\"Given input_path, returns a tuple with sourceTree and path values.\n  Examples:\n    input_path     (source_tree, output_path)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_escaped",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "_escaped = re.compile('[\\\\\\\\\"]|[\\x00-\\x1f]')\n# Used by SourceTreeAndPathFromPath\n_path_leading_variable = re.compile(r'^\\$\\((.*?)\\)(/(.*))?$')\ndef SourceTreeAndPathFromPath(input_path):\n  \"\"\"Given input_path, returns a tuple with sourceTree and path values.\n  Examples:\n    input_path     (source_tree, output_path)\n    '$(VAR)/path'  ('VAR', 'path')\n    '$(VAR)'       ('VAR', None)\n    'path'         (None, 'path')",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import _escaped\n```\n\n```python\n\n\n```\n\n```python\n_escaped = re.compile('[\\\\\\\\\"]|[\\x00-\\x1f]')\n# Used by SourceTreeAndPathFromPath\n_path_leading_variable = re.compile(r'^\\$\\((.*?)\\)(/(.*))?$')\ndef SourceTreeAndPathFromPath(input_path):\n  \"\"\"Given input_path, returns a tuple with sourceTree and path values.\n  Examples:\n    input_path     (source_tree, output_path)\n    '$(VAR)/path'  ('VAR', 'path')\n    '$(VAR)'       ('VAR', None)\n    'path'         (None, 'path')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "_path_leading_variable",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "_path_leading_variable = re.compile(r'^\\$\\((.*?)\\)(/(.*))?$')\ndef SourceTreeAndPathFromPath(input_path):\n  \"\"\"Given input_path, returns a tuple with sourceTree and path values.\n  Examples:\n    input_path     (source_tree, output_path)\n    '$(VAR)/path'  ('VAR', 'path')\n    '$(VAR)'       ('VAR', None)\n    'path'         (None, 'path')\n  \"\"\"\n  source_group_match = _path_leading_variable.match(input_path)",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import _path_leading_variable\n```\n\n```python\n\n\n```\n\n```python\n_path_leading_variable = re.compile(r'^\\$\\((.*?)\\)(/(.*))?$')\ndef SourceTreeAndPathFromPath(input_path):\n  \"\"\"Given input_path, returns a tuple with sourceTree and path values.\n  Examples:\n    input_path     (source_tree, output_path)\n    '$(VAR)/path'  ('VAR', 'path')\n    '$(VAR)'       ('VAR', None)\n    'path'         (None, 'path')\n  \"\"\"\n  source_group_match = _path_leading_variable.match(input_path)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PBXTargetDependency._schema['target'][1]",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "PBXTargetDependency._schema['target'][1] = XCTarget\nclass PBXNativeTarget(XCTarget):\n  # buildPhases is overridden in the schema to be able to set defaults.\n  #\n  # NOTE: Contrary to most objects, it is advisable to set parent when\n  # constructing PBXNativeTarget.  A parent of an XCTarget must be a PBXProject\n  # object.  A parent reference is required for a PBXNativeTarget during\n  # construction to be able to set up the target defaults for productReference,\n  # because a PBXBuildFile object must be created for the target and it must\n  # be added to the PBXProject's mainGroup hierarchy.",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file import PBXTargetDependency._schema['target'][1]\n```\n\n```python\n\n\n```\n\n```python\nPBXTargetDependency._schema['target'][1] = XCTarget\nclass PBXNativeTarget(XCTarget):\n  # buildPhases is overridden in the schema to be able to set defaults.\n  #\n  # NOTE: Contrary to most objects, it is advisable to set parent when\n  # constructing PBXNativeTarget.  A parent of an XCTarget must be a PBXProject\n  # object.  A parent reference is required for a PBXNativeTarget during\n  # construction to be able to set up the target defaults for productReference,\n  # because a PBXBuildFile object must be created for the target and it must\n  # be added to the PBXProject's mainGroup hierarchy.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "XmlFix",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.pylib.gyp.xml_fix",
        "description": "node_modules.node-gyp.gyp.pylib.gyp.xml_fix",
        "peekOfCode": "class XmlFix(object):\n  \"\"\"Object to manage temporary patching of xml.dom.minidom.\"\"\"\n  def __init__(self):\n    # Preserve current xml.dom.minidom functions.\n    self.write_data = xml.dom.minidom._write_data\n    self.writexml = xml.dom.minidom.Element.writexml\n    # Inject replacement versions of a function and a method.\n    xml.dom.minidom._write_data = _Replacement_write_data\n    xml.dom.minidom.Element.writexml = _Replacement_writexml\n  def Cleanup(self):",
        "detail": "node_modules.node-gyp.gyp.pylib.gyp.xml_fix",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.pylib.gyp.xml_fix import XmlFix\n```\n\n```python\n\n\n```\n\n```python\nclass XmlFix(object):\n  \"\"\"Object to manage temporary patching of xml.dom.minidom.\"\"\"\n  def __init__(self):\n    # Preserve current xml.dom.minidom functions.\n    self.write_data = xml.dom.minidom._write_data\n    self.writexml = xml.dom.minidom.Element.writexml\n    # Inject replacement versions of a function and a method.\n    xml.dom.minidom._write_data = _Replacement_write_data\n    xml.dom.minidom.Element.writexml = _Replacement_writexml\n  def Cleanup(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ParseTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.graphviz",
        "description": "node_modules.node-gyp.gyp.tools.graphviz",
        "peekOfCode": "def ParseTarget(target):\n  target, _, suffix = target.partition('#')\n  filename, _, target = target.partition(':')\n  return filename, target, suffix\ndef LoadEdges(filename, targets):\n  \"\"\"Load the edges map from the dump file, and filter it to only\n  show targets in |targets| and their depedendents.\"\"\"\n  file = open('dump.json')\n  edges = json.load(file)\n  file.close()",
        "detail": "node_modules.node-gyp.gyp.tools.graphviz",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.graphviz import ParseTarget\n```\n\n```python\n\n\n```\n\n```python\ndef ParseTarget(target):\n  target, _, suffix = target.partition('#')\n  filename, _, target = target.partition(':')\n  return filename, target, suffix\ndef LoadEdges(filename, targets):\n  \"\"\"Load the edges map from the dump file, and filter it to only\n  show targets in |targets| and their depedendents.\"\"\"\n  file = open('dump.json')\n  edges = json.load(file)\n  file.close()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LoadEdges",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.graphviz",
        "description": "node_modules.node-gyp.gyp.tools.graphviz",
        "peekOfCode": "def LoadEdges(filename, targets):\n  \"\"\"Load the edges map from the dump file, and filter it to only\n  show targets in |targets| and their depedendents.\"\"\"\n  file = open('dump.json')\n  edges = json.load(file)\n  file.close()\n  # Copy out only the edges we're interested in from the full edge list.\n  target_edges = {}\n  to_visit = targets[:]\n  while to_visit:",
        "detail": "node_modules.node-gyp.gyp.tools.graphviz",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.graphviz import LoadEdges\n```\n\n```python\n\n\n```\n\n```python\ndef LoadEdges(filename, targets):\n  \"\"\"Load the edges map from the dump file, and filter it to only\n  show targets in |targets| and their depedendents.\"\"\"\n  file = open('dump.json')\n  edges = json.load(file)\n  file.close()\n  # Copy out only the edges we're interested in from the full edge list.\n  target_edges = {}\n  to_visit = targets[:]\n  while to_visit:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WriteGraph",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.graphviz",
        "description": "node_modules.node-gyp.gyp.tools.graphviz",
        "peekOfCode": "def WriteGraph(edges):\n  \"\"\"Print a graphviz graph to stdout.\n  |edges| is a map of target to a list of other targets it depends on.\"\"\"\n  # Bucket targets by file.\n  files = collections.defaultdict(list)\n  for src, dst in edges.items():\n    build_file, target_name, toolset = ParseTarget(src)\n    files[build_file].append(src)\n  print 'digraph D {'\n  print '  fontsize=8'  # Used by subgraphs.",
        "detail": "node_modules.node-gyp.gyp.tools.graphviz",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.graphviz import WriteGraph\n```\n\n```python\n\n\n```\n\n```python\ndef WriteGraph(edges):\n  \"\"\"Print a graphviz graph to stdout.\n  |edges| is a map of target to a list of other targets it depends on.\"\"\"\n  # Bucket targets by file.\n  files = collections.defaultdict(list)\n  for src, dst in edges.items():\n    build_file, target_name, toolset = ParseTarget(src)\n    files[build_file].append(src)\n  print 'digraph D {'\n  print '  fontsize=8'  # Used by subgraphs.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.graphviz",
        "description": "node_modules.node-gyp.gyp.tools.graphviz",
        "peekOfCode": "def main():\n  if len(sys.argv) < 2:\n    print >>sys.stderr, __doc__\n    print >>sys.stderr\n    print >>sys.stderr, 'usage: %s target1 target2...' % (sys.argv[0])\n    return 1\n  edges = LoadEdges('dump.json', sys.argv[1:])\n  WriteGraph(edges)\n  return 0\nif __name__ == '__main__':",
        "detail": "node_modules.node-gyp.gyp.tools.graphviz",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.graphviz import main\n```\n\n```python\n\n\n```\n\n```python\ndef main():\n  if len(sys.argv) < 2:\n    print >>sys.stderr, __doc__\n    print >>sys.stderr\n    print >>sys.stderr, 'usage: %s target1 target2...' % (sys.argv[0])\n    return 1\n  edges = LoadEdges('dump.json', sys.argv[1:])\n  WriteGraph(edges)\n  return 0\nif __name__ == '__main__':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "comment_replace",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def comment_replace(matchobj):\n  return matchobj.group(1) + matchobj.group(2) + '#' * len(matchobj.group(3))\ndef mask_comments(input):\n  \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n  search_re = re.compile(r'(.*?)(#)(.*)')\n  return [search_re.sub(comment_replace, line) for line in input]\ndef quote_replace(matchobj):\n  return \"%s%s%s%s\" % (matchobj.group(1),\n                       matchobj.group(2),\n                       'x'*len(matchobj.group(3)),",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_gyp import comment_replace\n```\n\n```python\n\n\n```\n\n```python\ndef comment_replace(matchobj):\n  return matchobj.group(1) + matchobj.group(2) + '#' * len(matchobj.group(3))\ndef mask_comments(input):\n  \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n  search_re = re.compile(r'(.*?)(#)(.*)')\n  return [search_re.sub(comment_replace, line) for line in input]\ndef quote_replace(matchobj):\n  return \"%s%s%s%s\" % (matchobj.group(1),\n                       matchobj.group(2),\n                       'x'*len(matchobj.group(3)),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "mask_comments",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def mask_comments(input):\n  \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n  search_re = re.compile(r'(.*?)(#)(.*)')\n  return [search_re.sub(comment_replace, line) for line in input]\ndef quote_replace(matchobj):\n  return \"%s%s%s%s\" % (matchobj.group(1),\n                       matchobj.group(2),\n                       'x'*len(matchobj.group(3)),\n                       matchobj.group(2))\ndef mask_quotes(input):",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_gyp import mask_comments\n```\n\n```python\n\n\n```\n\n```python\ndef mask_comments(input):\n  \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n  search_re = re.compile(r'(.*?)(#)(.*)')\n  return [search_re.sub(comment_replace, line) for line in input]\ndef quote_replace(matchobj):\n  return \"%s%s%s%s\" % (matchobj.group(1),\n                       matchobj.group(2),\n                       'x'*len(matchobj.group(3)),\n                       matchobj.group(2))\ndef mask_quotes(input):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "quote_replace",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def quote_replace(matchobj):\n  return \"%s%s%s%s\" % (matchobj.group(1),\n                       matchobj.group(2),\n                       'x'*len(matchobj.group(3)),\n                       matchobj.group(2))\ndef mask_quotes(input):\n  \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n  search_re = re.compile(r'(.*?)' + QUOTE_RE_STR)\n  return [search_re.sub(quote_replace, line) for line in input]\ndef do_split(input, masked_input, search_re):",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_gyp import quote_replace\n```\n\n```python\n\n\n```\n\n```python\ndef quote_replace(matchobj):\n  return \"%s%s%s%s\" % (matchobj.group(1),\n                       matchobj.group(2),\n                       'x'*len(matchobj.group(3)),\n                       matchobj.group(2))\ndef mask_quotes(input):\n  \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n  search_re = re.compile(r'(.*?)' + QUOTE_RE_STR)\n  return [search_re.sub(quote_replace, line) for line in input]\ndef do_split(input, masked_input, search_re):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "mask_quotes",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def mask_quotes(input):\n  \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n  search_re = re.compile(r'(.*?)' + QUOTE_RE_STR)\n  return [search_re.sub(quote_replace, line) for line in input]\ndef do_split(input, masked_input, search_re):\n  output = []\n  mask_output = []\n  for (line, masked_line) in zip(input, masked_input):\n    m = search_re.match(masked_line)\n    while m:",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_gyp import mask_quotes\n```\n\n```python\n\n\n```\n\n```python\ndef mask_quotes(input):\n  \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n  search_re = re.compile(r'(.*?)' + QUOTE_RE_STR)\n  return [search_re.sub(quote_replace, line) for line in input]\ndef do_split(input, masked_input, search_re):\n  output = []\n  mask_output = []\n  for (line, masked_line) in zip(input, masked_input):\n    m = search_re.match(masked_line)\n    while m:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "do_split",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def do_split(input, masked_input, search_re):\n  output = []\n  mask_output = []\n  for (line, masked_line) in zip(input, masked_input):\n    m = search_re.match(masked_line)\n    while m:\n      split = len(m.group(1))\n      line = line[:split] + r'\\n' + line[split:]\n      masked_line = masked_line[:split] + r'\\n' + masked_line[split:]\n      m = search_re.match(masked_line)",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_gyp import do_split\n```\n\n```python\n\n\n```\n\n```python\ndef do_split(input, masked_input, search_re):\n  output = []\n  mask_output = []\n  for (line, masked_line) in zip(input, masked_input):\n    m = search_re.match(masked_line)\n    while m:\n      split = len(m.group(1))\n      line = line[:split] + r'\\n' + line[split:]\n      masked_line = masked_line[:split] + r'\\n' + masked_line[split:]\n      m = search_re.match(masked_line)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "split_double_braces",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def split_double_braces(input):\n  \"\"\"Masks out the quotes and comments, and then splits appropriate\n  lines (lines that matche the double_*_brace re's above) before\n  indenting them below.\n  These are used to split lines which have multiple braces on them, so\n  that the indentation looks prettier when all laid out (e.g. closing\n  braces make a nice diagonal line).\n  \"\"\"\n  double_open_brace_re = re.compile(r'(.*?[\\[\\{\\(,])(\\s*)([\\[\\{\\(])')\n  double_close_brace_re = re.compile(r'(.*?[\\]\\}\\)],?)(\\s*)([\\]\\}\\)])')",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_gyp import split_double_braces\n```\n\n```python\n\n\n```\n\n```python\ndef split_double_braces(input):\n  \"\"\"Masks out the quotes and comments, and then splits appropriate\n  lines (lines that matche the double_*_brace re's above) before\n  indenting them below.\n  These are used to split lines which have multiple braces on them, so\n  that the indentation looks prettier when all laid out (e.g. closing\n  braces make a nice diagonal line).\n  \"\"\"\n  double_open_brace_re = re.compile(r'(.*?[\\[\\{\\(,])(\\s*)([\\[\\{\\(])')\n  double_close_brace_re = re.compile(r'(.*?[\\]\\}\\)],?)(\\s*)([\\]\\}\\)])')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "count_braces",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def count_braces(line):\n  \"\"\"keeps track of the number of braces on a given line and returns the result.\n  It starts at zero and subtracts for closed braces, and adds for open braces.\n  \"\"\"\n  open_braces = ['[', '(', '{']\n  close_braces = [']', ')', '}']\n  closing_prefix_re = re.compile(r'(.*?[^\\s\\]\\}\\)]+.*?)([\\]\\}\\)],?)\\s*$')\n  cnt = 0\n  stripline = COMMENT_RE.sub(r'', line)\n  stripline = QUOTE_RE.sub(r\"''\", stripline)",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_gyp import count_braces\n```\n\n```python\n\n\n```\n\n```python\ndef count_braces(line):\n  \"\"\"keeps track of the number of braces on a given line and returns the result.\n  It starts at zero and subtracts for closed braces, and adds for open braces.\n  \"\"\"\n  open_braces = ['[', '(', '{']\n  close_braces = [']', ')', '}']\n  closing_prefix_re = re.compile(r'(.*?[^\\s\\]\\}\\)]+.*?)([\\]\\}\\)],?)\\s*$')\n  cnt = 0\n  stripline = COMMENT_RE.sub(r'', line)\n  stripline = QUOTE_RE.sub(r\"''\", stripline)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "prettyprint_input",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def prettyprint_input(lines):\n  \"\"\"Does the main work of indenting the input based on the brace counts.\"\"\"\n  indent = 0\n  basic_offset = 2\n  last_line = \"\"\n  for line in lines:\n    if COMMENT_RE.match(line):\n      print line\n    else:\n      line = line.strip('\\r\\n\\t ')  # Otherwise doesn't strip \\r on Unix.",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_gyp import prettyprint_input\n```\n\n```python\n\n\n```\n\n```python\ndef prettyprint_input(lines):\n  \"\"\"Does the main work of indenting the input based on the brace counts.\"\"\"\n  indent = 0\n  basic_offset = 2\n  last_line = \"\"\n  for line in lines:\n    if COMMENT_RE.match(line):\n      print line\n    else:\n      line = line.strip('\\r\\n\\t ')  # Otherwise doesn't strip \\r on Unix.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def main():\n  if len(sys.argv) > 1:\n    data = open(sys.argv[1]).read().splitlines()\n  else:\n    data = sys.stdin.read().splitlines()\n  # Split up the double braces.\n  lines = split_double_braces(data)\n  # Indent and print the output.\n  prettyprint_input(lines)\n  return 0",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_gyp import main\n```\n\n```python\n\n\n```\n\n```python\ndef main():\n  if len(sys.argv) > 1:\n    data = open(sys.argv[1]).read().splitlines()\n  else:\n    data = sys.stdin.read().splitlines()\n  # Split up the double braces.\n  lines = split_double_braces(data)\n  # Indent and print the output.\n  prettyprint_input(lines)\n  return 0\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "COMMENT_RE",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "COMMENT_RE = re.compile(r'\\s*#.*')\n# Regex to remove quoted strings when we're counting braces.\n# It takes into account quoted quotes, and makes sure that the quotes match.\n# NOTE: It does not handle quotes that span more than one line, or\n# cases where an escaped quote is preceeded by an escaped backslash.\nQUOTE_RE_STR = r'(?P<q>[\\'\"])(.*?)(?<![^\\\\][\\\\])(?P=q)'\nQUOTE_RE = re.compile(QUOTE_RE_STR)\ndef comment_replace(matchobj):\n  return matchobj.group(1) + matchobj.group(2) + '#' * len(matchobj.group(3))\ndef mask_comments(input):",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_gyp import COMMENT_RE\n```\n\n```python\n\n\n```\n\n```python\nCOMMENT_RE = re.compile(r'\\s*#.*')\n# Regex to remove quoted strings when we're counting braces.\n# It takes into account quoted quotes, and makes sure that the quotes match.\n# NOTE: It does not handle quotes that span more than one line, or\n# cases where an escaped quote is preceeded by an escaped backslash.\nQUOTE_RE_STR = r'(?P<q>[\\'\"])(.*?)(?<![^\\\\][\\\\])(?P=q)'\nQUOTE_RE = re.compile(QUOTE_RE_STR)\ndef comment_replace(matchobj):\n  return matchobj.group(1) + matchobj.group(2) + '#' * len(matchobj.group(3))\ndef mask_comments(input):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "QUOTE_RE_STR",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "QUOTE_RE_STR = r'(?P<q>[\\'\"])(.*?)(?<![^\\\\][\\\\])(?P=q)'\nQUOTE_RE = re.compile(QUOTE_RE_STR)\ndef comment_replace(matchobj):\n  return matchobj.group(1) + matchobj.group(2) + '#' * len(matchobj.group(3))\ndef mask_comments(input):\n  \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n  search_re = re.compile(r'(.*?)(#)(.*)')\n  return [search_re.sub(comment_replace, line) for line in input]\ndef quote_replace(matchobj):\n  return \"%s%s%s%s\" % (matchobj.group(1),",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_gyp import QUOTE_RE_STR\n```\n\n```python\n\n\n```\n\n```python\nQUOTE_RE_STR = r'(?P<q>[\\'\"])(.*?)(?<![^\\\\][\\\\])(?P=q)'\nQUOTE_RE = re.compile(QUOTE_RE_STR)\ndef comment_replace(matchobj):\n  return matchobj.group(1) + matchobj.group(2) + '#' * len(matchobj.group(3))\ndef mask_comments(input):\n  \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n  search_re = re.compile(r'(.*?)(#)(.*)')\n  return [search_re.sub(comment_replace, line) for line in input]\ndef quote_replace(matchobj):\n  return \"%s%s%s%s\" % (matchobj.group(1),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "QUOTE_RE",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "QUOTE_RE = re.compile(QUOTE_RE_STR)\ndef comment_replace(matchobj):\n  return matchobj.group(1) + matchobj.group(2) + '#' * len(matchobj.group(3))\ndef mask_comments(input):\n  \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n  search_re = re.compile(r'(.*?)(#)(.*)')\n  return [search_re.sub(comment_replace, line) for line in input]\ndef quote_replace(matchobj):\n  return \"%s%s%s%s\" % (matchobj.group(1),\n                       matchobj.group(2),",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_gyp import QUOTE_RE\n```\n\n```python\n\n\n```\n\n```python\nQUOTE_RE = re.compile(QUOTE_RE_STR)\ndef comment_replace(matchobj):\n  return matchobj.group(1) + matchobj.group(2) + '#' * len(matchobj.group(3))\ndef mask_comments(input):\n  \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n  search_re = re.compile(r'(.*?)(#)(.*)')\n  return [search_re.sub(comment_replace, line) for line in input]\ndef quote_replace(matchobj):\n  return \"%s%s%s%s\" % (matchobj.group(1),\n                       matchobj.group(2),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BuildProject",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "def BuildProject(project, built, projects, deps):\n  # if all dependencies are done, we can build it, otherwise we try to build the\n  # dependency.\n  # This is not infinite-recursion proof.\n  for dep in deps[project]:\n    if dep not in built:\n      BuildProject(dep, built, projects, deps)\n  print project\n  built.append(project)\ndef ParseSolution(solution_file):",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_sln import BuildProject\n```\n\n```python\n\n\n```\n\n```python\ndef BuildProject(project, built, projects, deps):\n  # if all dependencies are done, we can build it, otherwise we try to build the\n  # dependency.\n  # This is not infinite-recursion proof.\n  for dep in deps[project]:\n    if dep not in built:\n      BuildProject(dep, built, projects, deps)\n  print project\n  built.append(project)\ndef ParseSolution(solution_file):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ParseSolution",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "def ParseSolution(solution_file):\n  # All projects, their clsid and paths.\n  projects = dict()\n  # A list of dependencies associated with a project.\n  dependencies = dict()\n  # Regular expressions that matches the SLN format.\n  # The first line of a project definition.\n  begin_project = re.compile(r'^Project\\(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942'\n                             r'}\"\\) = \"(.*)\", \"(.*)\", \"(.*)\"$')\n  # The last line of a project definition.",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_sln import ParseSolution\n```\n\n```python\n\n\n```\n\n```python\ndef ParseSolution(solution_file):\n  # All projects, their clsid and paths.\n  projects = dict()\n  # A list of dependencies associated with a project.\n  dependencies = dict()\n  # Regular expressions that matches the SLN format.\n  # The first line of a project definition.\n  begin_project = re.compile(r'^Project\\(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942'\n                             r'}\"\\) = \"(.*)\", \"(.*)\", \"(.*)\"$')\n  # The last line of a project definition.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PrintDependencies",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "def PrintDependencies(projects, deps):\n  print \"---------------------------------------\"\n  print \"Dependencies for all projects\"\n  print \"---------------------------------------\"\n  print \"--                                   --\"\n  for (project, dep_list) in sorted(deps.items()):\n    print \"Project : %s\" % project\n    print \"Path : %s\" % projects[project][0]\n    if dep_list:\n      for dep in dep_list:",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_sln import PrintDependencies\n```\n\n```python\n\n\n```\n\n```python\ndef PrintDependencies(projects, deps):\n  print \"---------------------------------------\"\n  print \"Dependencies for all projects\"\n  print \"---------------------------------------\"\n  print \"--                                   --\"\n  for (project, dep_list) in sorted(deps.items()):\n    print \"Project : %s\" % project\n    print \"Path : %s\" % projects[project][0]\n    if dep_list:\n      for dep in dep_list:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PrintBuildOrder",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "def PrintBuildOrder(projects, deps):\n  print \"---------------------------------------\"\n  print \"Build order                            \"\n  print \"---------------------------------------\"\n  print \"--                                   --\"\n  built = []\n  for (project, _) in sorted(deps.items()):\n    if project not in built:\n      BuildProject(project, built, projects, deps)\n  print \"--                                   --\"",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_sln import PrintBuildOrder\n```\n\n```python\n\n\n```\n\n```python\ndef PrintBuildOrder(projects, deps):\n  print \"---------------------------------------\"\n  print \"Build order                            \"\n  print \"---------------------------------------\"\n  print \"--                                   --\"\n  built = []\n  for (project, _) in sorted(deps.items()):\n    if project not in built:\n      BuildProject(project, built, projects, deps)\n  print \"--                                   --\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PrintVCProj",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "def PrintVCProj(projects):\n  for project in projects:\n    print \"-------------------------------------\"\n    print \"-------------------------------------\"\n    print project\n    print project\n    print project\n    print \"-------------------------------------\"\n    print \"-------------------------------------\"\n    project_path = os.path.abspath(os.path.join(os.path.dirname(sys.argv[1]),",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_sln import PrintVCProj\n```\n\n```python\n\n\n```\n\n```python\ndef PrintVCProj(projects):\n  for project in projects:\n    print \"-------------------------------------\"\n    print \"-------------------------------------\"\n    print project\n    print project\n    print project\n    print \"-------------------------------------\"\n    print \"-------------------------------------\"\n    project_path = os.path.abspath(os.path.join(os.path.dirname(sys.argv[1]),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "def main():\n  # check if we have exactly 1 parameter.\n  if len(sys.argv) < 2:\n    print 'Usage: %s \"c:\\\\path\\\\to\\\\project.sln\"' % sys.argv[0]\n    return 1\n  (projects, deps) = ParseSolution(sys.argv[1])\n  PrintDependencies(projects, deps)\n  PrintBuildOrder(projects, deps)\n  if '--recursive' in sys.argv:\n    PrintVCProj(projects)",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_sln import main\n```\n\n```python\n\n\n```\n\n```python\ndef main():\n  # check if we have exactly 1 parameter.\n  if len(sys.argv) < 2:\n    print 'Usage: %s \"c:\\\\path\\\\to\\\\project.sln\"' % sys.argv[0]\n    return 1\n  (projects, deps) = ParseSolution(sys.argv[1])\n  PrintDependencies(projects, deps)\n  PrintBuildOrder(projects, deps)\n  if '--recursive' in sys.argv:\n    PrintVCProj(projects)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "__author__ = 'nsylvain (Nicolas Sylvain)'\nimport os\nimport re\nimport sys\nimport pretty_vcproj\ndef BuildProject(project, built, projects, deps):\n  # if all dependencies are done, we can build it, otherwise we try to build the\n  # dependency.\n  # This is not infinite-recursion proof.\n  for dep in deps[project]:",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_sln import __author__\n```\n\n```python\n\n\n```\n\n```python\n__author__ = 'nsylvain (Nicolas Sylvain)'\nimport os\nimport re\nimport sys\nimport pretty_vcproj\ndef BuildProject(project, built, projects, deps):\n  # if all dependencies are done, we can build it, otherwise we try to build the\n  # dependency.\n  # This is not infinite-recursion proof.\n  for dep in deps[project]:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CmpTuple",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "class CmpTuple(object):\n  \"\"\"Compare function between 2 tuple.\"\"\"\n  def __call__(self, x, y):\n    return cmp(x[0], y[0])\nclass CmpNode(object):\n  \"\"\"Compare function between 2 xml nodes.\"\"\"\n  def __call__(self, x, y):\n    def get_string(node):\n      node_string = \"node\"\n      node_string += node.nodeName",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import CmpTuple\n```\n\n```python\n\n\n```\n\n```python\nclass CmpTuple(object):\n  \"\"\"Compare function between 2 tuple.\"\"\"\n  def __call__(self, x, y):\n    return cmp(x[0], y[0])\nclass CmpNode(object):\n  \"\"\"Compare function between 2 xml nodes.\"\"\"\n  def __call__(self, x, y):\n    def get_string(node):\n      node_string = \"node\"\n      node_string += node.nodeName\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CmpNode",
        "kind": 6,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "class CmpNode(object):\n  \"\"\"Compare function between 2 xml nodes.\"\"\"\n  def __call__(self, x, y):\n    def get_string(node):\n      node_string = \"node\"\n      node_string += node.nodeName\n      if node.nodeValue:\n        node_string += node.nodeValue\n      if node.attributes:\n        # We first sort by name, if present.",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import CmpNode\n```\n\n```python\n\n\n```\n\n```python\nclass CmpNode(object):\n  \"\"\"Compare function between 2 xml nodes.\"\"\"\n  def __call__(self, x, y):\n    def get_string(node):\n      node_string = \"node\"\n      node_string += node.nodeName\n      if node.nodeValue:\n        node_string += node.nodeValue\n      if node.attributes:\n        # We first sort by name, if present.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PrettyPrintNode",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def PrettyPrintNode(node, indent=0):\n  if node.nodeType == Node.TEXT_NODE:\n    if node.data.strip():\n      print '%s%s' % (' '*indent, node.data.strip())\n    return\n  if node.childNodes:\n    node.normalize()\n  # Get the number of attributes\n  attr_count = 0\n  if node.attributes:",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import PrettyPrintNode\n```\n\n```python\n\n\n```\n\n```python\ndef PrettyPrintNode(node, indent=0):\n  if node.nodeType == Node.TEXT_NODE:\n    if node.data.strip():\n      print '%s%s' % (' '*indent, node.data.strip())\n    return\n  if node.childNodes:\n    node.normalize()\n  # Get the number of attributes\n  attr_count = 0\n  if node.attributes:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FlattenFilter",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def FlattenFilter(node):\n  \"\"\"Returns a list of all the node and sub nodes.\"\"\"\n  node_list = []\n  if (node.attributes and\n      node.getAttribute('Name') == '_excluded_files'):\n      # We don't add the \"_excluded_files\" filter.\n    return []\n  for current in node.childNodes:\n    if current.nodeName == 'Filter':\n      node_list.extend(FlattenFilter(current))",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import FlattenFilter\n```\n\n```python\n\n\n```\n\n```python\ndef FlattenFilter(node):\n  \"\"\"Returns a list of all the node and sub nodes.\"\"\"\n  node_list = []\n  if (node.attributes and\n      node.getAttribute('Name') == '_excluded_files'):\n      # We don't add the \"_excluded_files\" filter.\n    return []\n  for current in node.childNodes:\n    if current.nodeName == 'Filter':\n      node_list.extend(FlattenFilter(current))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FixFilenames",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def FixFilenames(filenames, current_directory):\n  new_list = []\n  for filename in filenames:\n    if filename:\n      for key in REPLACEMENTS:\n        filename = filename.replace(key, REPLACEMENTS[key])\n      os.chdir(current_directory)\n      filename = filename.strip('\"\\' ')\n      if filename.startswith('$'):\n        new_list.append(filename)",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import FixFilenames\n```\n\n```python\n\n\n```\n\n```python\ndef FixFilenames(filenames, current_directory):\n  new_list = []\n  for filename in filenames:\n    if filename:\n      for key in REPLACEMENTS:\n        filename = filename.replace(key, REPLACEMENTS[key])\n      os.chdir(current_directory)\n      filename = filename.strip('\"\\' ')\n      if filename.startswith('$'):\n        new_list.append(filename)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AbsoluteNode",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def AbsoluteNode(node):\n  \"\"\"Makes all the properties we know about in this node absolute.\"\"\"\n  if node.attributes:\n    for (name, value) in node.attributes.items():\n      if name in ['InheritedPropertySheets', 'RelativePath',\n                  'AdditionalIncludeDirectories',\n                  'IntermediateDirectory', 'OutputDirectory',\n                  'AdditionalLibraryDirectories']:\n        # We want to fix up these paths\n        path_list = value.split(';')",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import AbsoluteNode\n```\n\n```python\n\n\n```\n\n```python\ndef AbsoluteNode(node):\n  \"\"\"Makes all the properties we know about in this node absolute.\"\"\"\n  if node.attributes:\n    for (name, value) in node.attributes.items():\n      if name in ['InheritedPropertySheets', 'RelativePath',\n                  'AdditionalIncludeDirectories',\n                  'IntermediateDirectory', 'OutputDirectory',\n                  'AdditionalLibraryDirectories']:\n        # We want to fix up these paths\n        path_list = value.split(';')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CleanupVcproj",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def CleanupVcproj(node):\n  \"\"\"For each sub node, we call recursively this function.\"\"\"\n  for sub_node in node.childNodes:\n    AbsoluteNode(sub_node)\n    CleanupVcproj(sub_node)\n  # Normalize the node, and remove all extranous whitespaces.\n  for sub_node in node.childNodes:\n    if sub_node.nodeType == Node.TEXT_NODE:\n      sub_node.data = sub_node.data.replace(\"\\r\", \"\")\n      sub_node.data = sub_node.data.replace(\"\\n\", \"\")",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import CleanupVcproj\n```\n\n```python\n\n\n```\n\n```python\ndef CleanupVcproj(node):\n  \"\"\"For each sub node, we call recursively this function.\"\"\"\n  for sub_node in node.childNodes:\n    AbsoluteNode(sub_node)\n    CleanupVcproj(sub_node)\n  # Normalize the node, and remove all extranous whitespaces.\n  for sub_node in node.childNodes:\n    if sub_node.nodeType == Node.TEXT_NODE:\n      sub_node.data = sub_node.data.replace(\"\\r\", \"\")\n      sub_node.data = sub_node.data.replace(\"\\n\", \"\")\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetConfiguationNodes",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def GetConfiguationNodes(vcproj):\n  #TODO(nsylvain): Find a better way to navigate the xml.\n  nodes = []\n  for node in vcproj.childNodes:\n    if node.nodeName == \"Configurations\":\n      for sub_node in node.childNodes:\n        if sub_node.nodeName == \"Configuration\":\n          nodes.append(sub_node)\n  return nodes\ndef GetChildrenVsprops(filename):",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import GetConfiguationNodes\n```\n\n```python\n\n\n```\n\n```python\ndef GetConfiguationNodes(vcproj):\n  #TODO(nsylvain): Find a better way to navigate the xml.\n  nodes = []\n  for node in vcproj.childNodes:\n    if node.nodeName == \"Configurations\":\n      for sub_node in node.childNodes:\n        if sub_node.nodeName == \"Configuration\":\n          nodes.append(sub_node)\n  return nodes\ndef GetChildrenVsprops(filename):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetChildrenVsprops",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def GetChildrenVsprops(filename):\n  dom = parse(filename)\n  if dom.documentElement.attributes:\n    vsprops = dom.documentElement.getAttribute('InheritedPropertySheets')\n    return FixFilenames(vsprops.split(';'), os.path.dirname(filename))\n  return []\ndef SeekToNode(node1, child2):\n  # A text node does not have properties.\n  if child2.nodeType == Node.TEXT_NODE:\n    return None",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import GetChildrenVsprops\n```\n\n```python\n\n\n```\n\n```python\ndef GetChildrenVsprops(filename):\n  dom = parse(filename)\n  if dom.documentElement.attributes:\n    vsprops = dom.documentElement.getAttribute('InheritedPropertySheets')\n    return FixFilenames(vsprops.split(';'), os.path.dirname(filename))\n  return []\ndef SeekToNode(node1, child2):\n  # A text node does not have properties.\n  if child2.nodeType == Node.TEXT_NODE:\n    return None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SeekToNode",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def SeekToNode(node1, child2):\n  # A text node does not have properties.\n  if child2.nodeType == Node.TEXT_NODE:\n    return None\n  # Get the name of the current node.\n  current_name = child2.getAttribute(\"Name\")\n  if not current_name:\n    # There is no name. We don't know how to merge.\n    return None\n  # Look through all the nodes to find a match.",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import SeekToNode\n```\n\n```python\n\n\n```\n\n```python\ndef SeekToNode(node1, child2):\n  # A text node does not have properties.\n  if child2.nodeType == Node.TEXT_NODE:\n    return None\n  # Get the name of the current node.\n  current_name = child2.getAttribute(\"Name\")\n  if not current_name:\n    # There is no name. We don't know how to merge.\n    return None\n  # Look through all the nodes to find a match.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MergeAttributes",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def MergeAttributes(node1, node2):\n  # No attributes to merge?\n  if not node2.attributes:\n    return\n  for (name, value2) in node2.attributes.items():\n    # Don't merge the 'Name' attribute.\n    if name == 'Name':\n      continue\n    value1 = node1.getAttribute(name)\n    if value1:",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import MergeAttributes\n```\n\n```python\n\n\n```\n\n```python\ndef MergeAttributes(node1, node2):\n  # No attributes to merge?\n  if not node2.attributes:\n    return\n  for (name, value2) in node2.attributes.items():\n    # Don't merge the 'Name' attribute.\n    if name == 'Name':\n      continue\n    value1 = node1.getAttribute(name)\n    if value1:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MergeProperties",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def MergeProperties(node1, node2):\n  MergeAttributes(node1, node2)\n  for child2 in node2.childNodes:\n    child1 = SeekToNode(node1, child2)\n    if child1:\n      MergeProperties(child1, child2)\n    else:\n      node1.appendChild(child2.cloneNode(True))\ndef main(argv):\n  \"\"\"Main function of this vcproj prettifier.\"\"\"",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import MergeProperties\n```\n\n```python\n\n\n```\n\n```python\ndef MergeProperties(node1, node2):\n  MergeAttributes(node1, node2)\n  for child2 in node2.childNodes:\n    child1 = SeekToNode(node1, child2)\n    if child1:\n      MergeProperties(child1, child2)\n    else:\n      node1.appendChild(child2.cloneNode(True))\ndef main(argv):\n  \"\"\"Main function of this vcproj prettifier.\"\"\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def main(argv):\n  \"\"\"Main function of this vcproj prettifier.\"\"\"\n  global ARGUMENTS\n  ARGUMENTS = argv\n  # check if we have exactly 1 parameter.\n  if len(argv) < 2:\n    print ('Usage: %s \"c:\\\\path\\\\to\\\\vcproj.vcproj\" [key1=value1] '\n           '[key2=value2]' % argv[0])\n    return 1\n  # Parse the keys",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import main\n```\n\n```python\n\n\n```\n\n```python\ndef main(argv):\n  \"\"\"Main function of this vcproj prettifier.\"\"\"\n  global ARGUMENTS\n  ARGUMENTS = argv\n  # check if we have exactly 1 parameter.\n  if len(argv) < 2:\n    print ('Usage: %s \"c:\\\\path\\\\to\\\\vcproj.vcproj\" [key1=value1] '\n           '[key2=value2]' % argv[0])\n    return 1\n  # Parse the keys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "__author__ = 'nsylvain (Nicolas Sylvain)'\nimport os\nimport sys\nfrom xml.dom.minidom import parse\nfrom xml.dom.minidom import Node\nREPLACEMENTS = dict()\nARGUMENTS = None\nclass CmpTuple(object):\n  \"\"\"Compare function between 2 tuple.\"\"\"\n  def __call__(self, x, y):",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import __author__\n```\n\n```python\n\n\n```\n\n```python\n__author__ = 'nsylvain (Nicolas Sylvain)'\nimport os\nimport sys\nfrom xml.dom.minidom import parse\nfrom xml.dom.minidom import Node\nREPLACEMENTS = dict()\nARGUMENTS = None\nclass CmpTuple(object):\n  \"\"\"Compare function between 2 tuple.\"\"\"\n  def __call__(self, x, y):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "REPLACEMENTS",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "REPLACEMENTS = dict()\nARGUMENTS = None\nclass CmpTuple(object):\n  \"\"\"Compare function between 2 tuple.\"\"\"\n  def __call__(self, x, y):\n    return cmp(x[0], y[0])\nclass CmpNode(object):\n  \"\"\"Compare function between 2 xml nodes.\"\"\"\n  def __call__(self, x, y):\n    def get_string(node):",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import REPLACEMENTS\n```\n\n```python\n\n\n```\n\n```python\nREPLACEMENTS = dict()\nARGUMENTS = None\nclass CmpTuple(object):\n  \"\"\"Compare function between 2 tuple.\"\"\"\n  def __call__(self, x, y):\n    return cmp(x[0], y[0])\nclass CmpNode(object):\n  \"\"\"Compare function between 2 xml nodes.\"\"\"\n  def __call__(self, x, y):\n    def get_string(node):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ARGUMENTS",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "ARGUMENTS = None\nclass CmpTuple(object):\n  \"\"\"Compare function between 2 tuple.\"\"\"\n  def __call__(self, x, y):\n    return cmp(x[0], y[0])\nclass CmpNode(object):\n  \"\"\"Compare function between 2 xml nodes.\"\"\"\n  def __call__(self, x, y):\n    def get_string(node):\n      node_string = \"node\"",
        "detail": "node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.tools.pretty_vcproj import ARGUMENTS\n```\n\n```python\n\n\n```\n\n```python\nARGUMENTS = None\nclass CmpTuple(object):\n  \"\"\"Compare function between 2 tuple.\"\"\"\n  def __call__(self, x, y):\n    return cmp(x[0], y[0])\nclass CmpNode(object):\n  \"\"\"Compare function between 2 xml nodes.\"\"\"\n  def __call__(self, x, y):\n    def get_string(node):\n      node_string = \"node\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CheckChangeOnUpload",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.PRESUBMIT",
        "description": "node_modules.node-gyp.gyp.PRESUBMIT",
        "peekOfCode": "def CheckChangeOnUpload(input_api, output_api):\n  report = []\n  report.extend(input_api.canned_checks.PanProjectChecks(\n      input_api, output_api, license_header=_LicenseHeader(input_api)))\n  return report\ndef CheckChangeOnCommit(input_api, output_api):\n  report = []\n  report.extend(input_api.canned_checks.PanProjectChecks(\n      input_api, output_api, license_header=_LicenseHeader(input_api)))\n  report.extend(input_api.canned_checks.CheckTreeIsOpen(",
        "detail": "node_modules.node-gyp.gyp.PRESUBMIT",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.PRESUBMIT import CheckChangeOnUpload\n```\n\n```python\n\n\n```\n\n```python\ndef CheckChangeOnUpload(input_api, output_api):\n  report = []\n  report.extend(input_api.canned_checks.PanProjectChecks(\n      input_api, output_api, license_header=_LicenseHeader(input_api)))\n  return report\ndef CheckChangeOnCommit(input_api, output_api):\n  report = []\n  report.extend(input_api.canned_checks.PanProjectChecks(\n      input_api, output_api, license_header=_LicenseHeader(input_api)))\n  report.extend(input_api.canned_checks.CheckTreeIsOpen(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CheckChangeOnCommit",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.PRESUBMIT",
        "description": "node_modules.node-gyp.gyp.PRESUBMIT",
        "peekOfCode": "def CheckChangeOnCommit(input_api, output_api):\n  report = []\n  report.extend(input_api.canned_checks.PanProjectChecks(\n      input_api, output_api, license_header=_LicenseHeader(input_api)))\n  report.extend(input_api.canned_checks.CheckTreeIsOpen(\n      input_api, output_api,\n      'http://gyp-status.appspot.com/status',\n      'http://gyp-status.appspot.com/current'))\n  import os\n  import sys",
        "detail": "node_modules.node-gyp.gyp.PRESUBMIT",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.PRESUBMIT import CheckChangeOnCommit\n```\n\n```python\n\n\n```\n\n```python\ndef CheckChangeOnCommit(input_api, output_api):\n  report = []\n  report.extend(input_api.canned_checks.PanProjectChecks(\n      input_api, output_api, license_header=_LicenseHeader(input_api)))\n  report.extend(input_api.canned_checks.CheckTreeIsOpen(\n      input_api, output_api,\n      'http://gyp-status.appspot.com/status',\n      'http://gyp-status.appspot.com/current'))\n  import os\n  import sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GetPreferredTryMasters",
        "kind": 2,
        "importPath": "node_modules.node-gyp.gyp.PRESUBMIT",
        "description": "node_modules.node-gyp.gyp.PRESUBMIT",
        "peekOfCode": "def GetPreferredTryMasters(_, change):\n  return {\n      'client.gyp': { t: set(['defaulttests']) for t in TRYBOTS },\n  }",
        "detail": "node_modules.node-gyp.gyp.PRESUBMIT",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.PRESUBMIT import GetPreferredTryMasters\n```\n\n```python\n\n\n```\n\n```python\ndef GetPreferredTryMasters(_, change):\n  return {\n      'client.gyp': { t: set(['defaulttests']) for t in TRYBOTS },\n  }\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PYLINT_BLACKLIST",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.PRESUBMIT",
        "description": "node_modules.node-gyp.gyp.PRESUBMIT",
        "peekOfCode": "PYLINT_BLACKLIST = [\n    # TODO: fix me.\n    # From SCons, not done in google style.\n    'test/lib/TestCmd.py',\n    'test/lib/TestCommon.py',\n    'test/lib/TestGyp.py',\n]\nPYLINT_DISABLED_WARNINGS = [\n    # TODO: fix me.\n    # Many tests include modules they don't use.",
        "detail": "node_modules.node-gyp.gyp.PRESUBMIT",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.PRESUBMIT import PYLINT_BLACKLIST\n```\n\n```python\n\n\n```\n\n```python\nPYLINT_BLACKLIST = [\n    # TODO: fix me.\n    # From SCons, not done in google style.\n    'test/lib/TestCmd.py',\n    'test/lib/TestCommon.py',\n    'test/lib/TestGyp.py',\n]\nPYLINT_DISABLED_WARNINGS = [\n    # TODO: fix me.\n    # Many tests include modules they don't use.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PYLINT_DISABLED_WARNINGS",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.PRESUBMIT",
        "description": "node_modules.node-gyp.gyp.PRESUBMIT",
        "peekOfCode": "PYLINT_DISABLED_WARNINGS = [\n    # TODO: fix me.\n    # Many tests include modules they don't use.\n    'W0611',\n    # Possible unbalanced tuple unpacking with sequence.\n    'W0632',\n    # Attempting to unpack a non-sequence.\n    'W0633',\n    # Include order doesn't properly include local files?\n    'F0401',",
        "detail": "node_modules.node-gyp.gyp.PRESUBMIT",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.PRESUBMIT import PYLINT_DISABLED_WARNINGS\n```\n\n```python\n\n\n```\n\n```python\nPYLINT_DISABLED_WARNINGS = [\n    # TODO: fix me.\n    # Many tests include modules they don't use.\n    'W0611',\n    # Possible unbalanced tuple unpacking with sequence.\n    'W0632',\n    # Attempting to unpack a non-sequence.\n    'W0633',\n    # Include order doesn't properly include local files?\n    'F0401',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TRYBOTS",
        "kind": 5,
        "importPath": "node_modules.node-gyp.gyp.PRESUBMIT",
        "description": "node_modules.node-gyp.gyp.PRESUBMIT",
        "peekOfCode": "TRYBOTS = [\n    'linux_try',\n    'mac_try',\n    'win_try',\n]\ndef GetPreferredTryMasters(_, change):\n  return {\n      'client.gyp': { t: set(['defaulttests']) for t in TRYBOTS },\n  }",
        "detail": "node_modules.node-gyp.gyp.PRESUBMIT",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.gyp.PRESUBMIT import TRYBOTS\n```\n\n```python\n\n\n```\n\n```python\nTRYBOTS = [\n    'linux_try',\n    'mac_try',\n    'win_try',\n]\ndef GetPreferredTryMasters(_, change):\n  return {\n      'client.gyp': { t: set(['defaulttests']) for t in TRYBOTS },\n  }\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "node_modules.node-gyp.test.fixtures.test-charmap",
        "description": "node_modules.node-gyp.test.fixtures.test-charmap",
        "peekOfCode": "def main():\n  encoding = locale.getdefaultlocale()[1]\n  if not encoding:\n    return False\n  sys.setdefaultencoding(encoding)\n  textmap = {\n    'cp936': u'\\u4e2d\\u6587',\n    'cp1252': u'Lat\\u012Bna',\n    'cp932': u'\\u306b\\u307b\\u3093\\u3054'\n  }",
        "detail": "node_modules.node-gyp.test.fixtures.test-charmap",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.test.fixtures.test-charmap import main\n```\n\n```python\n\n\n```\n\n```python\ndef main():\n  encoding = locale.getdefaultlocale()[1]\n  if not encoding:\n    return False\n  sys.setdefaultencoding(encoding)\n  textmap = {\n    'cp936': u'\\u4e2d\\u6587',\n    'cp1252': u'Lat\\u012Bna',\n    'cp932': u'\\u306b\\u307b\\u3093\\u3054'\n  }\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "IsMac",
        "kind": 2,
        "importPath": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "def IsMac(params):\n  return 'mac' == gyp.common.GetFlavor(params)\ndef CalculateVariables(default_variables, params):\n  default_variables.setdefault('OS', gyp.common.GetFlavor(params))\ndef AddCommandsForTarget(cwd, target, params, per_config_commands):\n  output_dir = params['generator_flags']['output_dir']\n  for configuration_name, configuration in target['configurations'].iteritems():\n    builddir_name = os.path.join(output_dir, configuration_name)\n    if IsMac(params):\n      xcode_settings = gyp.xcode_emulation.XcodeSettings(target)",
        "detail": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json import IsMac\n```\n\n```python\n\n\n```\n\n```python\ndef IsMac(params):\n  return 'mac' == gyp.common.GetFlavor(params)\ndef CalculateVariables(default_variables, params):\n  default_variables.setdefault('OS', gyp.common.GetFlavor(params))\ndef AddCommandsForTarget(cwd, target, params, per_config_commands):\n  output_dir = params['generator_flags']['output_dir']\n  for configuration_name, configuration in target['configurations'].iteritems():\n    builddir_name = os.path.join(output_dir, configuration_name)\n    if IsMac(params):\n      xcode_settings = gyp.xcode_emulation.XcodeSettings(target)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n  default_variables.setdefault('OS', gyp.common.GetFlavor(params))\ndef AddCommandsForTarget(cwd, target, params, per_config_commands):\n  output_dir = params['generator_flags']['output_dir']\n  for configuration_name, configuration in target['configurations'].iteritems():\n    builddir_name = os.path.join(output_dir, configuration_name)\n    if IsMac(params):\n      xcode_settings = gyp.xcode_emulation.XcodeSettings(target)\n      cflags = xcode_settings.GetCflags(configuration_name)\n      cflags_c = xcode_settings.GetCflagsC(configuration_name)",
        "detail": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json import CalculateVariables\n```\n\n```python\n\n\n```\n\n```python\ndef CalculateVariables(default_variables, params):\n  default_variables.setdefault('OS', gyp.common.GetFlavor(params))\ndef AddCommandsForTarget(cwd, target, params, per_config_commands):\n  output_dir = params['generator_flags']['output_dir']\n  for configuration_name, configuration in target['configurations'].iteritems():\n    builddir_name = os.path.join(output_dir, configuration_name)\n    if IsMac(params):\n      xcode_settings = gyp.xcode_emulation.XcodeSettings(target)\n      cflags = xcode_settings.GetCflags(configuration_name)\n      cflags_c = xcode_settings.GetCflagsC(configuration_name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AddCommandsForTarget",
        "kind": 2,
        "importPath": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "def AddCommandsForTarget(cwd, target, params, per_config_commands):\n  output_dir = params['generator_flags']['output_dir']\n  for configuration_name, configuration in target['configurations'].iteritems():\n    builddir_name = os.path.join(output_dir, configuration_name)\n    if IsMac(params):\n      xcode_settings = gyp.xcode_emulation.XcodeSettings(target)\n      cflags = xcode_settings.GetCflags(configuration_name)\n      cflags_c = xcode_settings.GetCflagsC(configuration_name)\n      cflags_cc = xcode_settings.GetCflagsCC(configuration_name)\n    else:",
        "detail": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json import AddCommandsForTarget\n```\n\n```python\n\n\n```\n\n```python\ndef AddCommandsForTarget(cwd, target, params, per_config_commands):\n  output_dir = params['generator_flags']['output_dir']\n  for configuration_name, configuration in target['configurations'].iteritems():\n    builddir_name = os.path.join(output_dir, configuration_name)\n    if IsMac(params):\n      xcode_settings = gyp.xcode_emulation.XcodeSettings(target)\n      cflags = xcode_settings.GetCflags(configuration_name)\n      cflags_c = xcode_settings.GetCflagsC(configuration_name)\n      cflags_cc = xcode_settings.GetCflagsCC(configuration_name)\n    else:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n  per_config_commands = {}\n  for qualified_target, target in target_dicts.iteritems():\n    build_file, target_name, toolset = (\n        gyp.common.ParseQualifiedTarget(qualified_target))\n    if IsMac(params):\n      settings = data[build_file]\n      gyp.xcode_emulation.MergeGlobalXcodeSettingsToSpec(settings, target)\n    cwd = os.path.dirname(build_file)\n    AddCommandsForTarget(cwd, target, params, per_config_commands)",
        "detail": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json import GenerateOutput\n```\n\n```python\n\n\n```\n\n```python\ndef GenerateOutput(target_list, target_dicts, data, params):\n  per_config_commands = {}\n  for qualified_target, target in target_dicts.iteritems():\n    build_file, target_name, toolset = (\n        gyp.common.ParseQualifiedTarget(qualified_target))\n    if IsMac(params):\n      settings = data[build_file]\n      gyp.xcode_emulation.MergeGlobalXcodeSettingsToSpec(settings, target)\n    cwd = os.path.dirname(build_file)\n    AddCommandsForTarget(cwd, target, params, per_config_commands)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n  pass",
        "detail": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json import PerformBuild\n```\n\n```python\n\n\n```\n\n```python\ndef PerformBuild(data, configurations, params):\n  pass\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_additional_non_configuration_keys",
        "kind": 5,
        "importPath": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',",
        "detail": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json import generator_additional_non_configuration_keys\n```\n\n```python\n\n\n```\n\n```python\ngenerator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_additional_path_sections",
        "kind": 5,
        "importPath": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',",
        "detail": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json import generator_additional_path_sections\n```\n\n```python\n\n\n```\n\n```python\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_extra_sources_for_rules",
        "kind": 5,
        "importPath": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',",
        "detail": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json import generator_extra_sources_for_rules\n```\n\n```python\n\n\n```\n\n```python\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_filelist_paths = None\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n  'PRODUCT_DIR': '$(builddir)',",
        "detail": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json import generator_filelist_paths\n```\n\n```python\n\n\n```\n\n```python\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n  'PRODUCT_DIR': '$(builddir)',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n  'PRODUCT_DIR': '$(builddir)',\n  'RULE_INPUT_DIRNAME': '%(INPUT_DIRNAME)s',",
        "detail": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json import generator_supports_multiple_toolsets\n```\n\n```python\n\n\n```\n\n```python\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n  'PRODUCT_DIR': '$(builddir)',\n  'RULE_INPUT_DIRNAME': '%(INPUT_DIRNAME)s',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_wants_sorted_dependencies",
        "kind": 5,
        "importPath": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n  'PRODUCT_DIR': '$(builddir)',\n  'RULE_INPUT_DIRNAME': '%(INPUT_DIRNAME)s',\n  'RULE_INPUT_EXT': '$(suffix $<)',",
        "detail": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json import generator_wants_sorted_dependencies\n```\n\n```python\n\n\n```\n\n```python\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n  'PRODUCT_DIR': '$(builddir)',\n  'RULE_INPUT_DIRNAME': '%(INPUT_DIRNAME)s',\n  'RULE_INPUT_EXT': '$(suffix $<)',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n  'PRODUCT_DIR': '$(builddir)',\n  'RULE_INPUT_DIRNAME': '%(INPUT_DIRNAME)s',\n  'RULE_INPUT_EXT': '$(suffix $<)',\n  'RULE_INPUT_NAME': '$(notdir $<)',\n  'RULE_INPUT_PATH': '$(abspath $<)',",
        "detail": "node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {
            "value": "\n```python\nfrom node_modules.node-gyp.tools.gyp.pylib.gyp.generator.compile_commands_json import generator_default_variables\n```\n\n```python\n\n\n```\n\n```python\ngenerator_default_variables = {\n  'CONFIGURATION_NAME': '$(BUILDTYPE)',\n  'EXECUTABLE_PREFIX': '',\n  'EXECUTABLE_SUFFIX': '',\n  'INTERMEDIATE_DIR': '$(obj).$(TOOLSET)/$(TARGET)/geni',\n  'PRODUCT_DIR': '$(builddir)',\n  'RULE_INPUT_DIRNAME': '%(INPUT_DIRNAME)s',\n  'RULE_INPUT_EXT': '$(suffix $<)',\n  'RULE_INPUT_NAME': '$(notdir $<)',\n  'RULE_INPUT_PATH': '$(abspath $<)',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "configurationblock",
        "kind": 6,
        "importPath": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "description": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "peekOfCode": "class configurationblock(nodes.General, nodes.Element):\n    pass\nclass ConfigurationBlock(Directive):\n    has_content = True\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = True\n    option_spec = {}\n    formats = {\n        'html':            'HTML',",
        "detail": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en._exts.configurationblock import configurationblock\n```\n\n```python\n\n\n```\n\n```python\nclass configurationblock(nodes.General, nodes.Element):\n    pass\nclass ConfigurationBlock(Directive):\n    has_content = True\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = True\n    option_spec = {}\n    formats = {\n        'html':            'HTML',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ConfigurationBlock",
        "kind": 6,
        "importPath": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "description": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "peekOfCode": "class ConfigurationBlock(Directive):\n    has_content = True\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = True\n    option_spec = {}\n    formats = {\n        'html':            'HTML',\n        'xml':             'XML',\n        'php':             'PHP',",
        "detail": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en._exts.configurationblock import ConfigurationBlock\n```\n\n```python\n\n\n```\n\n```python\nclass ConfigurationBlock(Directive):\n    has_content = True\n    required_arguments = 0\n    optional_arguments = 0\n    final_argument_whitespace = True\n    option_spec = {}\n    formats = {\n        'html':            'HTML',\n        'xml':             'XML',\n        'php':             'PHP',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "visit_configurationblock_html",
        "kind": 2,
        "importPath": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "description": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "peekOfCode": "def visit_configurationblock_html(self, node):\n    self.body.append(self.starttag(node, 'div', CLASS='configuration-block'))\ndef depart_configurationblock_html(self, node):\n    self.body.append('</div>\\n')\ndef visit_configurationblock_latex(self, node):\n    pass\ndef depart_configurationblock_latex(self, node):\n    pass\ndef setup(app):\n    app.add_node(configurationblock,",
        "detail": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en._exts.configurationblock import visit_configurationblock_html\n```\n\n```python\n\n\n```\n\n```python\ndef visit_configurationblock_html(self, node):\n    self.body.append(self.starttag(node, 'div', CLASS='configuration-block'))\ndef depart_configurationblock_html(self, node):\n    self.body.append('</div>\\n')\ndef visit_configurationblock_latex(self, node):\n    pass\ndef depart_configurationblock_latex(self, node):\n    pass\ndef setup(app):\n    app.add_node(configurationblock,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "depart_configurationblock_html",
        "kind": 2,
        "importPath": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "description": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "peekOfCode": "def depart_configurationblock_html(self, node):\n    self.body.append('</div>\\n')\ndef visit_configurationblock_latex(self, node):\n    pass\ndef depart_configurationblock_latex(self, node):\n    pass\ndef setup(app):\n    app.add_node(configurationblock,\n                 html=(visit_configurationblock_html, depart_configurationblock_html),\n                 latex=(visit_configurationblock_latex, depart_configurationblock_latex))",
        "detail": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en._exts.configurationblock import depart_configurationblock_html\n```\n\n```python\n\n\n```\n\n```python\ndef depart_configurationblock_html(self, node):\n    self.body.append('</div>\\n')\ndef visit_configurationblock_latex(self, node):\n    pass\ndef depart_configurationblock_latex(self, node):\n    pass\ndef setup(app):\n    app.add_node(configurationblock,\n                 html=(visit_configurationblock_html, depart_configurationblock_html),\n                 latex=(visit_configurationblock_latex, depart_configurationblock_latex))\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "visit_configurationblock_latex",
        "kind": 2,
        "importPath": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "description": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "peekOfCode": "def visit_configurationblock_latex(self, node):\n    pass\ndef depart_configurationblock_latex(self, node):\n    pass\ndef setup(app):\n    app.add_node(configurationblock,\n                 html=(visit_configurationblock_html, depart_configurationblock_html),\n                 latex=(visit_configurationblock_latex, depart_configurationblock_latex))\n    app.add_directive('configuration-block', ConfigurationBlock)",
        "detail": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en._exts.configurationblock import visit_configurationblock_latex\n```\n\n```python\n\n\n```\n\n```python\ndef visit_configurationblock_latex(self, node):\n    pass\ndef depart_configurationblock_latex(self, node):\n    pass\ndef setup(app):\n    app.add_node(configurationblock,\n                 html=(visit_configurationblock_html, depart_configurationblock_html),\n                 latex=(visit_configurationblock_latex, depart_configurationblock_latex))\n    app.add_directive('configuration-block', ConfigurationBlock)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "depart_configurationblock_latex",
        "kind": 2,
        "importPath": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "description": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "peekOfCode": "def depart_configurationblock_latex(self, node):\n    pass\ndef setup(app):\n    app.add_node(configurationblock,\n                 html=(visit_configurationblock_html, depart_configurationblock_html),\n                 latex=(visit_configurationblock_latex, depart_configurationblock_latex))\n    app.add_directive('configuration-block', ConfigurationBlock)",
        "detail": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en._exts.configurationblock import depart_configurationblock_latex\n```\n\n```python\n\n\n```\n\n```python\ndef depart_configurationblock_latex(self, node):\n    pass\ndef setup(app):\n    app.add_node(configurationblock,\n                 html=(visit_configurationblock_html, depart_configurationblock_html),\n                 latex=(visit_configurationblock_latex, depart_configurationblock_latex))\n    app.add_directive('configuration-block', ConfigurationBlock)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "description": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "peekOfCode": "def setup(app):\n    app.add_node(configurationblock,\n                 html=(visit_configurationblock_html, depart_configurationblock_html),\n                 latex=(visit_configurationblock_latex, depart_configurationblock_latex))\n    app.add_directive('configuration-block', ConfigurationBlock)",
        "detail": "vendor.doctrine.orm.docs.en._exts.configurationblock",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en._exts.configurationblock import setup\n```\n\n```python\n\n\n```\n\n```python\ndef setup(app):\n    app.add_node(configurationblock,\n                 html=(visit_configurationblock_html, depart_configurationblock_html),\n                 latex=(visit_configurationblock_latex, depart_configurationblock_latex))\n    app.add_directive('configuration-block', ConfigurationBlock)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "linkcode_resolve",
        "kind": 2,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "def linkcode_resolve(domain, info):\n    if domain == 'dcorm':\n        return 'http://'\n    return None",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import linkcode_resolve\n```\n\n```python\n\n\n```\n\n```python\ndef linkcode_resolve(domain, info):\n    if domain == 'dcorm':\n        return 'http://'\n    return None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "extensions = ['configurationblock']\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import extensions\n```\n\n```python\n\n\n```\n\n```python\nextensions = ['configurationblock']\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "templates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Doctrine 2 ORM'\ncopyright = u'2010-%y, Doctrine Project Team'.format(datetime.date.today)",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import templates_path\n```\n\n```python\n\n\n```\n\n```python\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Doctrine 2 ORM'\ncopyright = u'2010-%y, Doctrine Project Team'.format(datetime.date.today)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "source_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Doctrine 2 ORM'\ncopyright = u'2010-%y, Doctrine Project Team'.format(datetime.date.today)\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import source_suffix\n```\n\n```python\n\n\n```\n\n```python\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Doctrine 2 ORM'\ncopyright = u'2010-%y, Doctrine Project Team'.format(datetime.date.today)\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#source_encoding",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#source_encoding = 'utf-8'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Doctrine 2 ORM'\ncopyright = u'2010-%y, Doctrine Project Team'.format(datetime.date.today)\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #source_encoding\n```\n\n```python\n\n\n```\n\n```python\n#source_encoding = 'utf-8'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Doctrine 2 ORM'\ncopyright = u'2010-%y, Doctrine Project Team'.format(datetime.date.today)\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "master_doc = 'index'\n# General information about the project.\nproject = u'Doctrine 2 ORM'\ncopyright = u'2010-%y, Doctrine Project Team'.format(datetime.date.today)\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '2'",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import master_doc\n```\n\n```python\n\n\n```\n\n```python\nmaster_doc = 'index'\n# General information about the project.\nproject = u'Doctrine 2 ORM'\ncopyright = u'2010-%y, Doctrine Project Team'.format(datetime.date.today)\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '2'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "project = u'Doctrine 2 ORM'\ncopyright = u'2010-%y, Doctrine Project Team'.format(datetime.date.today)\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '2'\n# The full version, including alpha/beta/rc tags.\nrelease = '2'",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import project\n```\n\n```python\n\n\n```\n\n```python\nproject = u'Doctrine 2 ORM'\ncopyright = u'2010-%y, Doctrine Project Team'.format(datetime.date.today)\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '2'\n# The full version, including alpha/beta/rc tags.\nrelease = '2'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "copyright = u'2010-%y, Doctrine Project Team'.format(datetime.date.today)\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '2'\n# The full version, including alpha/beta/rc tags.\nrelease = '2'\n# The language for content autogenerated by Sphinx. Refer to documentation",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import copyright\n```\n\n```python\n\n\n```\n\n```python\ncopyright = u'2010-%y, Doctrine Project Team'.format(datetime.date.today)\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '2'\n# The full version, including alpha/beta/rc tags.\nrelease = '2'\n# The language for content autogenerated by Sphinx. Refer to documentation\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "version = '2'\n# The full version, including alpha/beta/rc tags.\nrelease = '2'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\nlanguage = 'en'\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import version\n```\n\n```python\n\n\n```\n\n```python\nversion = '2'\n# The full version, including alpha/beta/rc tags.\nrelease = '2'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\nlanguage = 'en'\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "release = '2'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\nlanguage = 'en'\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of documents that shouldn't be included in the build.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import release\n```\n\n```python\n\n\n```\n\n```python\nrelease = '2'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\nlanguage = 'en'\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of documents that shouldn't be included in the build.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "language",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "language = 'en'\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of documents that shouldn't be included in the build.\n#unused_docs = []\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import language\n```\n\n```python\n\n\n```\n\n```python\nlanguage = 'en'\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of documents that shouldn't be included in the build.\n#unused_docs = []\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#today",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of documents that shouldn't be included in the build.\n#unused_docs = []\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.\nexclude_trees = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #today\n```\n\n```python\n\n\n```\n\n```python\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of documents that shouldn't be included in the build.\n#unused_docs = []\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.\nexclude_trees = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#today_fmt",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#today_fmt = '%B %d, %Y'\n# List of documents that shouldn't be included in the build.\n#unused_docs = []\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.\nexclude_trees = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #today_fmt\n```\n\n```python\n\n\n```\n\n```python\n#today_fmt = '%B %d, %Y'\n# List of documents that shouldn't be included in the build.\n#unused_docs = []\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.\nexclude_trees = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#unused_docs",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#unused_docs = []\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.\nexclude_trees = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #unused_docs\n```\n\n```python\n\n\n```\n\n```python\n#unused_docs = []\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.\nexclude_trees = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "exclude_trees",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "exclude_trees = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import exclude_trees\n```\n\n```python\n\n\n```\n\n```python\nexclude_trees = ['_build']\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#default_role",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\nshow_authors = True\n# The name of the Pygments (syntax highlighting) style to use.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #default_role\n```\n\n```python\n\n\n```\n\n```python\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\nshow_authors = True\n# The name of the Pygments (syntax highlighting) style to use.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#add_function_parentheses",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\nshow_authors = True\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #add_function_parentheses\n```\n\n```python\n\n\n```\n\n```python\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\nshow_authors = True\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#add_module_names",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\nshow_authors = True\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  Major themes that come with",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #add_module_names\n```\n\n```python\n\n\n```\n\n```python\n#add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\nshow_authors = True\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  Major themes that come with\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "show_authors",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "show_authors = True\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  Major themes that come with\n# Sphinx are currently 'default' and 'sphinxdoc'.\nhtml_theme = 'doctrine'\n# Theme options are theme-specific and customize the look and feel of a theme",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import show_authors\n```\n\n```python\n\n\n```\n\n```python\nshow_authors = True\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  Major themes that come with\n# Sphinx are currently 'default' and 'sphinxdoc'.\nhtml_theme = 'doctrine'\n# Theme options are theme-specific and customize the look and feel of a theme\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "pygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  Major themes that come with\n# Sphinx are currently 'default' and 'sphinxdoc'.\nhtml_theme = 'doctrine'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import pygments_style\n```\n\n```python\n\n\n```\n\n```python\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  Major themes that come with\n# Sphinx are currently 'default' and 'sphinxdoc'.\nhtml_theme = 'doctrine'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#modindex_common_prefix",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#modindex_common_prefix = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  Major themes that come with\n# Sphinx are currently 'default' and 'sphinxdoc'.\nhtml_theme = 'doctrine'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #modindex_common_prefix\n```\n\n```python\n\n\n```\n\n```python\n#modindex_common_prefix = []\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  Major themes that come with\n# Sphinx are currently 'default' and 'sphinxdoc'.\nhtml_theme = 'doctrine'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "html_theme = 'doctrine'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\nhtml_theme_path = ['_theme']\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import html_theme\n```\n\n```python\n\n\n```\n\n```python\nhtml_theme = 'doctrine'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\nhtml_theme_path = ['_theme']\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_theme_options",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\nhtml_theme_path = ['_theme']\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_theme_options\n```\n\n```python\n\n\n```\n\n```python\n#html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\nhtml_theme_path = ['_theme']\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "html_theme_path",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "html_theme_path = ['_theme']\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import html_theme_path\n```\n\n```python\n\n\n```\n\n```python\nhtml_theme_path = ['_theme']\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_title",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_title\n```\n\n```python\n\n\n```\n\n```python\n#html_title = None\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_short_title",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_short_title\n```\n\n```python\n\n\n```\n\n```python\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_logo",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_logo\n```\n\n```python\n\n\n```\n\n```python\n#html_logo = None\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_favicon",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_favicon\n```\n\n```python\n\n\n```\n\n```python\n#html_favicon = None\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "html_static_path = ['_static']\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import html_static_path\n```\n\n```python\n\n\n```\n\n```python\nhtml_static_path = ['_static']\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_last_updated_fmt",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_last_updated_fmt\n```\n\n```python\n\n\n```\n\n```python\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_use_smartypants",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_use_modindex = True\n# If false, no index is generated.\n#html_use_index = True",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_use_smartypants\n```\n\n```python\n\n\n```\n\n```python\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_use_modindex = True\n# If false, no index is generated.\n#html_use_index = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_sidebars",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_use_modindex = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_sidebars\n```\n\n```python\n\n\n```\n\n```python\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_use_modindex = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_additional_pages",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_additional_pages = {}\n# If false, no module index is generated.\n#html_use_modindex = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, an OpenSearch description file will be output, and all pages will",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_additional_pages\n```\n\n```python\n\n\n```\n\n```python\n#html_additional_pages = {}\n# If false, no module index is generated.\n#html_use_modindex = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, an OpenSearch description file will be output, and all pages will\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_use_modindex",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_use_modindex = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_use_modindex\n```\n\n```python\n\n\n```\n\n```python\n#html_use_modindex = True\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_use_index",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_use_index\n```\n\n```python\n\n\n```\n\n```python\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_split_index",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = ''\n# Output file base name for HTML help builder.",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_split_index\n```\n\n```python\n\n\n```\n\n```python\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = ''\n# Output file base name for HTML help builder.\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_show_sourcelink",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_show_sourcelink = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = ''\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'Doctrine2ORMdoc'\n# -- Options for LaTeX output --------------------------------------------------",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_show_sourcelink\n```\n\n```python\n\n\n```\n\n```python\n#html_show_sourcelink = True\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = ''\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'Doctrine2ORMdoc'\n# -- Options for LaTeX output --------------------------------------------------\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_use_opensearch",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_use_opensearch = ''\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = ''\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'Doctrine2ORMdoc'\n# -- Options for LaTeX output --------------------------------------------------\n# The paper size ('letter' or 'a4').\n#latex_paper_size = 'letter'\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_use_opensearch\n```\n\n```python\n\n\n```\n\n```python\n#html_use_opensearch = ''\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = ''\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'Doctrine2ORMdoc'\n# -- Options for LaTeX output --------------------------------------------------\n# The paper size ('letter' or 'a4').\n#latex_paper_size = 'letter'\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#html_file_suffix",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#html_file_suffix = ''\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'Doctrine2ORMdoc'\n# -- Options for LaTeX output --------------------------------------------------\n# The paper size ('letter' or 'a4').\n#latex_paper_size = 'letter'\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #html_file_suffix\n```\n\n```python\n\n\n```\n\n```python\n#html_file_suffix = ''\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'Doctrine2ORMdoc'\n# -- Options for LaTeX output --------------------------------------------------\n# The paper size ('letter' or 'a4').\n#latex_paper_size = 'letter'\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "htmlhelp_basename = 'Doctrine2ORMdoc'\n# -- Options for LaTeX output --------------------------------------------------\n# The paper size ('letter' or 'a4').\n#latex_paper_size = 'letter'\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'Doctrine2ORM.tex', u'Doctrine 2 ORM Documentation',",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import htmlhelp_basename\n```\n\n```python\n\n\n```\n\n```python\nhtmlhelp_basename = 'Doctrine2ORMdoc'\n# -- Options for LaTeX output --------------------------------------------------\n# The paper size ('letter' or 'a4').\n#latex_paper_size = 'letter'\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'Doctrine2ORM.tex', u'Doctrine 2 ORM Documentation',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_paper_size",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#latex_paper_size = 'letter'\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'Doctrine2ORM.tex', u'Doctrine 2 ORM Documentation',\n   u'Doctrine Project Team', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #latex_paper_size\n```\n\n```python\n\n\n```\n\n```python\n#latex_paper_size = 'letter'\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'Doctrine2ORM.tex', u'Doctrine 2 ORM Documentation',\n   u'Doctrine Project Team', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_font_size",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#latex_font_size = '10pt'\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'Doctrine2ORM.tex', u'Doctrine 2 ORM Documentation',\n   u'Doctrine Project Team', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #latex_font_size\n```\n\n```python\n\n\n```\n\n```python\n#latex_font_size = '10pt'\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'Doctrine2ORM.tex', u'Doctrine 2 ORM Documentation',\n   u'Doctrine Project Team', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "latex_documents = [\n  ('index', 'Doctrine2ORM.tex', u'Doctrine 2 ORM Documentation',\n   u'Doctrine Project Team', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import latex_documents\n```\n\n```python\n\n\n```\n\n```python\nlatex_documents = [\n  ('index', 'Doctrine2ORM.tex', u'Doctrine 2 ORM Documentation',\n   u'Doctrine Project Team', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_logo",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n# Additional stuff for the LaTeX preamble.\n#latex_preamble = ''\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_use_modindex = True",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #latex_logo\n```\n\n```python\n\n\n```\n\n```python\n#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n# Additional stuff for the LaTeX preamble.\n#latex_preamble = ''\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_use_modindex = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_use_parts",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#latex_use_parts = False\n# Additional stuff for the LaTeX preamble.\n#latex_preamble = ''\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_use_modindex = True\nprimary_domain = \"dcorm\"\ndef linkcode_resolve(domain, info):\n    if domain == 'dcorm':",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #latex_use_parts\n```\n\n```python\n\n\n```\n\n```python\n#latex_use_parts = False\n# Additional stuff for the LaTeX preamble.\n#latex_preamble = ''\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_use_modindex = True\nprimary_domain = \"dcorm\"\ndef linkcode_resolve(domain, info):\n    if domain == 'dcorm':\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_preamble",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#latex_preamble = ''\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_use_modindex = True\nprimary_domain = \"dcorm\"\ndef linkcode_resolve(domain, info):\n    if domain == 'dcorm':\n        return 'http://'\n    return None",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #latex_preamble\n```\n\n```python\n\n\n```\n\n```python\n#latex_preamble = ''\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_use_modindex = True\nprimary_domain = \"dcorm\"\ndef linkcode_resolve(domain, info):\n    if domain == 'dcorm':\n        return 'http://'\n    return None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_appendices",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#latex_appendices = []\n# If false, no module index is generated.\n#latex_use_modindex = True\nprimary_domain = \"dcorm\"\ndef linkcode_resolve(domain, info):\n    if domain == 'dcorm':\n        return 'http://'\n    return None",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #latex_appendices\n```\n\n```python\n\n\n```\n\n```python\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_use_modindex = True\nprimary_domain = \"dcorm\"\ndef linkcode_resolve(domain, info):\n    if domain == 'dcorm':\n        return 'http://'\n    return None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#latex_use_modindex",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "#latex_use_modindex = True\nprimary_domain = \"dcorm\"\ndef linkcode_resolve(domain, info):\n    if domain == 'dcorm':\n        return 'http://'\n    return None",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import #latex_use_modindex\n```\n\n```python\n\n\n```\n\n```python\n#latex_use_modindex = True\nprimary_domain = \"dcorm\"\ndef linkcode_resolve(domain, info):\n    if domain == 'dcorm':\n        return 'http://'\n    return None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "primary_domain",
        "kind": 5,
        "importPath": "vendor.doctrine.orm.docs.en.conf",
        "description": "vendor.doctrine.orm.docs.en.conf",
        "peekOfCode": "primary_domain = \"dcorm\"\ndef linkcode_resolve(domain, info):\n    if domain == 'dcorm':\n        return 'http://'\n    return None",
        "detail": "vendor.doctrine.orm.docs.en.conf",
        "documentation": {
            "value": "\n```python\nfrom vendor.doctrine.orm.docs.en.conf import primary_domain\n```\n\n```python\n\n\n```\n\n```python\nprimary_domain = \"dcorm\"\ndef linkcode_resolve(domain, info):\n    if domain == 'dcorm':\n        return 'http://'\n    return None\n```\n",
            "supportThemeIcons": false
        }
    }
]